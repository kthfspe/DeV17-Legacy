
CCU-SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cb4  080080bc  080080bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08010d70  08010d70  00010d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f08  08010f08  00020478  2**0
                  CONTENTS
  4 .ARM          00000000  08010f08  08010f08  00020478  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010f08  08010f08  00020478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f08  08010f08  00010f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f0c  08010f0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000400  08010f10  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000478  08010f88  00020478  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  08010f88  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e80d  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002892  00000000  00000000  0002ecad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00031540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  000322c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c634  00000000  00000000  00032f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011563  00000000  00000000  0004f5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a86df  00000000  00000000  00060b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001091ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003454  00000000  00000000  00109240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080080bc <__do_global_dtors_aux>:
 80080bc:	b510      	push	{r4, lr}
 80080be:	4c06      	ldr	r4, [pc, #24]	; (80080d8 <__do_global_dtors_aux+0x1c>)
 80080c0:	7823      	ldrb	r3, [r4, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d107      	bne.n	80080d6 <__do_global_dtors_aux+0x1a>
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <__do_global_dtors_aux+0x20>)
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d002      	beq.n	80080d2 <__do_global_dtors_aux+0x16>
 80080cc:	4804      	ldr	r0, [pc, #16]	; (80080e0 <__do_global_dtors_aux+0x24>)
 80080ce:	e000      	b.n	80080d2 <__do_global_dtors_aux+0x16>
 80080d0:	bf00      	nop
 80080d2:	2301      	movs	r3, #1
 80080d4:	7023      	strb	r3, [r4, #0]
 80080d6:	bd10      	pop	{r4, pc}
 80080d8:	20000478 	.word	0x20000478
 80080dc:	00000000 	.word	0x00000000
 80080e0:	08010d58 	.word	0x08010d58

080080e4 <frame_dummy>:
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <frame_dummy+0x14>)
 80080e6:	b510      	push	{r4, lr}
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <frame_dummy+0x10>
 80080ec:	4903      	ldr	r1, [pc, #12]	; (80080fc <frame_dummy+0x18>)
 80080ee:	4804      	ldr	r0, [pc, #16]	; (8008100 <frame_dummy+0x1c>)
 80080f0:	e000      	b.n	80080f4 <frame_dummy+0x10>
 80080f2:	bf00      	nop
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	00000000 	.word	0x00000000
 80080fc:	2000047c 	.word	0x2000047c
 8008100:	08010d58 	.word	0x08010d58

08008104 <__udivsi3>:
 8008104:	2200      	movs	r2, #0
 8008106:	0843      	lsrs	r3, r0, #1
 8008108:	428b      	cmp	r3, r1
 800810a:	d374      	bcc.n	80081f6 <__udivsi3+0xf2>
 800810c:	0903      	lsrs	r3, r0, #4
 800810e:	428b      	cmp	r3, r1
 8008110:	d35f      	bcc.n	80081d2 <__udivsi3+0xce>
 8008112:	0a03      	lsrs	r3, r0, #8
 8008114:	428b      	cmp	r3, r1
 8008116:	d344      	bcc.n	80081a2 <__udivsi3+0x9e>
 8008118:	0b03      	lsrs	r3, r0, #12
 800811a:	428b      	cmp	r3, r1
 800811c:	d328      	bcc.n	8008170 <__udivsi3+0x6c>
 800811e:	0c03      	lsrs	r3, r0, #16
 8008120:	428b      	cmp	r3, r1
 8008122:	d30d      	bcc.n	8008140 <__udivsi3+0x3c>
 8008124:	22ff      	movs	r2, #255	; 0xff
 8008126:	0209      	lsls	r1, r1, #8
 8008128:	ba12      	rev	r2, r2
 800812a:	0c03      	lsrs	r3, r0, #16
 800812c:	428b      	cmp	r3, r1
 800812e:	d302      	bcc.n	8008136 <__udivsi3+0x32>
 8008130:	1212      	asrs	r2, r2, #8
 8008132:	0209      	lsls	r1, r1, #8
 8008134:	d065      	beq.n	8008202 <__udivsi3+0xfe>
 8008136:	0b03      	lsrs	r3, r0, #12
 8008138:	428b      	cmp	r3, r1
 800813a:	d319      	bcc.n	8008170 <__udivsi3+0x6c>
 800813c:	e000      	b.n	8008140 <__udivsi3+0x3c>
 800813e:	0a09      	lsrs	r1, r1, #8
 8008140:	0bc3      	lsrs	r3, r0, #15
 8008142:	428b      	cmp	r3, r1
 8008144:	d301      	bcc.n	800814a <__udivsi3+0x46>
 8008146:	03cb      	lsls	r3, r1, #15
 8008148:	1ac0      	subs	r0, r0, r3
 800814a:	4152      	adcs	r2, r2
 800814c:	0b83      	lsrs	r3, r0, #14
 800814e:	428b      	cmp	r3, r1
 8008150:	d301      	bcc.n	8008156 <__udivsi3+0x52>
 8008152:	038b      	lsls	r3, r1, #14
 8008154:	1ac0      	subs	r0, r0, r3
 8008156:	4152      	adcs	r2, r2
 8008158:	0b43      	lsrs	r3, r0, #13
 800815a:	428b      	cmp	r3, r1
 800815c:	d301      	bcc.n	8008162 <__udivsi3+0x5e>
 800815e:	034b      	lsls	r3, r1, #13
 8008160:	1ac0      	subs	r0, r0, r3
 8008162:	4152      	adcs	r2, r2
 8008164:	0b03      	lsrs	r3, r0, #12
 8008166:	428b      	cmp	r3, r1
 8008168:	d301      	bcc.n	800816e <__udivsi3+0x6a>
 800816a:	030b      	lsls	r3, r1, #12
 800816c:	1ac0      	subs	r0, r0, r3
 800816e:	4152      	adcs	r2, r2
 8008170:	0ac3      	lsrs	r3, r0, #11
 8008172:	428b      	cmp	r3, r1
 8008174:	d301      	bcc.n	800817a <__udivsi3+0x76>
 8008176:	02cb      	lsls	r3, r1, #11
 8008178:	1ac0      	subs	r0, r0, r3
 800817a:	4152      	adcs	r2, r2
 800817c:	0a83      	lsrs	r3, r0, #10
 800817e:	428b      	cmp	r3, r1
 8008180:	d301      	bcc.n	8008186 <__udivsi3+0x82>
 8008182:	028b      	lsls	r3, r1, #10
 8008184:	1ac0      	subs	r0, r0, r3
 8008186:	4152      	adcs	r2, r2
 8008188:	0a43      	lsrs	r3, r0, #9
 800818a:	428b      	cmp	r3, r1
 800818c:	d301      	bcc.n	8008192 <__udivsi3+0x8e>
 800818e:	024b      	lsls	r3, r1, #9
 8008190:	1ac0      	subs	r0, r0, r3
 8008192:	4152      	adcs	r2, r2
 8008194:	0a03      	lsrs	r3, r0, #8
 8008196:	428b      	cmp	r3, r1
 8008198:	d301      	bcc.n	800819e <__udivsi3+0x9a>
 800819a:	020b      	lsls	r3, r1, #8
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	4152      	adcs	r2, r2
 80081a0:	d2cd      	bcs.n	800813e <__udivsi3+0x3a>
 80081a2:	09c3      	lsrs	r3, r0, #7
 80081a4:	428b      	cmp	r3, r1
 80081a6:	d301      	bcc.n	80081ac <__udivsi3+0xa8>
 80081a8:	01cb      	lsls	r3, r1, #7
 80081aa:	1ac0      	subs	r0, r0, r3
 80081ac:	4152      	adcs	r2, r2
 80081ae:	0983      	lsrs	r3, r0, #6
 80081b0:	428b      	cmp	r3, r1
 80081b2:	d301      	bcc.n	80081b8 <__udivsi3+0xb4>
 80081b4:	018b      	lsls	r3, r1, #6
 80081b6:	1ac0      	subs	r0, r0, r3
 80081b8:	4152      	adcs	r2, r2
 80081ba:	0943      	lsrs	r3, r0, #5
 80081bc:	428b      	cmp	r3, r1
 80081be:	d301      	bcc.n	80081c4 <__udivsi3+0xc0>
 80081c0:	014b      	lsls	r3, r1, #5
 80081c2:	1ac0      	subs	r0, r0, r3
 80081c4:	4152      	adcs	r2, r2
 80081c6:	0903      	lsrs	r3, r0, #4
 80081c8:	428b      	cmp	r3, r1
 80081ca:	d301      	bcc.n	80081d0 <__udivsi3+0xcc>
 80081cc:	010b      	lsls	r3, r1, #4
 80081ce:	1ac0      	subs	r0, r0, r3
 80081d0:	4152      	adcs	r2, r2
 80081d2:	08c3      	lsrs	r3, r0, #3
 80081d4:	428b      	cmp	r3, r1
 80081d6:	d301      	bcc.n	80081dc <__udivsi3+0xd8>
 80081d8:	00cb      	lsls	r3, r1, #3
 80081da:	1ac0      	subs	r0, r0, r3
 80081dc:	4152      	adcs	r2, r2
 80081de:	0883      	lsrs	r3, r0, #2
 80081e0:	428b      	cmp	r3, r1
 80081e2:	d301      	bcc.n	80081e8 <__udivsi3+0xe4>
 80081e4:	008b      	lsls	r3, r1, #2
 80081e6:	1ac0      	subs	r0, r0, r3
 80081e8:	4152      	adcs	r2, r2
 80081ea:	0843      	lsrs	r3, r0, #1
 80081ec:	428b      	cmp	r3, r1
 80081ee:	d301      	bcc.n	80081f4 <__udivsi3+0xf0>
 80081f0:	004b      	lsls	r3, r1, #1
 80081f2:	1ac0      	subs	r0, r0, r3
 80081f4:	4152      	adcs	r2, r2
 80081f6:	1a41      	subs	r1, r0, r1
 80081f8:	d200      	bcs.n	80081fc <__udivsi3+0xf8>
 80081fa:	4601      	mov	r1, r0
 80081fc:	4152      	adcs	r2, r2
 80081fe:	4610      	mov	r0, r2
 8008200:	4770      	bx	lr
 8008202:	e7ff      	b.n	8008204 <__udivsi3+0x100>
 8008204:	b501      	push	{r0, lr}
 8008206:	2000      	movs	r0, #0
 8008208:	f000 f806 	bl	8008218 <__aeabi_idiv0>
 800820c:	bd02      	pop	{r1, pc}
 800820e:	46c0      	nop			; (mov r8, r8)

08008210 <__aeabi_uidivmod>:
 8008210:	2900      	cmp	r1, #0
 8008212:	d0f7      	beq.n	8008204 <__udivsi3+0x100>
 8008214:	e776      	b.n	8008104 <__udivsi3>
 8008216:	4770      	bx	lr

08008218 <__aeabi_idiv0>:
 8008218:	4770      	bx	lr
 800821a:	46c0      	nop			; (mov r8, r8)

0800821c <__aeabi_cdrcmple>:
 800821c:	4684      	mov	ip, r0
 800821e:	0010      	movs	r0, r2
 8008220:	4662      	mov	r2, ip
 8008222:	468c      	mov	ip, r1
 8008224:	0019      	movs	r1, r3
 8008226:	4663      	mov	r3, ip
 8008228:	e000      	b.n	800822c <__aeabi_cdcmpeq>
 800822a:	46c0      	nop			; (mov r8, r8)

0800822c <__aeabi_cdcmpeq>:
 800822c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800822e:	f001 fe67 	bl	8009f00 <__ledf2>
 8008232:	2800      	cmp	r0, #0
 8008234:	d401      	bmi.n	800823a <__aeabi_cdcmpeq+0xe>
 8008236:	2100      	movs	r1, #0
 8008238:	42c8      	cmn	r0, r1
 800823a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800823c <__aeabi_dcmpeq>:
 800823c:	b510      	push	{r4, lr}
 800823e:	f001 fdb7 	bl	8009db0 <__eqdf2>
 8008242:	4240      	negs	r0, r0
 8008244:	3001      	adds	r0, #1
 8008246:	bd10      	pop	{r4, pc}

08008248 <__aeabi_dcmplt>:
 8008248:	b510      	push	{r4, lr}
 800824a:	f001 fe59 	bl	8009f00 <__ledf2>
 800824e:	2800      	cmp	r0, #0
 8008250:	db01      	blt.n	8008256 <__aeabi_dcmplt+0xe>
 8008252:	2000      	movs	r0, #0
 8008254:	bd10      	pop	{r4, pc}
 8008256:	2001      	movs	r0, #1
 8008258:	bd10      	pop	{r4, pc}
 800825a:	46c0      	nop			; (mov r8, r8)

0800825c <__aeabi_dcmple>:
 800825c:	b510      	push	{r4, lr}
 800825e:	f001 fe4f 	bl	8009f00 <__ledf2>
 8008262:	2800      	cmp	r0, #0
 8008264:	dd01      	ble.n	800826a <__aeabi_dcmple+0xe>
 8008266:	2000      	movs	r0, #0
 8008268:	bd10      	pop	{r4, pc}
 800826a:	2001      	movs	r0, #1
 800826c:	bd10      	pop	{r4, pc}
 800826e:	46c0      	nop			; (mov r8, r8)

08008270 <__aeabi_dcmpgt>:
 8008270:	b510      	push	{r4, lr}
 8008272:	f001 fddf 	bl	8009e34 <__gedf2>
 8008276:	2800      	cmp	r0, #0
 8008278:	dc01      	bgt.n	800827e <__aeabi_dcmpgt+0xe>
 800827a:	2000      	movs	r0, #0
 800827c:	bd10      	pop	{r4, pc}
 800827e:	2001      	movs	r0, #1
 8008280:	bd10      	pop	{r4, pc}
 8008282:	46c0      	nop			; (mov r8, r8)

08008284 <__aeabi_dcmpge>:
 8008284:	b510      	push	{r4, lr}
 8008286:	f001 fdd5 	bl	8009e34 <__gedf2>
 800828a:	2800      	cmp	r0, #0
 800828c:	da01      	bge.n	8008292 <__aeabi_dcmpge+0xe>
 800828e:	2000      	movs	r0, #0
 8008290:	bd10      	pop	{r4, pc}
 8008292:	2001      	movs	r0, #1
 8008294:	bd10      	pop	{r4, pc}
 8008296:	46c0      	nop			; (mov r8, r8)

08008298 <__aeabi_cfrcmple>:
 8008298:	4684      	mov	ip, r0
 800829a:	0008      	movs	r0, r1
 800829c:	4661      	mov	r1, ip
 800829e:	e7ff      	b.n	80082a0 <__aeabi_cfcmpeq>

080082a0 <__aeabi_cfcmpeq>:
 80082a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082a2:	f000 fb8b 	bl	80089bc <__lesf2>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d401      	bmi.n	80082ae <__aeabi_cfcmpeq+0xe>
 80082aa:	2100      	movs	r1, #0
 80082ac:	42c8      	cmn	r0, r1
 80082ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080082b0 <__aeabi_fcmpeq>:
 80082b0:	b510      	push	{r4, lr}
 80082b2:	f000 fb17 	bl	80088e4 <__eqsf2>
 80082b6:	4240      	negs	r0, r0
 80082b8:	3001      	adds	r0, #1
 80082ba:	bd10      	pop	{r4, pc}

080082bc <__aeabi_fcmplt>:
 80082bc:	b510      	push	{r4, lr}
 80082be:	f000 fb7d 	bl	80089bc <__lesf2>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	db01      	blt.n	80082ca <__aeabi_fcmplt+0xe>
 80082c6:	2000      	movs	r0, #0
 80082c8:	bd10      	pop	{r4, pc}
 80082ca:	2001      	movs	r0, #1
 80082cc:	bd10      	pop	{r4, pc}
 80082ce:	46c0      	nop			; (mov r8, r8)

080082d0 <__aeabi_fcmple>:
 80082d0:	b510      	push	{r4, lr}
 80082d2:	f000 fb73 	bl	80089bc <__lesf2>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	dd01      	ble.n	80082de <__aeabi_fcmple+0xe>
 80082da:	2000      	movs	r0, #0
 80082dc:	bd10      	pop	{r4, pc}
 80082de:	2001      	movs	r0, #1
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	46c0      	nop			; (mov r8, r8)

080082e4 <__aeabi_fcmpgt>:
 80082e4:	b510      	push	{r4, lr}
 80082e6:	f000 fb23 	bl	8008930 <__gesf2>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	dc01      	bgt.n	80082f2 <__aeabi_fcmpgt+0xe>
 80082ee:	2000      	movs	r0, #0
 80082f0:	bd10      	pop	{r4, pc}
 80082f2:	2001      	movs	r0, #1
 80082f4:	bd10      	pop	{r4, pc}
 80082f6:	46c0      	nop			; (mov r8, r8)

080082f8 <__aeabi_fcmpge>:
 80082f8:	b510      	push	{r4, lr}
 80082fa:	f000 fb19 	bl	8008930 <__gesf2>
 80082fe:	2800      	cmp	r0, #0
 8008300:	da01      	bge.n	8008306 <__aeabi_fcmpge+0xe>
 8008302:	2000      	movs	r0, #0
 8008304:	bd10      	pop	{r4, pc}
 8008306:	2001      	movs	r0, #1
 8008308:	bd10      	pop	{r4, pc}
 800830a:	46c0      	nop			; (mov r8, r8)

0800830c <__aeabi_f2uiz>:
 800830c:	219e      	movs	r1, #158	; 0x9e
 800830e:	b510      	push	{r4, lr}
 8008310:	05c9      	lsls	r1, r1, #23
 8008312:	1c04      	adds	r4, r0, #0
 8008314:	f7ff fff0 	bl	80082f8 <__aeabi_fcmpge>
 8008318:	2800      	cmp	r0, #0
 800831a:	d103      	bne.n	8008324 <__aeabi_f2uiz+0x18>
 800831c:	1c20      	adds	r0, r4, #0
 800831e:	f000 fe65 	bl	8008fec <__aeabi_f2iz>
 8008322:	bd10      	pop	{r4, pc}
 8008324:	219e      	movs	r1, #158	; 0x9e
 8008326:	1c20      	adds	r0, r4, #0
 8008328:	05c9      	lsls	r1, r1, #23
 800832a:	f000 fcb1 	bl	8008c90 <__aeabi_fsub>
 800832e:	f000 fe5d 	bl	8008fec <__aeabi_f2iz>
 8008332:	2380      	movs	r3, #128	; 0x80
 8008334:	061b      	lsls	r3, r3, #24
 8008336:	469c      	mov	ip, r3
 8008338:	4460      	add	r0, ip
 800833a:	e7f2      	b.n	8008322 <__aeabi_f2uiz+0x16>

0800833c <__aeabi_d2uiz>:
 800833c:	b570      	push	{r4, r5, r6, lr}
 800833e:	2200      	movs	r2, #0
 8008340:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <__aeabi_d2uiz+0x38>)
 8008342:	0004      	movs	r4, r0
 8008344:	000d      	movs	r5, r1
 8008346:	f7ff ff9d 	bl	8008284 <__aeabi_dcmpge>
 800834a:	2800      	cmp	r0, #0
 800834c:	d104      	bne.n	8008358 <__aeabi_d2uiz+0x1c>
 800834e:	0020      	movs	r0, r4
 8008350:	0029      	movs	r1, r5
 8008352:	f002 fc55 	bl	800ac00 <__aeabi_d2iz>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <__aeabi_d2uiz+0x38>)
 800835a:	2200      	movs	r2, #0
 800835c:	0020      	movs	r0, r4
 800835e:	0029      	movs	r1, r5
 8008360:	f002 f89e 	bl	800a4a0 <__aeabi_dsub>
 8008364:	f002 fc4c 	bl	800ac00 <__aeabi_d2iz>
 8008368:	2380      	movs	r3, #128	; 0x80
 800836a:	061b      	lsls	r3, r3, #24
 800836c:	469c      	mov	ip, r3
 800836e:	4460      	add	r0, ip
 8008370:	e7f1      	b.n	8008356 <__aeabi_d2uiz+0x1a>
 8008372:	46c0      	nop			; (mov r8, r8)
 8008374:	41e00000 	.word	0x41e00000

08008378 <__aeabi_fadd>:
 8008378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837a:	46c6      	mov	lr, r8
 800837c:	0243      	lsls	r3, r0, #9
 800837e:	0a5b      	lsrs	r3, r3, #9
 8008380:	024e      	lsls	r6, r1, #9
 8008382:	0045      	lsls	r5, r0, #1
 8008384:	004f      	lsls	r7, r1, #1
 8008386:	00da      	lsls	r2, r3, #3
 8008388:	0fc4      	lsrs	r4, r0, #31
 800838a:	469c      	mov	ip, r3
 800838c:	0a70      	lsrs	r0, r6, #9
 800838e:	4690      	mov	r8, r2
 8008390:	b500      	push	{lr}
 8008392:	0e2d      	lsrs	r5, r5, #24
 8008394:	0e3f      	lsrs	r7, r7, #24
 8008396:	0fc9      	lsrs	r1, r1, #31
 8008398:	09b6      	lsrs	r6, r6, #6
 800839a:	428c      	cmp	r4, r1
 800839c:	d04b      	beq.n	8008436 <__aeabi_fadd+0xbe>
 800839e:	1bea      	subs	r2, r5, r7
 80083a0:	2a00      	cmp	r2, #0
 80083a2:	dd36      	ble.n	8008412 <__aeabi_fadd+0x9a>
 80083a4:	2f00      	cmp	r7, #0
 80083a6:	d061      	beq.n	800846c <__aeabi_fadd+0xf4>
 80083a8:	2dff      	cmp	r5, #255	; 0xff
 80083aa:	d100      	bne.n	80083ae <__aeabi_fadd+0x36>
 80083ac:	e0ad      	b.n	800850a <__aeabi_fadd+0x192>
 80083ae:	2380      	movs	r3, #128	; 0x80
 80083b0:	04db      	lsls	r3, r3, #19
 80083b2:	431e      	orrs	r6, r3
 80083b4:	2a1b      	cmp	r2, #27
 80083b6:	dc00      	bgt.n	80083ba <__aeabi_fadd+0x42>
 80083b8:	e0d3      	b.n	8008562 <__aeabi_fadd+0x1ea>
 80083ba:	2001      	movs	r0, #1
 80083bc:	4643      	mov	r3, r8
 80083be:	1a18      	subs	r0, r3, r0
 80083c0:	0143      	lsls	r3, r0, #5
 80083c2:	d400      	bmi.n	80083c6 <__aeabi_fadd+0x4e>
 80083c4:	e08c      	b.n	80084e0 <__aeabi_fadd+0x168>
 80083c6:	0180      	lsls	r0, r0, #6
 80083c8:	0987      	lsrs	r7, r0, #6
 80083ca:	0038      	movs	r0, r7
 80083cc:	f002 fd2c 	bl	800ae28 <__clzsi2>
 80083d0:	3805      	subs	r0, #5
 80083d2:	4087      	lsls	r7, r0
 80083d4:	4285      	cmp	r5, r0
 80083d6:	dc00      	bgt.n	80083da <__aeabi_fadd+0x62>
 80083d8:	e0b6      	b.n	8008548 <__aeabi_fadd+0x1d0>
 80083da:	1a2d      	subs	r5, r5, r0
 80083dc:	48b3      	ldr	r0, [pc, #716]	; (80086ac <__aeabi_fadd+0x334>)
 80083de:	4038      	ands	r0, r7
 80083e0:	0743      	lsls	r3, r0, #29
 80083e2:	d004      	beq.n	80083ee <__aeabi_fadd+0x76>
 80083e4:	230f      	movs	r3, #15
 80083e6:	4003      	ands	r3, r0
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d000      	beq.n	80083ee <__aeabi_fadd+0x76>
 80083ec:	3004      	adds	r0, #4
 80083ee:	0143      	lsls	r3, r0, #5
 80083f0:	d400      	bmi.n	80083f4 <__aeabi_fadd+0x7c>
 80083f2:	e078      	b.n	80084e6 <__aeabi_fadd+0x16e>
 80083f4:	1c6a      	adds	r2, r5, #1
 80083f6:	2dfe      	cmp	r5, #254	; 0xfe
 80083f8:	d065      	beq.n	80084c6 <__aeabi_fadd+0x14e>
 80083fa:	0180      	lsls	r0, r0, #6
 80083fc:	0a43      	lsrs	r3, r0, #9
 80083fe:	469c      	mov	ip, r3
 8008400:	b2d2      	uxtb	r2, r2
 8008402:	4663      	mov	r3, ip
 8008404:	05d0      	lsls	r0, r2, #23
 8008406:	4318      	orrs	r0, r3
 8008408:	07e4      	lsls	r4, r4, #31
 800840a:	4320      	orrs	r0, r4
 800840c:	bc80      	pop	{r7}
 800840e:	46b8      	mov	r8, r7
 8008410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008412:	2a00      	cmp	r2, #0
 8008414:	d035      	beq.n	8008482 <__aeabi_fadd+0x10a>
 8008416:	1b7a      	subs	r2, r7, r5
 8008418:	2d00      	cmp	r5, #0
 800841a:	d000      	beq.n	800841e <__aeabi_fadd+0xa6>
 800841c:	e0af      	b.n	800857e <__aeabi_fadd+0x206>
 800841e:	4643      	mov	r3, r8
 8008420:	2b00      	cmp	r3, #0
 8008422:	d100      	bne.n	8008426 <__aeabi_fadd+0xae>
 8008424:	e0a7      	b.n	8008576 <__aeabi_fadd+0x1fe>
 8008426:	1e53      	subs	r3, r2, #1
 8008428:	2a01      	cmp	r2, #1
 800842a:	d100      	bne.n	800842e <__aeabi_fadd+0xb6>
 800842c:	e12f      	b.n	800868e <__aeabi_fadd+0x316>
 800842e:	2aff      	cmp	r2, #255	; 0xff
 8008430:	d069      	beq.n	8008506 <__aeabi_fadd+0x18e>
 8008432:	001a      	movs	r2, r3
 8008434:	e0aa      	b.n	800858c <__aeabi_fadd+0x214>
 8008436:	1be9      	subs	r1, r5, r7
 8008438:	2900      	cmp	r1, #0
 800843a:	dd70      	ble.n	800851e <__aeabi_fadd+0x1a6>
 800843c:	2f00      	cmp	r7, #0
 800843e:	d037      	beq.n	80084b0 <__aeabi_fadd+0x138>
 8008440:	2dff      	cmp	r5, #255	; 0xff
 8008442:	d062      	beq.n	800850a <__aeabi_fadd+0x192>
 8008444:	2380      	movs	r3, #128	; 0x80
 8008446:	04db      	lsls	r3, r3, #19
 8008448:	431e      	orrs	r6, r3
 800844a:	291b      	cmp	r1, #27
 800844c:	dc00      	bgt.n	8008450 <__aeabi_fadd+0xd8>
 800844e:	e0b0      	b.n	80085b2 <__aeabi_fadd+0x23a>
 8008450:	2001      	movs	r0, #1
 8008452:	4440      	add	r0, r8
 8008454:	0143      	lsls	r3, r0, #5
 8008456:	d543      	bpl.n	80084e0 <__aeabi_fadd+0x168>
 8008458:	3501      	adds	r5, #1
 800845a:	2dff      	cmp	r5, #255	; 0xff
 800845c:	d033      	beq.n	80084c6 <__aeabi_fadd+0x14e>
 800845e:	2301      	movs	r3, #1
 8008460:	4a93      	ldr	r2, [pc, #588]	; (80086b0 <__aeabi_fadd+0x338>)
 8008462:	4003      	ands	r3, r0
 8008464:	0840      	lsrs	r0, r0, #1
 8008466:	4010      	ands	r0, r2
 8008468:	4318      	orrs	r0, r3
 800846a:	e7b9      	b.n	80083e0 <__aeabi_fadd+0x68>
 800846c:	2e00      	cmp	r6, #0
 800846e:	d100      	bne.n	8008472 <__aeabi_fadd+0xfa>
 8008470:	e083      	b.n	800857a <__aeabi_fadd+0x202>
 8008472:	1e51      	subs	r1, r2, #1
 8008474:	2a01      	cmp	r2, #1
 8008476:	d100      	bne.n	800847a <__aeabi_fadd+0x102>
 8008478:	e0d8      	b.n	800862c <__aeabi_fadd+0x2b4>
 800847a:	2aff      	cmp	r2, #255	; 0xff
 800847c:	d045      	beq.n	800850a <__aeabi_fadd+0x192>
 800847e:	000a      	movs	r2, r1
 8008480:	e798      	b.n	80083b4 <__aeabi_fadd+0x3c>
 8008482:	27fe      	movs	r7, #254	; 0xfe
 8008484:	1c6a      	adds	r2, r5, #1
 8008486:	4217      	tst	r7, r2
 8008488:	d000      	beq.n	800848c <__aeabi_fadd+0x114>
 800848a:	e086      	b.n	800859a <__aeabi_fadd+0x222>
 800848c:	2d00      	cmp	r5, #0
 800848e:	d000      	beq.n	8008492 <__aeabi_fadd+0x11a>
 8008490:	e0b7      	b.n	8008602 <__aeabi_fadd+0x28a>
 8008492:	4643      	mov	r3, r8
 8008494:	2b00      	cmp	r3, #0
 8008496:	d100      	bne.n	800849a <__aeabi_fadd+0x122>
 8008498:	e0f3      	b.n	8008682 <__aeabi_fadd+0x30a>
 800849a:	2200      	movs	r2, #0
 800849c:	2e00      	cmp	r6, #0
 800849e:	d0b0      	beq.n	8008402 <__aeabi_fadd+0x8a>
 80084a0:	1b98      	subs	r0, r3, r6
 80084a2:	0143      	lsls	r3, r0, #5
 80084a4:	d400      	bmi.n	80084a8 <__aeabi_fadd+0x130>
 80084a6:	e0fa      	b.n	800869e <__aeabi_fadd+0x326>
 80084a8:	4643      	mov	r3, r8
 80084aa:	000c      	movs	r4, r1
 80084ac:	1af0      	subs	r0, r6, r3
 80084ae:	e797      	b.n	80083e0 <__aeabi_fadd+0x68>
 80084b0:	2e00      	cmp	r6, #0
 80084b2:	d100      	bne.n	80084b6 <__aeabi_fadd+0x13e>
 80084b4:	e0c8      	b.n	8008648 <__aeabi_fadd+0x2d0>
 80084b6:	1e4a      	subs	r2, r1, #1
 80084b8:	2901      	cmp	r1, #1
 80084ba:	d100      	bne.n	80084be <__aeabi_fadd+0x146>
 80084bc:	e0ae      	b.n	800861c <__aeabi_fadd+0x2a4>
 80084be:	29ff      	cmp	r1, #255	; 0xff
 80084c0:	d023      	beq.n	800850a <__aeabi_fadd+0x192>
 80084c2:	0011      	movs	r1, r2
 80084c4:	e7c1      	b.n	800844a <__aeabi_fadd+0xd2>
 80084c6:	2300      	movs	r3, #0
 80084c8:	22ff      	movs	r2, #255	; 0xff
 80084ca:	469c      	mov	ip, r3
 80084cc:	e799      	b.n	8008402 <__aeabi_fadd+0x8a>
 80084ce:	21fe      	movs	r1, #254	; 0xfe
 80084d0:	1c6a      	adds	r2, r5, #1
 80084d2:	4211      	tst	r1, r2
 80084d4:	d077      	beq.n	80085c6 <__aeabi_fadd+0x24e>
 80084d6:	2aff      	cmp	r2, #255	; 0xff
 80084d8:	d0f5      	beq.n	80084c6 <__aeabi_fadd+0x14e>
 80084da:	0015      	movs	r5, r2
 80084dc:	4446      	add	r6, r8
 80084de:	0870      	lsrs	r0, r6, #1
 80084e0:	0743      	lsls	r3, r0, #29
 80084e2:	d000      	beq.n	80084e6 <__aeabi_fadd+0x16e>
 80084e4:	e77e      	b.n	80083e4 <__aeabi_fadd+0x6c>
 80084e6:	08c3      	lsrs	r3, r0, #3
 80084e8:	2dff      	cmp	r5, #255	; 0xff
 80084ea:	d00e      	beq.n	800850a <__aeabi_fadd+0x192>
 80084ec:	025b      	lsls	r3, r3, #9
 80084ee:	0a5b      	lsrs	r3, r3, #9
 80084f0:	469c      	mov	ip, r3
 80084f2:	b2ea      	uxtb	r2, r5
 80084f4:	e785      	b.n	8008402 <__aeabi_fadd+0x8a>
 80084f6:	2e00      	cmp	r6, #0
 80084f8:	d007      	beq.n	800850a <__aeabi_fadd+0x192>
 80084fa:	2280      	movs	r2, #128	; 0x80
 80084fc:	03d2      	lsls	r2, r2, #15
 80084fe:	4213      	tst	r3, r2
 8008500:	d003      	beq.n	800850a <__aeabi_fadd+0x192>
 8008502:	4210      	tst	r0, r2
 8008504:	d101      	bne.n	800850a <__aeabi_fadd+0x192>
 8008506:	000c      	movs	r4, r1
 8008508:	0003      	movs	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0db      	beq.n	80084c6 <__aeabi_fadd+0x14e>
 800850e:	2080      	movs	r0, #128	; 0x80
 8008510:	03c0      	lsls	r0, r0, #15
 8008512:	4318      	orrs	r0, r3
 8008514:	0240      	lsls	r0, r0, #9
 8008516:	0a43      	lsrs	r3, r0, #9
 8008518:	469c      	mov	ip, r3
 800851a:	22ff      	movs	r2, #255	; 0xff
 800851c:	e771      	b.n	8008402 <__aeabi_fadd+0x8a>
 800851e:	2900      	cmp	r1, #0
 8008520:	d0d5      	beq.n	80084ce <__aeabi_fadd+0x156>
 8008522:	1b7a      	subs	r2, r7, r5
 8008524:	2d00      	cmp	r5, #0
 8008526:	d160      	bne.n	80085ea <__aeabi_fadd+0x272>
 8008528:	4643      	mov	r3, r8
 800852a:	2b00      	cmp	r3, #0
 800852c:	d024      	beq.n	8008578 <__aeabi_fadd+0x200>
 800852e:	1e53      	subs	r3, r2, #1
 8008530:	2a01      	cmp	r2, #1
 8008532:	d073      	beq.n	800861c <__aeabi_fadd+0x2a4>
 8008534:	2aff      	cmp	r2, #255	; 0xff
 8008536:	d0e7      	beq.n	8008508 <__aeabi_fadd+0x190>
 8008538:	001a      	movs	r2, r3
 800853a:	2a1b      	cmp	r2, #27
 800853c:	dc00      	bgt.n	8008540 <__aeabi_fadd+0x1c8>
 800853e:	e085      	b.n	800864c <__aeabi_fadd+0x2d4>
 8008540:	2001      	movs	r0, #1
 8008542:	003d      	movs	r5, r7
 8008544:	1980      	adds	r0, r0, r6
 8008546:	e785      	b.n	8008454 <__aeabi_fadd+0xdc>
 8008548:	2320      	movs	r3, #32
 800854a:	003a      	movs	r2, r7
 800854c:	1b45      	subs	r5, r0, r5
 800854e:	0038      	movs	r0, r7
 8008550:	3501      	adds	r5, #1
 8008552:	40ea      	lsrs	r2, r5
 8008554:	1b5d      	subs	r5, r3, r5
 8008556:	40a8      	lsls	r0, r5
 8008558:	1e43      	subs	r3, r0, #1
 800855a:	4198      	sbcs	r0, r3
 800855c:	2500      	movs	r5, #0
 800855e:	4310      	orrs	r0, r2
 8008560:	e73e      	b.n	80083e0 <__aeabi_fadd+0x68>
 8008562:	2320      	movs	r3, #32
 8008564:	0030      	movs	r0, r6
 8008566:	1a9b      	subs	r3, r3, r2
 8008568:	0031      	movs	r1, r6
 800856a:	4098      	lsls	r0, r3
 800856c:	40d1      	lsrs	r1, r2
 800856e:	1e43      	subs	r3, r0, #1
 8008570:	4198      	sbcs	r0, r3
 8008572:	4308      	orrs	r0, r1
 8008574:	e722      	b.n	80083bc <__aeabi_fadd+0x44>
 8008576:	000c      	movs	r4, r1
 8008578:	0003      	movs	r3, r0
 800857a:	0015      	movs	r5, r2
 800857c:	e7b4      	b.n	80084e8 <__aeabi_fadd+0x170>
 800857e:	2fff      	cmp	r7, #255	; 0xff
 8008580:	d0c1      	beq.n	8008506 <__aeabi_fadd+0x18e>
 8008582:	2380      	movs	r3, #128	; 0x80
 8008584:	4640      	mov	r0, r8
 8008586:	04db      	lsls	r3, r3, #19
 8008588:	4318      	orrs	r0, r3
 800858a:	4680      	mov	r8, r0
 800858c:	2a1b      	cmp	r2, #27
 800858e:	dd51      	ble.n	8008634 <__aeabi_fadd+0x2bc>
 8008590:	2001      	movs	r0, #1
 8008592:	000c      	movs	r4, r1
 8008594:	003d      	movs	r5, r7
 8008596:	1a30      	subs	r0, r6, r0
 8008598:	e712      	b.n	80083c0 <__aeabi_fadd+0x48>
 800859a:	4643      	mov	r3, r8
 800859c:	1b9f      	subs	r7, r3, r6
 800859e:	017b      	lsls	r3, r7, #5
 80085a0:	d42b      	bmi.n	80085fa <__aeabi_fadd+0x282>
 80085a2:	2f00      	cmp	r7, #0
 80085a4:	d000      	beq.n	80085a8 <__aeabi_fadd+0x230>
 80085a6:	e710      	b.n	80083ca <__aeabi_fadd+0x52>
 80085a8:	2300      	movs	r3, #0
 80085aa:	2400      	movs	r4, #0
 80085ac:	2200      	movs	r2, #0
 80085ae:	469c      	mov	ip, r3
 80085b0:	e727      	b.n	8008402 <__aeabi_fadd+0x8a>
 80085b2:	2320      	movs	r3, #32
 80085b4:	0032      	movs	r2, r6
 80085b6:	0030      	movs	r0, r6
 80085b8:	40ca      	lsrs	r2, r1
 80085ba:	1a59      	subs	r1, r3, r1
 80085bc:	4088      	lsls	r0, r1
 80085be:	1e43      	subs	r3, r0, #1
 80085c0:	4198      	sbcs	r0, r3
 80085c2:	4310      	orrs	r0, r2
 80085c4:	e745      	b.n	8008452 <__aeabi_fadd+0xda>
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	d14a      	bne.n	8008660 <__aeabi_fadd+0x2e8>
 80085ca:	4643      	mov	r3, r8
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d063      	beq.n	8008698 <__aeabi_fadd+0x320>
 80085d0:	2200      	movs	r2, #0
 80085d2:	2e00      	cmp	r6, #0
 80085d4:	d100      	bne.n	80085d8 <__aeabi_fadd+0x260>
 80085d6:	e714      	b.n	8008402 <__aeabi_fadd+0x8a>
 80085d8:	0030      	movs	r0, r6
 80085da:	4440      	add	r0, r8
 80085dc:	0143      	lsls	r3, r0, #5
 80085de:	d400      	bmi.n	80085e2 <__aeabi_fadd+0x26a>
 80085e0:	e77e      	b.n	80084e0 <__aeabi_fadd+0x168>
 80085e2:	4b32      	ldr	r3, [pc, #200]	; (80086ac <__aeabi_fadd+0x334>)
 80085e4:	3501      	adds	r5, #1
 80085e6:	4018      	ands	r0, r3
 80085e8:	e77a      	b.n	80084e0 <__aeabi_fadd+0x168>
 80085ea:	2fff      	cmp	r7, #255	; 0xff
 80085ec:	d08c      	beq.n	8008508 <__aeabi_fadd+0x190>
 80085ee:	2380      	movs	r3, #128	; 0x80
 80085f0:	4641      	mov	r1, r8
 80085f2:	04db      	lsls	r3, r3, #19
 80085f4:	4319      	orrs	r1, r3
 80085f6:	4688      	mov	r8, r1
 80085f8:	e79f      	b.n	800853a <__aeabi_fadd+0x1c2>
 80085fa:	4643      	mov	r3, r8
 80085fc:	000c      	movs	r4, r1
 80085fe:	1af7      	subs	r7, r6, r3
 8008600:	e6e3      	b.n	80083ca <__aeabi_fadd+0x52>
 8008602:	4642      	mov	r2, r8
 8008604:	2a00      	cmp	r2, #0
 8008606:	d000      	beq.n	800860a <__aeabi_fadd+0x292>
 8008608:	e775      	b.n	80084f6 <__aeabi_fadd+0x17e>
 800860a:	2e00      	cmp	r6, #0
 800860c:	d000      	beq.n	8008610 <__aeabi_fadd+0x298>
 800860e:	e77a      	b.n	8008506 <__aeabi_fadd+0x18e>
 8008610:	2380      	movs	r3, #128	; 0x80
 8008612:	03db      	lsls	r3, r3, #15
 8008614:	2400      	movs	r4, #0
 8008616:	469c      	mov	ip, r3
 8008618:	22ff      	movs	r2, #255	; 0xff
 800861a:	e6f2      	b.n	8008402 <__aeabi_fadd+0x8a>
 800861c:	0030      	movs	r0, r6
 800861e:	4440      	add	r0, r8
 8008620:	2501      	movs	r5, #1
 8008622:	0143      	lsls	r3, r0, #5
 8008624:	d400      	bmi.n	8008628 <__aeabi_fadd+0x2b0>
 8008626:	e75b      	b.n	80084e0 <__aeabi_fadd+0x168>
 8008628:	2502      	movs	r5, #2
 800862a:	e718      	b.n	800845e <__aeabi_fadd+0xe6>
 800862c:	4643      	mov	r3, r8
 800862e:	2501      	movs	r5, #1
 8008630:	1b98      	subs	r0, r3, r6
 8008632:	e6c5      	b.n	80083c0 <__aeabi_fadd+0x48>
 8008634:	2320      	movs	r3, #32
 8008636:	4644      	mov	r4, r8
 8008638:	4640      	mov	r0, r8
 800863a:	40d4      	lsrs	r4, r2
 800863c:	1a9a      	subs	r2, r3, r2
 800863e:	4090      	lsls	r0, r2
 8008640:	1e43      	subs	r3, r0, #1
 8008642:	4198      	sbcs	r0, r3
 8008644:	4320      	orrs	r0, r4
 8008646:	e7a4      	b.n	8008592 <__aeabi_fadd+0x21a>
 8008648:	000d      	movs	r5, r1
 800864a:	e74d      	b.n	80084e8 <__aeabi_fadd+0x170>
 800864c:	2320      	movs	r3, #32
 800864e:	4641      	mov	r1, r8
 8008650:	4640      	mov	r0, r8
 8008652:	40d1      	lsrs	r1, r2
 8008654:	1a9a      	subs	r2, r3, r2
 8008656:	4090      	lsls	r0, r2
 8008658:	1e43      	subs	r3, r0, #1
 800865a:	4198      	sbcs	r0, r3
 800865c:	4308      	orrs	r0, r1
 800865e:	e770      	b.n	8008542 <__aeabi_fadd+0x1ca>
 8008660:	4642      	mov	r2, r8
 8008662:	2a00      	cmp	r2, #0
 8008664:	d100      	bne.n	8008668 <__aeabi_fadd+0x2f0>
 8008666:	e74f      	b.n	8008508 <__aeabi_fadd+0x190>
 8008668:	2e00      	cmp	r6, #0
 800866a:	d100      	bne.n	800866e <__aeabi_fadd+0x2f6>
 800866c:	e74d      	b.n	800850a <__aeabi_fadd+0x192>
 800866e:	2280      	movs	r2, #128	; 0x80
 8008670:	03d2      	lsls	r2, r2, #15
 8008672:	4213      	tst	r3, r2
 8008674:	d100      	bne.n	8008678 <__aeabi_fadd+0x300>
 8008676:	e748      	b.n	800850a <__aeabi_fadd+0x192>
 8008678:	4210      	tst	r0, r2
 800867a:	d000      	beq.n	800867e <__aeabi_fadd+0x306>
 800867c:	e745      	b.n	800850a <__aeabi_fadd+0x192>
 800867e:	0003      	movs	r3, r0
 8008680:	e743      	b.n	800850a <__aeabi_fadd+0x192>
 8008682:	2e00      	cmp	r6, #0
 8008684:	d090      	beq.n	80085a8 <__aeabi_fadd+0x230>
 8008686:	000c      	movs	r4, r1
 8008688:	4684      	mov	ip, r0
 800868a:	2200      	movs	r2, #0
 800868c:	e6b9      	b.n	8008402 <__aeabi_fadd+0x8a>
 800868e:	4643      	mov	r3, r8
 8008690:	000c      	movs	r4, r1
 8008692:	1af0      	subs	r0, r6, r3
 8008694:	3501      	adds	r5, #1
 8008696:	e693      	b.n	80083c0 <__aeabi_fadd+0x48>
 8008698:	4684      	mov	ip, r0
 800869a:	2200      	movs	r2, #0
 800869c:	e6b1      	b.n	8008402 <__aeabi_fadd+0x8a>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d000      	beq.n	80086a4 <__aeabi_fadd+0x32c>
 80086a2:	e71d      	b.n	80084e0 <__aeabi_fadd+0x168>
 80086a4:	2300      	movs	r3, #0
 80086a6:	2400      	movs	r4, #0
 80086a8:	469c      	mov	ip, r3
 80086aa:	e6aa      	b.n	8008402 <__aeabi_fadd+0x8a>
 80086ac:	fbffffff 	.word	0xfbffffff
 80086b0:	7dffffff 	.word	0x7dffffff

080086b4 <__aeabi_fdiv>:
 80086b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086b6:	464f      	mov	r7, r9
 80086b8:	4646      	mov	r6, r8
 80086ba:	46d6      	mov	lr, sl
 80086bc:	0245      	lsls	r5, r0, #9
 80086be:	b5c0      	push	{r6, r7, lr}
 80086c0:	0047      	lsls	r7, r0, #1
 80086c2:	1c0c      	adds	r4, r1, #0
 80086c4:	0a6d      	lsrs	r5, r5, #9
 80086c6:	0e3f      	lsrs	r7, r7, #24
 80086c8:	0fc6      	lsrs	r6, r0, #31
 80086ca:	2f00      	cmp	r7, #0
 80086cc:	d100      	bne.n	80086d0 <__aeabi_fdiv+0x1c>
 80086ce:	e070      	b.n	80087b2 <__aeabi_fdiv+0xfe>
 80086d0:	2fff      	cmp	r7, #255	; 0xff
 80086d2:	d100      	bne.n	80086d6 <__aeabi_fdiv+0x22>
 80086d4:	e075      	b.n	80087c2 <__aeabi_fdiv+0x10e>
 80086d6:	00eb      	lsls	r3, r5, #3
 80086d8:	2580      	movs	r5, #128	; 0x80
 80086da:	04ed      	lsls	r5, r5, #19
 80086dc:	431d      	orrs	r5, r3
 80086de:	2300      	movs	r3, #0
 80086e0:	4699      	mov	r9, r3
 80086e2:	469a      	mov	sl, r3
 80086e4:	3f7f      	subs	r7, #127	; 0x7f
 80086e6:	0260      	lsls	r0, r4, #9
 80086e8:	0a43      	lsrs	r3, r0, #9
 80086ea:	4698      	mov	r8, r3
 80086ec:	0063      	lsls	r3, r4, #1
 80086ee:	0e1b      	lsrs	r3, r3, #24
 80086f0:	0fe4      	lsrs	r4, r4, #31
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d04e      	beq.n	8008794 <__aeabi_fdiv+0xe0>
 80086f6:	2bff      	cmp	r3, #255	; 0xff
 80086f8:	d046      	beq.n	8008788 <__aeabi_fdiv+0xd4>
 80086fa:	4642      	mov	r2, r8
 80086fc:	00d0      	lsls	r0, r2, #3
 80086fe:	2280      	movs	r2, #128	; 0x80
 8008700:	04d2      	lsls	r2, r2, #19
 8008702:	4302      	orrs	r2, r0
 8008704:	4690      	mov	r8, r2
 8008706:	2200      	movs	r2, #0
 8008708:	3b7f      	subs	r3, #127	; 0x7f
 800870a:	0031      	movs	r1, r6
 800870c:	1aff      	subs	r7, r7, r3
 800870e:	464b      	mov	r3, r9
 8008710:	4061      	eors	r1, r4
 8008712:	b2c9      	uxtb	r1, r1
 8008714:	4313      	orrs	r3, r2
 8008716:	2b0f      	cmp	r3, #15
 8008718:	d900      	bls.n	800871c <__aeabi_fdiv+0x68>
 800871a:	e0b5      	b.n	8008888 <__aeabi_fdiv+0x1d4>
 800871c:	486e      	ldr	r0, [pc, #440]	; (80088d8 <__aeabi_fdiv+0x224>)
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	58c3      	ldr	r3, [r0, r3]
 8008722:	469f      	mov	pc, r3
 8008724:	2300      	movs	r3, #0
 8008726:	4698      	mov	r8, r3
 8008728:	0026      	movs	r6, r4
 800872a:	4645      	mov	r5, r8
 800872c:	4692      	mov	sl, r2
 800872e:	4653      	mov	r3, sl
 8008730:	2b02      	cmp	r3, #2
 8008732:	d100      	bne.n	8008736 <__aeabi_fdiv+0x82>
 8008734:	e089      	b.n	800884a <__aeabi_fdiv+0x196>
 8008736:	2b03      	cmp	r3, #3
 8008738:	d100      	bne.n	800873c <__aeabi_fdiv+0x88>
 800873a:	e09e      	b.n	800887a <__aeabi_fdiv+0x1c6>
 800873c:	2b01      	cmp	r3, #1
 800873e:	d018      	beq.n	8008772 <__aeabi_fdiv+0xbe>
 8008740:	003b      	movs	r3, r7
 8008742:	337f      	adds	r3, #127	; 0x7f
 8008744:	2b00      	cmp	r3, #0
 8008746:	dd69      	ble.n	800881c <__aeabi_fdiv+0x168>
 8008748:	076a      	lsls	r2, r5, #29
 800874a:	d004      	beq.n	8008756 <__aeabi_fdiv+0xa2>
 800874c:	220f      	movs	r2, #15
 800874e:	402a      	ands	r2, r5
 8008750:	2a04      	cmp	r2, #4
 8008752:	d000      	beq.n	8008756 <__aeabi_fdiv+0xa2>
 8008754:	3504      	adds	r5, #4
 8008756:	012a      	lsls	r2, r5, #4
 8008758:	d503      	bpl.n	8008762 <__aeabi_fdiv+0xae>
 800875a:	4b60      	ldr	r3, [pc, #384]	; (80088dc <__aeabi_fdiv+0x228>)
 800875c:	401d      	ands	r5, r3
 800875e:	003b      	movs	r3, r7
 8008760:	3380      	adds	r3, #128	; 0x80
 8008762:	2bfe      	cmp	r3, #254	; 0xfe
 8008764:	dd00      	ble.n	8008768 <__aeabi_fdiv+0xb4>
 8008766:	e070      	b.n	800884a <__aeabi_fdiv+0x196>
 8008768:	01ad      	lsls	r5, r5, #6
 800876a:	0a6d      	lsrs	r5, r5, #9
 800876c:	b2d8      	uxtb	r0, r3
 800876e:	e002      	b.n	8008776 <__aeabi_fdiv+0xc2>
 8008770:	000e      	movs	r6, r1
 8008772:	2000      	movs	r0, #0
 8008774:	2500      	movs	r5, #0
 8008776:	05c0      	lsls	r0, r0, #23
 8008778:	4328      	orrs	r0, r5
 800877a:	07f6      	lsls	r6, r6, #31
 800877c:	4330      	orrs	r0, r6
 800877e:	bce0      	pop	{r5, r6, r7}
 8008780:	46ba      	mov	sl, r7
 8008782:	46b1      	mov	r9, r6
 8008784:	46a8      	mov	r8, r5
 8008786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008788:	4643      	mov	r3, r8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d13f      	bne.n	800880e <__aeabi_fdiv+0x15a>
 800878e:	2202      	movs	r2, #2
 8008790:	3fff      	subs	r7, #255	; 0xff
 8008792:	e003      	b.n	800879c <__aeabi_fdiv+0xe8>
 8008794:	4643      	mov	r3, r8
 8008796:	2b00      	cmp	r3, #0
 8008798:	d12d      	bne.n	80087f6 <__aeabi_fdiv+0x142>
 800879a:	2201      	movs	r2, #1
 800879c:	0031      	movs	r1, r6
 800879e:	464b      	mov	r3, r9
 80087a0:	4061      	eors	r1, r4
 80087a2:	b2c9      	uxtb	r1, r1
 80087a4:	4313      	orrs	r3, r2
 80087a6:	2b0f      	cmp	r3, #15
 80087a8:	d834      	bhi.n	8008814 <__aeabi_fdiv+0x160>
 80087aa:	484d      	ldr	r0, [pc, #308]	; (80088e0 <__aeabi_fdiv+0x22c>)
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	58c3      	ldr	r3, [r0, r3]
 80087b0:	469f      	mov	pc, r3
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	d113      	bne.n	80087de <__aeabi_fdiv+0x12a>
 80087b6:	2304      	movs	r3, #4
 80087b8:	4699      	mov	r9, r3
 80087ba:	3b03      	subs	r3, #3
 80087bc:	2700      	movs	r7, #0
 80087be:	469a      	mov	sl, r3
 80087c0:	e791      	b.n	80086e6 <__aeabi_fdiv+0x32>
 80087c2:	2d00      	cmp	r5, #0
 80087c4:	d105      	bne.n	80087d2 <__aeabi_fdiv+0x11e>
 80087c6:	2308      	movs	r3, #8
 80087c8:	4699      	mov	r9, r3
 80087ca:	3b06      	subs	r3, #6
 80087cc:	27ff      	movs	r7, #255	; 0xff
 80087ce:	469a      	mov	sl, r3
 80087d0:	e789      	b.n	80086e6 <__aeabi_fdiv+0x32>
 80087d2:	230c      	movs	r3, #12
 80087d4:	4699      	mov	r9, r3
 80087d6:	3b09      	subs	r3, #9
 80087d8:	27ff      	movs	r7, #255	; 0xff
 80087da:	469a      	mov	sl, r3
 80087dc:	e783      	b.n	80086e6 <__aeabi_fdiv+0x32>
 80087de:	0028      	movs	r0, r5
 80087e0:	f002 fb22 	bl	800ae28 <__clzsi2>
 80087e4:	2776      	movs	r7, #118	; 0x76
 80087e6:	1f43      	subs	r3, r0, #5
 80087e8:	409d      	lsls	r5, r3
 80087ea:	2300      	movs	r3, #0
 80087ec:	427f      	negs	r7, r7
 80087ee:	4699      	mov	r9, r3
 80087f0:	469a      	mov	sl, r3
 80087f2:	1a3f      	subs	r7, r7, r0
 80087f4:	e777      	b.n	80086e6 <__aeabi_fdiv+0x32>
 80087f6:	4640      	mov	r0, r8
 80087f8:	f002 fb16 	bl	800ae28 <__clzsi2>
 80087fc:	4642      	mov	r2, r8
 80087fe:	1f43      	subs	r3, r0, #5
 8008800:	409a      	lsls	r2, r3
 8008802:	2376      	movs	r3, #118	; 0x76
 8008804:	425b      	negs	r3, r3
 8008806:	4690      	mov	r8, r2
 8008808:	1a1b      	subs	r3, r3, r0
 800880a:	2200      	movs	r2, #0
 800880c:	e77d      	b.n	800870a <__aeabi_fdiv+0x56>
 800880e:	23ff      	movs	r3, #255	; 0xff
 8008810:	2203      	movs	r2, #3
 8008812:	e77a      	b.n	800870a <__aeabi_fdiv+0x56>
 8008814:	000e      	movs	r6, r1
 8008816:	20ff      	movs	r0, #255	; 0xff
 8008818:	2500      	movs	r5, #0
 800881a:	e7ac      	b.n	8008776 <__aeabi_fdiv+0xc2>
 800881c:	2001      	movs	r0, #1
 800881e:	1ac0      	subs	r0, r0, r3
 8008820:	281b      	cmp	r0, #27
 8008822:	dca6      	bgt.n	8008772 <__aeabi_fdiv+0xbe>
 8008824:	379e      	adds	r7, #158	; 0x9e
 8008826:	002a      	movs	r2, r5
 8008828:	40bd      	lsls	r5, r7
 800882a:	40c2      	lsrs	r2, r0
 800882c:	1e6b      	subs	r3, r5, #1
 800882e:	419d      	sbcs	r5, r3
 8008830:	4315      	orrs	r5, r2
 8008832:	076b      	lsls	r3, r5, #29
 8008834:	d004      	beq.n	8008840 <__aeabi_fdiv+0x18c>
 8008836:	230f      	movs	r3, #15
 8008838:	402b      	ands	r3, r5
 800883a:	2b04      	cmp	r3, #4
 800883c:	d000      	beq.n	8008840 <__aeabi_fdiv+0x18c>
 800883e:	3504      	adds	r5, #4
 8008840:	016b      	lsls	r3, r5, #5
 8008842:	d544      	bpl.n	80088ce <__aeabi_fdiv+0x21a>
 8008844:	2001      	movs	r0, #1
 8008846:	2500      	movs	r5, #0
 8008848:	e795      	b.n	8008776 <__aeabi_fdiv+0xc2>
 800884a:	20ff      	movs	r0, #255	; 0xff
 800884c:	2500      	movs	r5, #0
 800884e:	e792      	b.n	8008776 <__aeabi_fdiv+0xc2>
 8008850:	2580      	movs	r5, #128	; 0x80
 8008852:	2600      	movs	r6, #0
 8008854:	20ff      	movs	r0, #255	; 0xff
 8008856:	03ed      	lsls	r5, r5, #15
 8008858:	e78d      	b.n	8008776 <__aeabi_fdiv+0xc2>
 800885a:	2300      	movs	r3, #0
 800885c:	4698      	mov	r8, r3
 800885e:	2080      	movs	r0, #128	; 0x80
 8008860:	03c0      	lsls	r0, r0, #15
 8008862:	4205      	tst	r5, r0
 8008864:	d009      	beq.n	800887a <__aeabi_fdiv+0x1c6>
 8008866:	4643      	mov	r3, r8
 8008868:	4203      	tst	r3, r0
 800886a:	d106      	bne.n	800887a <__aeabi_fdiv+0x1c6>
 800886c:	4645      	mov	r5, r8
 800886e:	4305      	orrs	r5, r0
 8008870:	026d      	lsls	r5, r5, #9
 8008872:	0026      	movs	r6, r4
 8008874:	20ff      	movs	r0, #255	; 0xff
 8008876:	0a6d      	lsrs	r5, r5, #9
 8008878:	e77d      	b.n	8008776 <__aeabi_fdiv+0xc2>
 800887a:	2080      	movs	r0, #128	; 0x80
 800887c:	03c0      	lsls	r0, r0, #15
 800887e:	4305      	orrs	r5, r0
 8008880:	026d      	lsls	r5, r5, #9
 8008882:	20ff      	movs	r0, #255	; 0xff
 8008884:	0a6d      	lsrs	r5, r5, #9
 8008886:	e776      	b.n	8008776 <__aeabi_fdiv+0xc2>
 8008888:	4642      	mov	r2, r8
 800888a:	016b      	lsls	r3, r5, #5
 800888c:	0150      	lsls	r0, r2, #5
 800888e:	4283      	cmp	r3, r0
 8008890:	d219      	bcs.n	80088c6 <__aeabi_fdiv+0x212>
 8008892:	221b      	movs	r2, #27
 8008894:	2500      	movs	r5, #0
 8008896:	3f01      	subs	r7, #1
 8008898:	2601      	movs	r6, #1
 800889a:	001c      	movs	r4, r3
 800889c:	006d      	lsls	r5, r5, #1
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	2c00      	cmp	r4, #0
 80088a2:	db01      	blt.n	80088a8 <__aeabi_fdiv+0x1f4>
 80088a4:	4298      	cmp	r0, r3
 80088a6:	d801      	bhi.n	80088ac <__aeabi_fdiv+0x1f8>
 80088a8:	1a1b      	subs	r3, r3, r0
 80088aa:	4335      	orrs	r5, r6
 80088ac:	3a01      	subs	r2, #1
 80088ae:	2a00      	cmp	r2, #0
 80088b0:	d1f3      	bne.n	800889a <__aeabi_fdiv+0x1e6>
 80088b2:	1e5a      	subs	r2, r3, #1
 80088b4:	4193      	sbcs	r3, r2
 80088b6:	431d      	orrs	r5, r3
 80088b8:	003b      	movs	r3, r7
 80088ba:	337f      	adds	r3, #127	; 0x7f
 80088bc:	000e      	movs	r6, r1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	dd00      	ble.n	80088c4 <__aeabi_fdiv+0x210>
 80088c2:	e741      	b.n	8008748 <__aeabi_fdiv+0x94>
 80088c4:	e7aa      	b.n	800881c <__aeabi_fdiv+0x168>
 80088c6:	221a      	movs	r2, #26
 80088c8:	2501      	movs	r5, #1
 80088ca:	1a1b      	subs	r3, r3, r0
 80088cc:	e7e4      	b.n	8008898 <__aeabi_fdiv+0x1e4>
 80088ce:	01ad      	lsls	r5, r5, #6
 80088d0:	2000      	movs	r0, #0
 80088d2:	0a6d      	lsrs	r5, r5, #9
 80088d4:	e74f      	b.n	8008776 <__aeabi_fdiv+0xc2>
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	08010d98 	.word	0x08010d98
 80088dc:	f7ffffff 	.word	0xf7ffffff
 80088e0:	08010dd8 	.word	0x08010dd8

080088e4 <__eqsf2>:
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	0042      	lsls	r2, r0, #1
 80088e8:	0245      	lsls	r5, r0, #9
 80088ea:	024e      	lsls	r6, r1, #9
 80088ec:	004c      	lsls	r4, r1, #1
 80088ee:	0fc3      	lsrs	r3, r0, #31
 80088f0:	0a6d      	lsrs	r5, r5, #9
 80088f2:	2001      	movs	r0, #1
 80088f4:	0e12      	lsrs	r2, r2, #24
 80088f6:	0a76      	lsrs	r6, r6, #9
 80088f8:	0e24      	lsrs	r4, r4, #24
 80088fa:	0fc9      	lsrs	r1, r1, #31
 80088fc:	2aff      	cmp	r2, #255	; 0xff
 80088fe:	d006      	beq.n	800890e <__eqsf2+0x2a>
 8008900:	2cff      	cmp	r4, #255	; 0xff
 8008902:	d003      	beq.n	800890c <__eqsf2+0x28>
 8008904:	42a2      	cmp	r2, r4
 8008906:	d101      	bne.n	800890c <__eqsf2+0x28>
 8008908:	42b5      	cmp	r5, r6
 800890a:	d006      	beq.n	800891a <__eqsf2+0x36>
 800890c:	bd70      	pop	{r4, r5, r6, pc}
 800890e:	2d00      	cmp	r5, #0
 8008910:	d1fc      	bne.n	800890c <__eqsf2+0x28>
 8008912:	2cff      	cmp	r4, #255	; 0xff
 8008914:	d1fa      	bne.n	800890c <__eqsf2+0x28>
 8008916:	2e00      	cmp	r6, #0
 8008918:	d1f8      	bne.n	800890c <__eqsf2+0x28>
 800891a:	428b      	cmp	r3, r1
 800891c:	d006      	beq.n	800892c <__eqsf2+0x48>
 800891e:	2001      	movs	r0, #1
 8008920:	2a00      	cmp	r2, #0
 8008922:	d1f3      	bne.n	800890c <__eqsf2+0x28>
 8008924:	0028      	movs	r0, r5
 8008926:	1e43      	subs	r3, r0, #1
 8008928:	4198      	sbcs	r0, r3
 800892a:	e7ef      	b.n	800890c <__eqsf2+0x28>
 800892c:	2000      	movs	r0, #0
 800892e:	e7ed      	b.n	800890c <__eqsf2+0x28>

08008930 <__gesf2>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	0042      	lsls	r2, r0, #1
 8008934:	0245      	lsls	r5, r0, #9
 8008936:	024e      	lsls	r6, r1, #9
 8008938:	004c      	lsls	r4, r1, #1
 800893a:	0fc3      	lsrs	r3, r0, #31
 800893c:	0a6d      	lsrs	r5, r5, #9
 800893e:	0e12      	lsrs	r2, r2, #24
 8008940:	0a76      	lsrs	r6, r6, #9
 8008942:	0e24      	lsrs	r4, r4, #24
 8008944:	0fc8      	lsrs	r0, r1, #31
 8008946:	2aff      	cmp	r2, #255	; 0xff
 8008948:	d01b      	beq.n	8008982 <__gesf2+0x52>
 800894a:	2cff      	cmp	r4, #255	; 0xff
 800894c:	d00e      	beq.n	800896c <__gesf2+0x3c>
 800894e:	2a00      	cmp	r2, #0
 8008950:	d11b      	bne.n	800898a <__gesf2+0x5a>
 8008952:	2c00      	cmp	r4, #0
 8008954:	d101      	bne.n	800895a <__gesf2+0x2a>
 8008956:	2e00      	cmp	r6, #0
 8008958:	d01c      	beq.n	8008994 <__gesf2+0x64>
 800895a:	2d00      	cmp	r5, #0
 800895c:	d00c      	beq.n	8008978 <__gesf2+0x48>
 800895e:	4283      	cmp	r3, r0
 8008960:	d01c      	beq.n	800899c <__gesf2+0x6c>
 8008962:	2102      	movs	r1, #2
 8008964:	1e58      	subs	r0, r3, #1
 8008966:	4008      	ands	r0, r1
 8008968:	3801      	subs	r0, #1
 800896a:	bd70      	pop	{r4, r5, r6, pc}
 800896c:	2e00      	cmp	r6, #0
 800896e:	d122      	bne.n	80089b6 <__gesf2+0x86>
 8008970:	2a00      	cmp	r2, #0
 8008972:	d1f4      	bne.n	800895e <__gesf2+0x2e>
 8008974:	2d00      	cmp	r5, #0
 8008976:	d1f2      	bne.n	800895e <__gesf2+0x2e>
 8008978:	2800      	cmp	r0, #0
 800897a:	d1f6      	bne.n	800896a <__gesf2+0x3a>
 800897c:	2001      	movs	r0, #1
 800897e:	4240      	negs	r0, r0
 8008980:	e7f3      	b.n	800896a <__gesf2+0x3a>
 8008982:	2d00      	cmp	r5, #0
 8008984:	d117      	bne.n	80089b6 <__gesf2+0x86>
 8008986:	2cff      	cmp	r4, #255	; 0xff
 8008988:	d0f0      	beq.n	800896c <__gesf2+0x3c>
 800898a:	2c00      	cmp	r4, #0
 800898c:	d1e7      	bne.n	800895e <__gesf2+0x2e>
 800898e:	2e00      	cmp	r6, #0
 8008990:	d1e5      	bne.n	800895e <__gesf2+0x2e>
 8008992:	e7e6      	b.n	8008962 <__gesf2+0x32>
 8008994:	2000      	movs	r0, #0
 8008996:	2d00      	cmp	r5, #0
 8008998:	d0e7      	beq.n	800896a <__gesf2+0x3a>
 800899a:	e7e2      	b.n	8008962 <__gesf2+0x32>
 800899c:	42a2      	cmp	r2, r4
 800899e:	dc05      	bgt.n	80089ac <__gesf2+0x7c>
 80089a0:	dbea      	blt.n	8008978 <__gesf2+0x48>
 80089a2:	42b5      	cmp	r5, r6
 80089a4:	d802      	bhi.n	80089ac <__gesf2+0x7c>
 80089a6:	d3e7      	bcc.n	8008978 <__gesf2+0x48>
 80089a8:	2000      	movs	r0, #0
 80089aa:	e7de      	b.n	800896a <__gesf2+0x3a>
 80089ac:	4243      	negs	r3, r0
 80089ae:	4158      	adcs	r0, r3
 80089b0:	0040      	lsls	r0, r0, #1
 80089b2:	3801      	subs	r0, #1
 80089b4:	e7d9      	b.n	800896a <__gesf2+0x3a>
 80089b6:	2002      	movs	r0, #2
 80089b8:	4240      	negs	r0, r0
 80089ba:	e7d6      	b.n	800896a <__gesf2+0x3a>

080089bc <__lesf2>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	0042      	lsls	r2, r0, #1
 80089c0:	0245      	lsls	r5, r0, #9
 80089c2:	024e      	lsls	r6, r1, #9
 80089c4:	004c      	lsls	r4, r1, #1
 80089c6:	0fc3      	lsrs	r3, r0, #31
 80089c8:	0a6d      	lsrs	r5, r5, #9
 80089ca:	0e12      	lsrs	r2, r2, #24
 80089cc:	0a76      	lsrs	r6, r6, #9
 80089ce:	0e24      	lsrs	r4, r4, #24
 80089d0:	0fc8      	lsrs	r0, r1, #31
 80089d2:	2aff      	cmp	r2, #255	; 0xff
 80089d4:	d00b      	beq.n	80089ee <__lesf2+0x32>
 80089d6:	2cff      	cmp	r4, #255	; 0xff
 80089d8:	d00d      	beq.n	80089f6 <__lesf2+0x3a>
 80089da:	2a00      	cmp	r2, #0
 80089dc:	d11f      	bne.n	8008a1e <__lesf2+0x62>
 80089de:	2c00      	cmp	r4, #0
 80089e0:	d116      	bne.n	8008a10 <__lesf2+0x54>
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	d114      	bne.n	8008a10 <__lesf2+0x54>
 80089e6:	2000      	movs	r0, #0
 80089e8:	2d00      	cmp	r5, #0
 80089ea:	d010      	beq.n	8008a0e <__lesf2+0x52>
 80089ec:	e009      	b.n	8008a02 <__lesf2+0x46>
 80089ee:	2d00      	cmp	r5, #0
 80089f0:	d10c      	bne.n	8008a0c <__lesf2+0x50>
 80089f2:	2cff      	cmp	r4, #255	; 0xff
 80089f4:	d113      	bne.n	8008a1e <__lesf2+0x62>
 80089f6:	2e00      	cmp	r6, #0
 80089f8:	d108      	bne.n	8008a0c <__lesf2+0x50>
 80089fa:	2a00      	cmp	r2, #0
 80089fc:	d008      	beq.n	8008a10 <__lesf2+0x54>
 80089fe:	4283      	cmp	r3, r0
 8008a00:	d012      	beq.n	8008a28 <__lesf2+0x6c>
 8008a02:	2102      	movs	r1, #2
 8008a04:	1e58      	subs	r0, r3, #1
 8008a06:	4008      	ands	r0, r1
 8008a08:	3801      	subs	r0, #1
 8008a0a:	e000      	b.n	8008a0e <__lesf2+0x52>
 8008a0c:	2002      	movs	r0, #2
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
 8008a10:	2d00      	cmp	r5, #0
 8008a12:	d1f4      	bne.n	80089fe <__lesf2+0x42>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d1fa      	bne.n	8008a0e <__lesf2+0x52>
 8008a18:	2001      	movs	r0, #1
 8008a1a:	4240      	negs	r0, r0
 8008a1c:	e7f7      	b.n	8008a0e <__lesf2+0x52>
 8008a1e:	2c00      	cmp	r4, #0
 8008a20:	d1ed      	bne.n	80089fe <__lesf2+0x42>
 8008a22:	2e00      	cmp	r6, #0
 8008a24:	d1eb      	bne.n	80089fe <__lesf2+0x42>
 8008a26:	e7ec      	b.n	8008a02 <__lesf2+0x46>
 8008a28:	42a2      	cmp	r2, r4
 8008a2a:	dc05      	bgt.n	8008a38 <__lesf2+0x7c>
 8008a2c:	dbf2      	blt.n	8008a14 <__lesf2+0x58>
 8008a2e:	42b5      	cmp	r5, r6
 8008a30:	d802      	bhi.n	8008a38 <__lesf2+0x7c>
 8008a32:	d3ef      	bcc.n	8008a14 <__lesf2+0x58>
 8008a34:	2000      	movs	r0, #0
 8008a36:	e7ea      	b.n	8008a0e <__lesf2+0x52>
 8008a38:	4243      	negs	r3, r0
 8008a3a:	4158      	adcs	r0, r3
 8008a3c:	0040      	lsls	r0, r0, #1
 8008a3e:	3801      	subs	r0, #1
 8008a40:	e7e5      	b.n	8008a0e <__lesf2+0x52>
 8008a42:	46c0      	nop			; (mov r8, r8)

08008a44 <__aeabi_fmul>:
 8008a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a46:	464f      	mov	r7, r9
 8008a48:	4646      	mov	r6, r8
 8008a4a:	46d6      	mov	lr, sl
 8008a4c:	0244      	lsls	r4, r0, #9
 8008a4e:	0045      	lsls	r5, r0, #1
 8008a50:	b5c0      	push	{r6, r7, lr}
 8008a52:	0a64      	lsrs	r4, r4, #9
 8008a54:	1c0f      	adds	r7, r1, #0
 8008a56:	0e2d      	lsrs	r5, r5, #24
 8008a58:	0fc6      	lsrs	r6, r0, #31
 8008a5a:	2d00      	cmp	r5, #0
 8008a5c:	d100      	bne.n	8008a60 <__aeabi_fmul+0x1c>
 8008a5e:	e08d      	b.n	8008b7c <__aeabi_fmul+0x138>
 8008a60:	2dff      	cmp	r5, #255	; 0xff
 8008a62:	d100      	bne.n	8008a66 <__aeabi_fmul+0x22>
 8008a64:	e092      	b.n	8008b8c <__aeabi_fmul+0x148>
 8008a66:	2300      	movs	r3, #0
 8008a68:	2080      	movs	r0, #128	; 0x80
 8008a6a:	4699      	mov	r9, r3
 8008a6c:	469a      	mov	sl, r3
 8008a6e:	00e4      	lsls	r4, r4, #3
 8008a70:	04c0      	lsls	r0, r0, #19
 8008a72:	4304      	orrs	r4, r0
 8008a74:	3d7f      	subs	r5, #127	; 0x7f
 8008a76:	0278      	lsls	r0, r7, #9
 8008a78:	0a43      	lsrs	r3, r0, #9
 8008a7a:	4698      	mov	r8, r3
 8008a7c:	007b      	lsls	r3, r7, #1
 8008a7e:	0e1b      	lsrs	r3, r3, #24
 8008a80:	0fff      	lsrs	r7, r7, #31
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d100      	bne.n	8008a88 <__aeabi_fmul+0x44>
 8008a86:	e070      	b.n	8008b6a <__aeabi_fmul+0x126>
 8008a88:	2bff      	cmp	r3, #255	; 0xff
 8008a8a:	d100      	bne.n	8008a8e <__aeabi_fmul+0x4a>
 8008a8c:	e086      	b.n	8008b9c <__aeabi_fmul+0x158>
 8008a8e:	4642      	mov	r2, r8
 8008a90:	00d0      	lsls	r0, r2, #3
 8008a92:	2280      	movs	r2, #128	; 0x80
 8008a94:	3b7f      	subs	r3, #127	; 0x7f
 8008a96:	18ed      	adds	r5, r5, r3
 8008a98:	2300      	movs	r3, #0
 8008a9a:	04d2      	lsls	r2, r2, #19
 8008a9c:	4302      	orrs	r2, r0
 8008a9e:	4690      	mov	r8, r2
 8008aa0:	469c      	mov	ip, r3
 8008aa2:	0031      	movs	r1, r6
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	4079      	eors	r1, r7
 8008aa8:	1c68      	adds	r0, r5, #1
 8008aaa:	2b0f      	cmp	r3, #15
 8008aac:	d81c      	bhi.n	8008ae8 <__aeabi_fmul+0xa4>
 8008aae:	4a76      	ldr	r2, [pc, #472]	; (8008c88 <__aeabi_fmul+0x244>)
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	58d3      	ldr	r3, [r2, r3]
 8008ab4:	469f      	mov	pc, r3
 8008ab6:	0039      	movs	r1, r7
 8008ab8:	4644      	mov	r4, r8
 8008aba:	46e2      	mov	sl, ip
 8008abc:	4653      	mov	r3, sl
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d00f      	beq.n	8008ae2 <__aeabi_fmul+0x9e>
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d100      	bne.n	8008ac8 <__aeabi_fmul+0x84>
 8008ac6:	e0d7      	b.n	8008c78 <__aeabi_fmul+0x234>
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d137      	bne.n	8008b3c <__aeabi_fmul+0xf8>
 8008acc:	2000      	movs	r0, #0
 8008ace:	2400      	movs	r4, #0
 8008ad0:	05c0      	lsls	r0, r0, #23
 8008ad2:	4320      	orrs	r0, r4
 8008ad4:	07c9      	lsls	r1, r1, #31
 8008ad6:	4308      	orrs	r0, r1
 8008ad8:	bce0      	pop	{r5, r6, r7}
 8008ada:	46ba      	mov	sl, r7
 8008adc:	46b1      	mov	r9, r6
 8008ade:	46a8      	mov	r8, r5
 8008ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae2:	20ff      	movs	r0, #255	; 0xff
 8008ae4:	2400      	movs	r4, #0
 8008ae6:	e7f3      	b.n	8008ad0 <__aeabi_fmul+0x8c>
 8008ae8:	0c26      	lsrs	r6, r4, #16
 8008aea:	0424      	lsls	r4, r4, #16
 8008aec:	0c22      	lsrs	r2, r4, #16
 8008aee:	4644      	mov	r4, r8
 8008af0:	0424      	lsls	r4, r4, #16
 8008af2:	0c24      	lsrs	r4, r4, #16
 8008af4:	4643      	mov	r3, r8
 8008af6:	0027      	movs	r7, r4
 8008af8:	0c1b      	lsrs	r3, r3, #16
 8008afa:	4357      	muls	r7, r2
 8008afc:	4374      	muls	r4, r6
 8008afe:	435a      	muls	r2, r3
 8008b00:	435e      	muls	r6, r3
 8008b02:	1912      	adds	r2, r2, r4
 8008b04:	0c3b      	lsrs	r3, r7, #16
 8008b06:	189b      	adds	r3, r3, r2
 8008b08:	429c      	cmp	r4, r3
 8008b0a:	d903      	bls.n	8008b14 <__aeabi_fmul+0xd0>
 8008b0c:	2280      	movs	r2, #128	; 0x80
 8008b0e:	0252      	lsls	r2, r2, #9
 8008b10:	4694      	mov	ip, r2
 8008b12:	4466      	add	r6, ip
 8008b14:	043f      	lsls	r7, r7, #16
 8008b16:	041a      	lsls	r2, r3, #16
 8008b18:	0c3f      	lsrs	r7, r7, #16
 8008b1a:	19d2      	adds	r2, r2, r7
 8008b1c:	0194      	lsls	r4, r2, #6
 8008b1e:	1e67      	subs	r7, r4, #1
 8008b20:	41bc      	sbcs	r4, r7
 8008b22:	0c1b      	lsrs	r3, r3, #16
 8008b24:	0e92      	lsrs	r2, r2, #26
 8008b26:	199b      	adds	r3, r3, r6
 8008b28:	4314      	orrs	r4, r2
 8008b2a:	019b      	lsls	r3, r3, #6
 8008b2c:	431c      	orrs	r4, r3
 8008b2e:	011b      	lsls	r3, r3, #4
 8008b30:	d400      	bmi.n	8008b34 <__aeabi_fmul+0xf0>
 8008b32:	e09b      	b.n	8008c6c <__aeabi_fmul+0x228>
 8008b34:	2301      	movs	r3, #1
 8008b36:	0862      	lsrs	r2, r4, #1
 8008b38:	401c      	ands	r4, r3
 8008b3a:	4314      	orrs	r4, r2
 8008b3c:	0002      	movs	r2, r0
 8008b3e:	327f      	adds	r2, #127	; 0x7f
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	dd64      	ble.n	8008c0e <__aeabi_fmul+0x1ca>
 8008b44:	0763      	lsls	r3, r4, #29
 8008b46:	d004      	beq.n	8008b52 <__aeabi_fmul+0x10e>
 8008b48:	230f      	movs	r3, #15
 8008b4a:	4023      	ands	r3, r4
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	d000      	beq.n	8008b52 <__aeabi_fmul+0x10e>
 8008b50:	3404      	adds	r4, #4
 8008b52:	0123      	lsls	r3, r4, #4
 8008b54:	d503      	bpl.n	8008b5e <__aeabi_fmul+0x11a>
 8008b56:	0002      	movs	r2, r0
 8008b58:	4b4c      	ldr	r3, [pc, #304]	; (8008c8c <__aeabi_fmul+0x248>)
 8008b5a:	3280      	adds	r2, #128	; 0x80
 8008b5c:	401c      	ands	r4, r3
 8008b5e:	2afe      	cmp	r2, #254	; 0xfe
 8008b60:	dcbf      	bgt.n	8008ae2 <__aeabi_fmul+0x9e>
 8008b62:	01a4      	lsls	r4, r4, #6
 8008b64:	0a64      	lsrs	r4, r4, #9
 8008b66:	b2d0      	uxtb	r0, r2
 8008b68:	e7b2      	b.n	8008ad0 <__aeabi_fmul+0x8c>
 8008b6a:	4643      	mov	r3, r8
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d13d      	bne.n	8008bec <__aeabi_fmul+0x1a8>
 8008b70:	464a      	mov	r2, r9
 8008b72:	3301      	adds	r3, #1
 8008b74:	431a      	orrs	r2, r3
 8008b76:	4691      	mov	r9, r2
 8008b78:	469c      	mov	ip, r3
 8008b7a:	e792      	b.n	8008aa2 <__aeabi_fmul+0x5e>
 8008b7c:	2c00      	cmp	r4, #0
 8008b7e:	d129      	bne.n	8008bd4 <__aeabi_fmul+0x190>
 8008b80:	2304      	movs	r3, #4
 8008b82:	4699      	mov	r9, r3
 8008b84:	3b03      	subs	r3, #3
 8008b86:	2500      	movs	r5, #0
 8008b88:	469a      	mov	sl, r3
 8008b8a:	e774      	b.n	8008a76 <__aeabi_fmul+0x32>
 8008b8c:	2c00      	cmp	r4, #0
 8008b8e:	d11b      	bne.n	8008bc8 <__aeabi_fmul+0x184>
 8008b90:	2308      	movs	r3, #8
 8008b92:	4699      	mov	r9, r3
 8008b94:	3b06      	subs	r3, #6
 8008b96:	25ff      	movs	r5, #255	; 0xff
 8008b98:	469a      	mov	sl, r3
 8008b9a:	e76c      	b.n	8008a76 <__aeabi_fmul+0x32>
 8008b9c:	4643      	mov	r3, r8
 8008b9e:	35ff      	adds	r5, #255	; 0xff
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10b      	bne.n	8008bbc <__aeabi_fmul+0x178>
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	464a      	mov	r2, r9
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	4691      	mov	r9, r2
 8008bac:	469c      	mov	ip, r3
 8008bae:	e778      	b.n	8008aa2 <__aeabi_fmul+0x5e>
 8008bb0:	4653      	mov	r3, sl
 8008bb2:	0031      	movs	r1, r6
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d000      	beq.n	8008bba <__aeabi_fmul+0x176>
 8008bb8:	e783      	b.n	8008ac2 <__aeabi_fmul+0x7e>
 8008bba:	e792      	b.n	8008ae2 <__aeabi_fmul+0x9e>
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	464a      	mov	r2, r9
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	4691      	mov	r9, r2
 8008bc4:	469c      	mov	ip, r3
 8008bc6:	e76c      	b.n	8008aa2 <__aeabi_fmul+0x5e>
 8008bc8:	230c      	movs	r3, #12
 8008bca:	4699      	mov	r9, r3
 8008bcc:	3b09      	subs	r3, #9
 8008bce:	25ff      	movs	r5, #255	; 0xff
 8008bd0:	469a      	mov	sl, r3
 8008bd2:	e750      	b.n	8008a76 <__aeabi_fmul+0x32>
 8008bd4:	0020      	movs	r0, r4
 8008bd6:	f002 f927 	bl	800ae28 <__clzsi2>
 8008bda:	2576      	movs	r5, #118	; 0x76
 8008bdc:	1f43      	subs	r3, r0, #5
 8008bde:	409c      	lsls	r4, r3
 8008be0:	2300      	movs	r3, #0
 8008be2:	426d      	negs	r5, r5
 8008be4:	4699      	mov	r9, r3
 8008be6:	469a      	mov	sl, r3
 8008be8:	1a2d      	subs	r5, r5, r0
 8008bea:	e744      	b.n	8008a76 <__aeabi_fmul+0x32>
 8008bec:	4640      	mov	r0, r8
 8008bee:	f002 f91b 	bl	800ae28 <__clzsi2>
 8008bf2:	4642      	mov	r2, r8
 8008bf4:	1f43      	subs	r3, r0, #5
 8008bf6:	409a      	lsls	r2, r3
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	1a2d      	subs	r5, r5, r0
 8008bfc:	4690      	mov	r8, r2
 8008bfe:	469c      	mov	ip, r3
 8008c00:	3d76      	subs	r5, #118	; 0x76
 8008c02:	e74e      	b.n	8008aa2 <__aeabi_fmul+0x5e>
 8008c04:	2480      	movs	r4, #128	; 0x80
 8008c06:	2100      	movs	r1, #0
 8008c08:	20ff      	movs	r0, #255	; 0xff
 8008c0a:	03e4      	lsls	r4, r4, #15
 8008c0c:	e760      	b.n	8008ad0 <__aeabi_fmul+0x8c>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	1a9b      	subs	r3, r3, r2
 8008c12:	2b1b      	cmp	r3, #27
 8008c14:	dd00      	ble.n	8008c18 <__aeabi_fmul+0x1d4>
 8008c16:	e759      	b.n	8008acc <__aeabi_fmul+0x88>
 8008c18:	0022      	movs	r2, r4
 8008c1a:	309e      	adds	r0, #158	; 0x9e
 8008c1c:	40da      	lsrs	r2, r3
 8008c1e:	4084      	lsls	r4, r0
 8008c20:	0013      	movs	r3, r2
 8008c22:	1e62      	subs	r2, r4, #1
 8008c24:	4194      	sbcs	r4, r2
 8008c26:	431c      	orrs	r4, r3
 8008c28:	0763      	lsls	r3, r4, #29
 8008c2a:	d004      	beq.n	8008c36 <__aeabi_fmul+0x1f2>
 8008c2c:	230f      	movs	r3, #15
 8008c2e:	4023      	ands	r3, r4
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d000      	beq.n	8008c36 <__aeabi_fmul+0x1f2>
 8008c34:	3404      	adds	r4, #4
 8008c36:	0163      	lsls	r3, r4, #5
 8008c38:	d51a      	bpl.n	8008c70 <__aeabi_fmul+0x22c>
 8008c3a:	2001      	movs	r0, #1
 8008c3c:	2400      	movs	r4, #0
 8008c3e:	e747      	b.n	8008ad0 <__aeabi_fmul+0x8c>
 8008c40:	2080      	movs	r0, #128	; 0x80
 8008c42:	03c0      	lsls	r0, r0, #15
 8008c44:	4204      	tst	r4, r0
 8008c46:	d009      	beq.n	8008c5c <__aeabi_fmul+0x218>
 8008c48:	4643      	mov	r3, r8
 8008c4a:	4203      	tst	r3, r0
 8008c4c:	d106      	bne.n	8008c5c <__aeabi_fmul+0x218>
 8008c4e:	4644      	mov	r4, r8
 8008c50:	4304      	orrs	r4, r0
 8008c52:	0264      	lsls	r4, r4, #9
 8008c54:	0039      	movs	r1, r7
 8008c56:	20ff      	movs	r0, #255	; 0xff
 8008c58:	0a64      	lsrs	r4, r4, #9
 8008c5a:	e739      	b.n	8008ad0 <__aeabi_fmul+0x8c>
 8008c5c:	2080      	movs	r0, #128	; 0x80
 8008c5e:	03c0      	lsls	r0, r0, #15
 8008c60:	4304      	orrs	r4, r0
 8008c62:	0264      	lsls	r4, r4, #9
 8008c64:	0031      	movs	r1, r6
 8008c66:	20ff      	movs	r0, #255	; 0xff
 8008c68:	0a64      	lsrs	r4, r4, #9
 8008c6a:	e731      	b.n	8008ad0 <__aeabi_fmul+0x8c>
 8008c6c:	0028      	movs	r0, r5
 8008c6e:	e765      	b.n	8008b3c <__aeabi_fmul+0xf8>
 8008c70:	01a4      	lsls	r4, r4, #6
 8008c72:	2000      	movs	r0, #0
 8008c74:	0a64      	lsrs	r4, r4, #9
 8008c76:	e72b      	b.n	8008ad0 <__aeabi_fmul+0x8c>
 8008c78:	2080      	movs	r0, #128	; 0x80
 8008c7a:	03c0      	lsls	r0, r0, #15
 8008c7c:	4304      	orrs	r4, r0
 8008c7e:	0264      	lsls	r4, r4, #9
 8008c80:	20ff      	movs	r0, #255	; 0xff
 8008c82:	0a64      	lsrs	r4, r4, #9
 8008c84:	e724      	b.n	8008ad0 <__aeabi_fmul+0x8c>
 8008c86:	46c0      	nop			; (mov r8, r8)
 8008c88:	08010e18 	.word	0x08010e18
 8008c8c:	f7ffffff 	.word	0xf7ffffff

08008c90 <__aeabi_fsub>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	46ce      	mov	lr, r9
 8008c94:	4647      	mov	r7, r8
 8008c96:	0243      	lsls	r3, r0, #9
 8008c98:	0a5b      	lsrs	r3, r3, #9
 8008c9a:	024e      	lsls	r6, r1, #9
 8008c9c:	00da      	lsls	r2, r3, #3
 8008c9e:	4694      	mov	ip, r2
 8008ca0:	0a72      	lsrs	r2, r6, #9
 8008ca2:	4691      	mov	r9, r2
 8008ca4:	0045      	lsls	r5, r0, #1
 8008ca6:	004a      	lsls	r2, r1, #1
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	0e2d      	lsrs	r5, r5, #24
 8008cac:	001f      	movs	r7, r3
 8008cae:	0fc4      	lsrs	r4, r0, #31
 8008cb0:	0e12      	lsrs	r2, r2, #24
 8008cb2:	0fc9      	lsrs	r1, r1, #31
 8008cb4:	09b6      	lsrs	r6, r6, #6
 8008cb6:	2aff      	cmp	r2, #255	; 0xff
 8008cb8:	d05b      	beq.n	8008d72 <__aeabi_fsub+0xe2>
 8008cba:	2001      	movs	r0, #1
 8008cbc:	4041      	eors	r1, r0
 8008cbe:	428c      	cmp	r4, r1
 8008cc0:	d039      	beq.n	8008d36 <__aeabi_fsub+0xa6>
 8008cc2:	1aa8      	subs	r0, r5, r2
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	dd5a      	ble.n	8008d7e <__aeabi_fsub+0xee>
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	d06a      	beq.n	8008da2 <__aeabi_fsub+0x112>
 8008ccc:	2dff      	cmp	r5, #255	; 0xff
 8008cce:	d100      	bne.n	8008cd2 <__aeabi_fsub+0x42>
 8008cd0:	e0d9      	b.n	8008e86 <__aeabi_fsub+0x1f6>
 8008cd2:	2280      	movs	r2, #128	; 0x80
 8008cd4:	04d2      	lsls	r2, r2, #19
 8008cd6:	4316      	orrs	r6, r2
 8008cd8:	281b      	cmp	r0, #27
 8008cda:	dc00      	bgt.n	8008cde <__aeabi_fsub+0x4e>
 8008cdc:	e0e9      	b.n	8008eb2 <__aeabi_fsub+0x222>
 8008cde:	2001      	movs	r0, #1
 8008ce0:	4663      	mov	r3, ip
 8008ce2:	1a18      	subs	r0, r3, r0
 8008ce4:	0143      	lsls	r3, r0, #5
 8008ce6:	d400      	bmi.n	8008cea <__aeabi_fsub+0x5a>
 8008ce8:	e0b4      	b.n	8008e54 <__aeabi_fsub+0x1c4>
 8008cea:	0180      	lsls	r0, r0, #6
 8008cec:	0987      	lsrs	r7, r0, #6
 8008cee:	0038      	movs	r0, r7
 8008cf0:	f002 f89a 	bl	800ae28 <__clzsi2>
 8008cf4:	3805      	subs	r0, #5
 8008cf6:	4087      	lsls	r7, r0
 8008cf8:	4285      	cmp	r5, r0
 8008cfa:	dc00      	bgt.n	8008cfe <__aeabi_fsub+0x6e>
 8008cfc:	e0cc      	b.n	8008e98 <__aeabi_fsub+0x208>
 8008cfe:	1a2d      	subs	r5, r5, r0
 8008d00:	48b5      	ldr	r0, [pc, #724]	; (8008fd8 <__aeabi_fsub+0x348>)
 8008d02:	4038      	ands	r0, r7
 8008d04:	0743      	lsls	r3, r0, #29
 8008d06:	d004      	beq.n	8008d12 <__aeabi_fsub+0x82>
 8008d08:	230f      	movs	r3, #15
 8008d0a:	4003      	ands	r3, r0
 8008d0c:	2b04      	cmp	r3, #4
 8008d0e:	d000      	beq.n	8008d12 <__aeabi_fsub+0x82>
 8008d10:	3004      	adds	r0, #4
 8008d12:	0143      	lsls	r3, r0, #5
 8008d14:	d400      	bmi.n	8008d18 <__aeabi_fsub+0x88>
 8008d16:	e0a0      	b.n	8008e5a <__aeabi_fsub+0x1ca>
 8008d18:	1c6a      	adds	r2, r5, #1
 8008d1a:	2dfe      	cmp	r5, #254	; 0xfe
 8008d1c:	d100      	bne.n	8008d20 <__aeabi_fsub+0x90>
 8008d1e:	e08d      	b.n	8008e3c <__aeabi_fsub+0x1ac>
 8008d20:	0180      	lsls	r0, r0, #6
 8008d22:	0a47      	lsrs	r7, r0, #9
 8008d24:	b2d2      	uxtb	r2, r2
 8008d26:	05d0      	lsls	r0, r2, #23
 8008d28:	4338      	orrs	r0, r7
 8008d2a:	07e4      	lsls	r4, r4, #31
 8008d2c:	4320      	orrs	r0, r4
 8008d2e:	bcc0      	pop	{r6, r7}
 8008d30:	46b9      	mov	r9, r7
 8008d32:	46b0      	mov	r8, r6
 8008d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d36:	1aa8      	subs	r0, r5, r2
 8008d38:	4680      	mov	r8, r0
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	dd45      	ble.n	8008dca <__aeabi_fsub+0x13a>
 8008d3e:	2a00      	cmp	r2, #0
 8008d40:	d070      	beq.n	8008e24 <__aeabi_fsub+0x194>
 8008d42:	2dff      	cmp	r5, #255	; 0xff
 8008d44:	d100      	bne.n	8008d48 <__aeabi_fsub+0xb8>
 8008d46:	e09e      	b.n	8008e86 <__aeabi_fsub+0x1f6>
 8008d48:	2380      	movs	r3, #128	; 0x80
 8008d4a:	04db      	lsls	r3, r3, #19
 8008d4c:	431e      	orrs	r6, r3
 8008d4e:	4643      	mov	r3, r8
 8008d50:	2b1b      	cmp	r3, #27
 8008d52:	dc00      	bgt.n	8008d56 <__aeabi_fsub+0xc6>
 8008d54:	e0d2      	b.n	8008efc <__aeabi_fsub+0x26c>
 8008d56:	2001      	movs	r0, #1
 8008d58:	4460      	add	r0, ip
 8008d5a:	0143      	lsls	r3, r0, #5
 8008d5c:	d57a      	bpl.n	8008e54 <__aeabi_fsub+0x1c4>
 8008d5e:	3501      	adds	r5, #1
 8008d60:	2dff      	cmp	r5, #255	; 0xff
 8008d62:	d06b      	beq.n	8008e3c <__aeabi_fsub+0x1ac>
 8008d64:	2301      	movs	r3, #1
 8008d66:	4a9d      	ldr	r2, [pc, #628]	; (8008fdc <__aeabi_fsub+0x34c>)
 8008d68:	4003      	ands	r3, r0
 8008d6a:	0840      	lsrs	r0, r0, #1
 8008d6c:	4010      	ands	r0, r2
 8008d6e:	4318      	orrs	r0, r3
 8008d70:	e7c8      	b.n	8008d04 <__aeabi_fsub+0x74>
 8008d72:	2e00      	cmp	r6, #0
 8008d74:	d020      	beq.n	8008db8 <__aeabi_fsub+0x128>
 8008d76:	428c      	cmp	r4, r1
 8008d78:	d023      	beq.n	8008dc2 <__aeabi_fsub+0x132>
 8008d7a:	0028      	movs	r0, r5
 8008d7c:	38ff      	subs	r0, #255	; 0xff
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d039      	beq.n	8008df6 <__aeabi_fsub+0x166>
 8008d82:	1b57      	subs	r7, r2, r5
 8008d84:	2d00      	cmp	r5, #0
 8008d86:	d000      	beq.n	8008d8a <__aeabi_fsub+0xfa>
 8008d88:	e09d      	b.n	8008ec6 <__aeabi_fsub+0x236>
 8008d8a:	4663      	mov	r3, ip
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d100      	bne.n	8008d92 <__aeabi_fsub+0x102>
 8008d90:	e0db      	b.n	8008f4a <__aeabi_fsub+0x2ba>
 8008d92:	1e7b      	subs	r3, r7, #1
 8008d94:	2f01      	cmp	r7, #1
 8008d96:	d100      	bne.n	8008d9a <__aeabi_fsub+0x10a>
 8008d98:	e10d      	b.n	8008fb6 <__aeabi_fsub+0x326>
 8008d9a:	2fff      	cmp	r7, #255	; 0xff
 8008d9c:	d071      	beq.n	8008e82 <__aeabi_fsub+0x1f2>
 8008d9e:	001f      	movs	r7, r3
 8008da0:	e098      	b.n	8008ed4 <__aeabi_fsub+0x244>
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	d100      	bne.n	8008da8 <__aeabi_fsub+0x118>
 8008da6:	e0a7      	b.n	8008ef8 <__aeabi_fsub+0x268>
 8008da8:	1e42      	subs	r2, r0, #1
 8008daa:	2801      	cmp	r0, #1
 8008dac:	d100      	bne.n	8008db0 <__aeabi_fsub+0x120>
 8008dae:	e0e6      	b.n	8008f7e <__aeabi_fsub+0x2ee>
 8008db0:	28ff      	cmp	r0, #255	; 0xff
 8008db2:	d068      	beq.n	8008e86 <__aeabi_fsub+0x1f6>
 8008db4:	0010      	movs	r0, r2
 8008db6:	e78f      	b.n	8008cd8 <__aeabi_fsub+0x48>
 8008db8:	2001      	movs	r0, #1
 8008dba:	4041      	eors	r1, r0
 8008dbc:	42a1      	cmp	r1, r4
 8008dbe:	d000      	beq.n	8008dc2 <__aeabi_fsub+0x132>
 8008dc0:	e77f      	b.n	8008cc2 <__aeabi_fsub+0x32>
 8008dc2:	20ff      	movs	r0, #255	; 0xff
 8008dc4:	4240      	negs	r0, r0
 8008dc6:	4680      	mov	r8, r0
 8008dc8:	44a8      	add	r8, r5
 8008dca:	4640      	mov	r0, r8
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d038      	beq.n	8008e42 <__aeabi_fsub+0x1b2>
 8008dd0:	1b51      	subs	r1, r2, r5
 8008dd2:	2d00      	cmp	r5, #0
 8008dd4:	d100      	bne.n	8008dd8 <__aeabi_fsub+0x148>
 8008dd6:	e0ae      	b.n	8008f36 <__aeabi_fsub+0x2a6>
 8008dd8:	2aff      	cmp	r2, #255	; 0xff
 8008dda:	d100      	bne.n	8008dde <__aeabi_fsub+0x14e>
 8008ddc:	e0df      	b.n	8008f9e <__aeabi_fsub+0x30e>
 8008dde:	2380      	movs	r3, #128	; 0x80
 8008de0:	4660      	mov	r0, ip
 8008de2:	04db      	lsls	r3, r3, #19
 8008de4:	4318      	orrs	r0, r3
 8008de6:	4684      	mov	ip, r0
 8008de8:	291b      	cmp	r1, #27
 8008dea:	dc00      	bgt.n	8008dee <__aeabi_fsub+0x15e>
 8008dec:	e0d9      	b.n	8008fa2 <__aeabi_fsub+0x312>
 8008dee:	2001      	movs	r0, #1
 8008df0:	0015      	movs	r5, r2
 8008df2:	1980      	adds	r0, r0, r6
 8008df4:	e7b1      	b.n	8008d5a <__aeabi_fsub+0xca>
 8008df6:	20fe      	movs	r0, #254	; 0xfe
 8008df8:	1c6a      	adds	r2, r5, #1
 8008dfa:	4210      	tst	r0, r2
 8008dfc:	d171      	bne.n	8008ee2 <__aeabi_fsub+0x252>
 8008dfe:	2d00      	cmp	r5, #0
 8008e00:	d000      	beq.n	8008e04 <__aeabi_fsub+0x174>
 8008e02:	e0a6      	b.n	8008f52 <__aeabi_fsub+0x2c2>
 8008e04:	4663      	mov	r3, ip
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d100      	bne.n	8008e0c <__aeabi_fsub+0x17c>
 8008e0a:	e0d9      	b.n	8008fc0 <__aeabi_fsub+0x330>
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2e00      	cmp	r6, #0
 8008e10:	d100      	bne.n	8008e14 <__aeabi_fsub+0x184>
 8008e12:	e788      	b.n	8008d26 <__aeabi_fsub+0x96>
 8008e14:	1b98      	subs	r0, r3, r6
 8008e16:	0143      	lsls	r3, r0, #5
 8008e18:	d400      	bmi.n	8008e1c <__aeabi_fsub+0x18c>
 8008e1a:	e0e1      	b.n	8008fe0 <__aeabi_fsub+0x350>
 8008e1c:	4663      	mov	r3, ip
 8008e1e:	000c      	movs	r4, r1
 8008e20:	1af0      	subs	r0, r6, r3
 8008e22:	e76f      	b.n	8008d04 <__aeabi_fsub+0x74>
 8008e24:	2e00      	cmp	r6, #0
 8008e26:	d100      	bne.n	8008e2a <__aeabi_fsub+0x19a>
 8008e28:	e0b7      	b.n	8008f9a <__aeabi_fsub+0x30a>
 8008e2a:	0002      	movs	r2, r0
 8008e2c:	3a01      	subs	r2, #1
 8008e2e:	2801      	cmp	r0, #1
 8008e30:	d100      	bne.n	8008e34 <__aeabi_fsub+0x1a4>
 8008e32:	e09c      	b.n	8008f6e <__aeabi_fsub+0x2de>
 8008e34:	28ff      	cmp	r0, #255	; 0xff
 8008e36:	d026      	beq.n	8008e86 <__aeabi_fsub+0x1f6>
 8008e38:	4690      	mov	r8, r2
 8008e3a:	e788      	b.n	8008d4e <__aeabi_fsub+0xbe>
 8008e3c:	22ff      	movs	r2, #255	; 0xff
 8008e3e:	2700      	movs	r7, #0
 8008e40:	e771      	b.n	8008d26 <__aeabi_fsub+0x96>
 8008e42:	20fe      	movs	r0, #254	; 0xfe
 8008e44:	1c6a      	adds	r2, r5, #1
 8008e46:	4210      	tst	r0, r2
 8008e48:	d064      	beq.n	8008f14 <__aeabi_fsub+0x284>
 8008e4a:	2aff      	cmp	r2, #255	; 0xff
 8008e4c:	d0f6      	beq.n	8008e3c <__aeabi_fsub+0x1ac>
 8008e4e:	0015      	movs	r5, r2
 8008e50:	4466      	add	r6, ip
 8008e52:	0870      	lsrs	r0, r6, #1
 8008e54:	0743      	lsls	r3, r0, #29
 8008e56:	d000      	beq.n	8008e5a <__aeabi_fsub+0x1ca>
 8008e58:	e756      	b.n	8008d08 <__aeabi_fsub+0x78>
 8008e5a:	08c3      	lsrs	r3, r0, #3
 8008e5c:	2dff      	cmp	r5, #255	; 0xff
 8008e5e:	d012      	beq.n	8008e86 <__aeabi_fsub+0x1f6>
 8008e60:	025b      	lsls	r3, r3, #9
 8008e62:	0a5f      	lsrs	r7, r3, #9
 8008e64:	b2ea      	uxtb	r2, r5
 8008e66:	e75e      	b.n	8008d26 <__aeabi_fsub+0x96>
 8008e68:	4662      	mov	r2, ip
 8008e6a:	2a00      	cmp	r2, #0
 8008e6c:	d100      	bne.n	8008e70 <__aeabi_fsub+0x1e0>
 8008e6e:	e096      	b.n	8008f9e <__aeabi_fsub+0x30e>
 8008e70:	2e00      	cmp	r6, #0
 8008e72:	d008      	beq.n	8008e86 <__aeabi_fsub+0x1f6>
 8008e74:	2280      	movs	r2, #128	; 0x80
 8008e76:	03d2      	lsls	r2, r2, #15
 8008e78:	4213      	tst	r3, r2
 8008e7a:	d004      	beq.n	8008e86 <__aeabi_fsub+0x1f6>
 8008e7c:	4648      	mov	r0, r9
 8008e7e:	4210      	tst	r0, r2
 8008e80:	d101      	bne.n	8008e86 <__aeabi_fsub+0x1f6>
 8008e82:	000c      	movs	r4, r1
 8008e84:	464b      	mov	r3, r9
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d0d8      	beq.n	8008e3c <__aeabi_fsub+0x1ac>
 8008e8a:	2780      	movs	r7, #128	; 0x80
 8008e8c:	03ff      	lsls	r7, r7, #15
 8008e8e:	431f      	orrs	r7, r3
 8008e90:	027f      	lsls	r7, r7, #9
 8008e92:	22ff      	movs	r2, #255	; 0xff
 8008e94:	0a7f      	lsrs	r7, r7, #9
 8008e96:	e746      	b.n	8008d26 <__aeabi_fsub+0x96>
 8008e98:	2320      	movs	r3, #32
 8008e9a:	003a      	movs	r2, r7
 8008e9c:	1b45      	subs	r5, r0, r5
 8008e9e:	0038      	movs	r0, r7
 8008ea0:	3501      	adds	r5, #1
 8008ea2:	40ea      	lsrs	r2, r5
 8008ea4:	1b5d      	subs	r5, r3, r5
 8008ea6:	40a8      	lsls	r0, r5
 8008ea8:	1e43      	subs	r3, r0, #1
 8008eaa:	4198      	sbcs	r0, r3
 8008eac:	2500      	movs	r5, #0
 8008eae:	4310      	orrs	r0, r2
 8008eb0:	e728      	b.n	8008d04 <__aeabi_fsub+0x74>
 8008eb2:	2320      	movs	r3, #32
 8008eb4:	1a1b      	subs	r3, r3, r0
 8008eb6:	0032      	movs	r2, r6
 8008eb8:	409e      	lsls	r6, r3
 8008eba:	40c2      	lsrs	r2, r0
 8008ebc:	0030      	movs	r0, r6
 8008ebe:	1e43      	subs	r3, r0, #1
 8008ec0:	4198      	sbcs	r0, r3
 8008ec2:	4310      	orrs	r0, r2
 8008ec4:	e70c      	b.n	8008ce0 <__aeabi_fsub+0x50>
 8008ec6:	2aff      	cmp	r2, #255	; 0xff
 8008ec8:	d0db      	beq.n	8008e82 <__aeabi_fsub+0x1f2>
 8008eca:	2380      	movs	r3, #128	; 0x80
 8008ecc:	4660      	mov	r0, ip
 8008ece:	04db      	lsls	r3, r3, #19
 8008ed0:	4318      	orrs	r0, r3
 8008ed2:	4684      	mov	ip, r0
 8008ed4:	2f1b      	cmp	r7, #27
 8008ed6:	dd56      	ble.n	8008f86 <__aeabi_fsub+0x2f6>
 8008ed8:	2001      	movs	r0, #1
 8008eda:	000c      	movs	r4, r1
 8008edc:	0015      	movs	r5, r2
 8008ede:	1a30      	subs	r0, r6, r0
 8008ee0:	e700      	b.n	8008ce4 <__aeabi_fsub+0x54>
 8008ee2:	4663      	mov	r3, ip
 8008ee4:	1b9f      	subs	r7, r3, r6
 8008ee6:	017b      	lsls	r3, r7, #5
 8008ee8:	d43d      	bmi.n	8008f66 <__aeabi_fsub+0x2d6>
 8008eea:	2f00      	cmp	r7, #0
 8008eec:	d000      	beq.n	8008ef0 <__aeabi_fsub+0x260>
 8008eee:	e6fe      	b.n	8008cee <__aeabi_fsub+0x5e>
 8008ef0:	2400      	movs	r4, #0
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2700      	movs	r7, #0
 8008ef6:	e716      	b.n	8008d26 <__aeabi_fsub+0x96>
 8008ef8:	0005      	movs	r5, r0
 8008efa:	e7af      	b.n	8008e5c <__aeabi_fsub+0x1cc>
 8008efc:	0032      	movs	r2, r6
 8008efe:	4643      	mov	r3, r8
 8008f00:	4641      	mov	r1, r8
 8008f02:	40da      	lsrs	r2, r3
 8008f04:	2320      	movs	r3, #32
 8008f06:	1a5b      	subs	r3, r3, r1
 8008f08:	409e      	lsls	r6, r3
 8008f0a:	0030      	movs	r0, r6
 8008f0c:	1e43      	subs	r3, r0, #1
 8008f0e:	4198      	sbcs	r0, r3
 8008f10:	4310      	orrs	r0, r2
 8008f12:	e721      	b.n	8008d58 <__aeabi_fsub+0xc8>
 8008f14:	2d00      	cmp	r5, #0
 8008f16:	d1a7      	bne.n	8008e68 <__aeabi_fsub+0x1d8>
 8008f18:	4663      	mov	r3, ip
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d059      	beq.n	8008fd2 <__aeabi_fsub+0x342>
 8008f1e:	2200      	movs	r2, #0
 8008f20:	2e00      	cmp	r6, #0
 8008f22:	d100      	bne.n	8008f26 <__aeabi_fsub+0x296>
 8008f24:	e6ff      	b.n	8008d26 <__aeabi_fsub+0x96>
 8008f26:	0030      	movs	r0, r6
 8008f28:	4460      	add	r0, ip
 8008f2a:	0143      	lsls	r3, r0, #5
 8008f2c:	d592      	bpl.n	8008e54 <__aeabi_fsub+0x1c4>
 8008f2e:	4b2a      	ldr	r3, [pc, #168]	; (8008fd8 <__aeabi_fsub+0x348>)
 8008f30:	3501      	adds	r5, #1
 8008f32:	4018      	ands	r0, r3
 8008f34:	e78e      	b.n	8008e54 <__aeabi_fsub+0x1c4>
 8008f36:	4663      	mov	r3, ip
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d047      	beq.n	8008fcc <__aeabi_fsub+0x33c>
 8008f3c:	1e4b      	subs	r3, r1, #1
 8008f3e:	2901      	cmp	r1, #1
 8008f40:	d015      	beq.n	8008f6e <__aeabi_fsub+0x2de>
 8008f42:	29ff      	cmp	r1, #255	; 0xff
 8008f44:	d02b      	beq.n	8008f9e <__aeabi_fsub+0x30e>
 8008f46:	0019      	movs	r1, r3
 8008f48:	e74e      	b.n	8008de8 <__aeabi_fsub+0x158>
 8008f4a:	000c      	movs	r4, r1
 8008f4c:	464b      	mov	r3, r9
 8008f4e:	003d      	movs	r5, r7
 8008f50:	e784      	b.n	8008e5c <__aeabi_fsub+0x1cc>
 8008f52:	4662      	mov	r2, ip
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	d18b      	bne.n	8008e70 <__aeabi_fsub+0x1e0>
 8008f58:	2e00      	cmp	r6, #0
 8008f5a:	d192      	bne.n	8008e82 <__aeabi_fsub+0x1f2>
 8008f5c:	2780      	movs	r7, #128	; 0x80
 8008f5e:	2400      	movs	r4, #0
 8008f60:	22ff      	movs	r2, #255	; 0xff
 8008f62:	03ff      	lsls	r7, r7, #15
 8008f64:	e6df      	b.n	8008d26 <__aeabi_fsub+0x96>
 8008f66:	4663      	mov	r3, ip
 8008f68:	000c      	movs	r4, r1
 8008f6a:	1af7      	subs	r7, r6, r3
 8008f6c:	e6bf      	b.n	8008cee <__aeabi_fsub+0x5e>
 8008f6e:	0030      	movs	r0, r6
 8008f70:	4460      	add	r0, ip
 8008f72:	2501      	movs	r5, #1
 8008f74:	0143      	lsls	r3, r0, #5
 8008f76:	d400      	bmi.n	8008f7a <__aeabi_fsub+0x2ea>
 8008f78:	e76c      	b.n	8008e54 <__aeabi_fsub+0x1c4>
 8008f7a:	2502      	movs	r5, #2
 8008f7c:	e6f2      	b.n	8008d64 <__aeabi_fsub+0xd4>
 8008f7e:	4663      	mov	r3, ip
 8008f80:	2501      	movs	r5, #1
 8008f82:	1b98      	subs	r0, r3, r6
 8008f84:	e6ae      	b.n	8008ce4 <__aeabi_fsub+0x54>
 8008f86:	2320      	movs	r3, #32
 8008f88:	4664      	mov	r4, ip
 8008f8a:	4660      	mov	r0, ip
 8008f8c:	40fc      	lsrs	r4, r7
 8008f8e:	1bdf      	subs	r7, r3, r7
 8008f90:	40b8      	lsls	r0, r7
 8008f92:	1e43      	subs	r3, r0, #1
 8008f94:	4198      	sbcs	r0, r3
 8008f96:	4320      	orrs	r0, r4
 8008f98:	e79f      	b.n	8008eda <__aeabi_fsub+0x24a>
 8008f9a:	0005      	movs	r5, r0
 8008f9c:	e75e      	b.n	8008e5c <__aeabi_fsub+0x1cc>
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	e771      	b.n	8008e86 <__aeabi_fsub+0x1f6>
 8008fa2:	2320      	movs	r3, #32
 8008fa4:	4665      	mov	r5, ip
 8008fa6:	4660      	mov	r0, ip
 8008fa8:	40cd      	lsrs	r5, r1
 8008faa:	1a59      	subs	r1, r3, r1
 8008fac:	4088      	lsls	r0, r1
 8008fae:	1e43      	subs	r3, r0, #1
 8008fb0:	4198      	sbcs	r0, r3
 8008fb2:	4328      	orrs	r0, r5
 8008fb4:	e71c      	b.n	8008df0 <__aeabi_fsub+0x160>
 8008fb6:	4663      	mov	r3, ip
 8008fb8:	000c      	movs	r4, r1
 8008fba:	2501      	movs	r5, #1
 8008fbc:	1af0      	subs	r0, r6, r3
 8008fbe:	e691      	b.n	8008ce4 <__aeabi_fsub+0x54>
 8008fc0:	2e00      	cmp	r6, #0
 8008fc2:	d095      	beq.n	8008ef0 <__aeabi_fsub+0x260>
 8008fc4:	000c      	movs	r4, r1
 8008fc6:	464f      	mov	r7, r9
 8008fc8:	2200      	movs	r2, #0
 8008fca:	e6ac      	b.n	8008d26 <__aeabi_fsub+0x96>
 8008fcc:	464b      	mov	r3, r9
 8008fce:	000d      	movs	r5, r1
 8008fd0:	e744      	b.n	8008e5c <__aeabi_fsub+0x1cc>
 8008fd2:	464f      	mov	r7, r9
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	e6a6      	b.n	8008d26 <__aeabi_fsub+0x96>
 8008fd8:	fbffffff 	.word	0xfbffffff
 8008fdc:	7dffffff 	.word	0x7dffffff
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d000      	beq.n	8008fe6 <__aeabi_fsub+0x356>
 8008fe4:	e736      	b.n	8008e54 <__aeabi_fsub+0x1c4>
 8008fe6:	2400      	movs	r4, #0
 8008fe8:	2700      	movs	r7, #0
 8008fea:	e69c      	b.n	8008d26 <__aeabi_fsub+0x96>

08008fec <__aeabi_f2iz>:
 8008fec:	0241      	lsls	r1, r0, #9
 8008fee:	0042      	lsls	r2, r0, #1
 8008ff0:	0fc3      	lsrs	r3, r0, #31
 8008ff2:	0a49      	lsrs	r1, r1, #9
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	0e12      	lsrs	r2, r2, #24
 8008ff8:	2a7e      	cmp	r2, #126	; 0x7e
 8008ffa:	dd03      	ble.n	8009004 <__aeabi_f2iz+0x18>
 8008ffc:	2a9d      	cmp	r2, #157	; 0x9d
 8008ffe:	dd02      	ble.n	8009006 <__aeabi_f2iz+0x1a>
 8009000:	4a09      	ldr	r2, [pc, #36]	; (8009028 <__aeabi_f2iz+0x3c>)
 8009002:	1898      	adds	r0, r3, r2
 8009004:	4770      	bx	lr
 8009006:	2080      	movs	r0, #128	; 0x80
 8009008:	0400      	lsls	r0, r0, #16
 800900a:	4301      	orrs	r1, r0
 800900c:	2a95      	cmp	r2, #149	; 0x95
 800900e:	dc07      	bgt.n	8009020 <__aeabi_f2iz+0x34>
 8009010:	2096      	movs	r0, #150	; 0x96
 8009012:	1a82      	subs	r2, r0, r2
 8009014:	40d1      	lsrs	r1, r2
 8009016:	4248      	negs	r0, r1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1f3      	bne.n	8009004 <__aeabi_f2iz+0x18>
 800901c:	0008      	movs	r0, r1
 800901e:	e7f1      	b.n	8009004 <__aeabi_f2iz+0x18>
 8009020:	3a96      	subs	r2, #150	; 0x96
 8009022:	4091      	lsls	r1, r2
 8009024:	e7f7      	b.n	8009016 <__aeabi_f2iz+0x2a>
 8009026:	46c0      	nop			; (mov r8, r8)
 8009028:	7fffffff 	.word	0x7fffffff

0800902c <__aeabi_i2f>:
 800902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902e:	2800      	cmp	r0, #0
 8009030:	d013      	beq.n	800905a <__aeabi_i2f+0x2e>
 8009032:	17c3      	asrs	r3, r0, #31
 8009034:	18c6      	adds	r6, r0, r3
 8009036:	405e      	eors	r6, r3
 8009038:	0fc4      	lsrs	r4, r0, #31
 800903a:	0030      	movs	r0, r6
 800903c:	f001 fef4 	bl	800ae28 <__clzsi2>
 8009040:	239e      	movs	r3, #158	; 0x9e
 8009042:	0005      	movs	r5, r0
 8009044:	1a1b      	subs	r3, r3, r0
 8009046:	2b96      	cmp	r3, #150	; 0x96
 8009048:	dc0f      	bgt.n	800906a <__aeabi_i2f+0x3e>
 800904a:	2808      	cmp	r0, #8
 800904c:	dd01      	ble.n	8009052 <__aeabi_i2f+0x26>
 800904e:	3d08      	subs	r5, #8
 8009050:	40ae      	lsls	r6, r5
 8009052:	0276      	lsls	r6, r6, #9
 8009054:	0a76      	lsrs	r6, r6, #9
 8009056:	b2d8      	uxtb	r0, r3
 8009058:	e002      	b.n	8009060 <__aeabi_i2f+0x34>
 800905a:	2400      	movs	r4, #0
 800905c:	2000      	movs	r0, #0
 800905e:	2600      	movs	r6, #0
 8009060:	05c0      	lsls	r0, r0, #23
 8009062:	4330      	orrs	r0, r6
 8009064:	07e4      	lsls	r4, r4, #31
 8009066:	4320      	orrs	r0, r4
 8009068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800906a:	2b99      	cmp	r3, #153	; 0x99
 800906c:	dd0c      	ble.n	8009088 <__aeabi_i2f+0x5c>
 800906e:	2205      	movs	r2, #5
 8009070:	0031      	movs	r1, r6
 8009072:	1a12      	subs	r2, r2, r0
 8009074:	40d1      	lsrs	r1, r2
 8009076:	000a      	movs	r2, r1
 8009078:	0001      	movs	r1, r0
 800907a:	0030      	movs	r0, r6
 800907c:	311b      	adds	r1, #27
 800907e:	4088      	lsls	r0, r1
 8009080:	1e41      	subs	r1, r0, #1
 8009082:	4188      	sbcs	r0, r1
 8009084:	4302      	orrs	r2, r0
 8009086:	0016      	movs	r6, r2
 8009088:	2d05      	cmp	r5, #5
 800908a:	dc12      	bgt.n	80090b2 <__aeabi_i2f+0x86>
 800908c:	0031      	movs	r1, r6
 800908e:	4f0d      	ldr	r7, [pc, #52]	; (80090c4 <__aeabi_i2f+0x98>)
 8009090:	4039      	ands	r1, r7
 8009092:	0772      	lsls	r2, r6, #29
 8009094:	d009      	beq.n	80090aa <__aeabi_i2f+0x7e>
 8009096:	200f      	movs	r0, #15
 8009098:	4030      	ands	r0, r6
 800909a:	2804      	cmp	r0, #4
 800909c:	d005      	beq.n	80090aa <__aeabi_i2f+0x7e>
 800909e:	3104      	adds	r1, #4
 80090a0:	014a      	lsls	r2, r1, #5
 80090a2:	d502      	bpl.n	80090aa <__aeabi_i2f+0x7e>
 80090a4:	239f      	movs	r3, #159	; 0x9f
 80090a6:	4039      	ands	r1, r7
 80090a8:	1b5b      	subs	r3, r3, r5
 80090aa:	0189      	lsls	r1, r1, #6
 80090ac:	0a4e      	lsrs	r6, r1, #9
 80090ae:	b2d8      	uxtb	r0, r3
 80090b0:	e7d6      	b.n	8009060 <__aeabi_i2f+0x34>
 80090b2:	1f6a      	subs	r2, r5, #5
 80090b4:	4096      	lsls	r6, r2
 80090b6:	0031      	movs	r1, r6
 80090b8:	4f02      	ldr	r7, [pc, #8]	; (80090c4 <__aeabi_i2f+0x98>)
 80090ba:	4039      	ands	r1, r7
 80090bc:	0772      	lsls	r2, r6, #29
 80090be:	d0f4      	beq.n	80090aa <__aeabi_i2f+0x7e>
 80090c0:	e7e9      	b.n	8009096 <__aeabi_i2f+0x6a>
 80090c2:	46c0      	nop			; (mov r8, r8)
 80090c4:	fbffffff 	.word	0xfbffffff

080090c8 <__aeabi_ui2f>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	1e05      	subs	r5, r0, #0
 80090cc:	d00e      	beq.n	80090ec <__aeabi_ui2f+0x24>
 80090ce:	f001 feab 	bl	800ae28 <__clzsi2>
 80090d2:	239e      	movs	r3, #158	; 0x9e
 80090d4:	0004      	movs	r4, r0
 80090d6:	1a1b      	subs	r3, r3, r0
 80090d8:	2b96      	cmp	r3, #150	; 0x96
 80090da:	dc0c      	bgt.n	80090f6 <__aeabi_ui2f+0x2e>
 80090dc:	2808      	cmp	r0, #8
 80090de:	dd01      	ble.n	80090e4 <__aeabi_ui2f+0x1c>
 80090e0:	3c08      	subs	r4, #8
 80090e2:	40a5      	lsls	r5, r4
 80090e4:	026d      	lsls	r5, r5, #9
 80090e6:	0a6d      	lsrs	r5, r5, #9
 80090e8:	b2d8      	uxtb	r0, r3
 80090ea:	e001      	b.n	80090f0 <__aeabi_ui2f+0x28>
 80090ec:	2000      	movs	r0, #0
 80090ee:	2500      	movs	r5, #0
 80090f0:	05c0      	lsls	r0, r0, #23
 80090f2:	4328      	orrs	r0, r5
 80090f4:	bd70      	pop	{r4, r5, r6, pc}
 80090f6:	2b99      	cmp	r3, #153	; 0x99
 80090f8:	dd09      	ble.n	800910e <__aeabi_ui2f+0x46>
 80090fa:	0002      	movs	r2, r0
 80090fc:	0029      	movs	r1, r5
 80090fe:	321b      	adds	r2, #27
 8009100:	4091      	lsls	r1, r2
 8009102:	1e4a      	subs	r2, r1, #1
 8009104:	4191      	sbcs	r1, r2
 8009106:	2205      	movs	r2, #5
 8009108:	1a12      	subs	r2, r2, r0
 800910a:	40d5      	lsrs	r5, r2
 800910c:	430d      	orrs	r5, r1
 800910e:	2c05      	cmp	r4, #5
 8009110:	dc12      	bgt.n	8009138 <__aeabi_ui2f+0x70>
 8009112:	0029      	movs	r1, r5
 8009114:	4e0c      	ldr	r6, [pc, #48]	; (8009148 <__aeabi_ui2f+0x80>)
 8009116:	4031      	ands	r1, r6
 8009118:	076a      	lsls	r2, r5, #29
 800911a:	d009      	beq.n	8009130 <__aeabi_ui2f+0x68>
 800911c:	200f      	movs	r0, #15
 800911e:	4028      	ands	r0, r5
 8009120:	2804      	cmp	r0, #4
 8009122:	d005      	beq.n	8009130 <__aeabi_ui2f+0x68>
 8009124:	3104      	adds	r1, #4
 8009126:	014a      	lsls	r2, r1, #5
 8009128:	d502      	bpl.n	8009130 <__aeabi_ui2f+0x68>
 800912a:	239f      	movs	r3, #159	; 0x9f
 800912c:	4031      	ands	r1, r6
 800912e:	1b1b      	subs	r3, r3, r4
 8009130:	0189      	lsls	r1, r1, #6
 8009132:	0a4d      	lsrs	r5, r1, #9
 8009134:	b2d8      	uxtb	r0, r3
 8009136:	e7db      	b.n	80090f0 <__aeabi_ui2f+0x28>
 8009138:	1f62      	subs	r2, r4, #5
 800913a:	4095      	lsls	r5, r2
 800913c:	0029      	movs	r1, r5
 800913e:	4e02      	ldr	r6, [pc, #8]	; (8009148 <__aeabi_ui2f+0x80>)
 8009140:	4031      	ands	r1, r6
 8009142:	076a      	lsls	r2, r5, #29
 8009144:	d0f4      	beq.n	8009130 <__aeabi_ui2f+0x68>
 8009146:	e7e9      	b.n	800911c <__aeabi_ui2f+0x54>
 8009148:	fbffffff 	.word	0xfbffffff

0800914c <__aeabi_dadd>:
 800914c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800914e:	464f      	mov	r7, r9
 8009150:	4646      	mov	r6, r8
 8009152:	46d6      	mov	lr, sl
 8009154:	000d      	movs	r5, r1
 8009156:	0004      	movs	r4, r0
 8009158:	b5c0      	push	{r6, r7, lr}
 800915a:	001f      	movs	r7, r3
 800915c:	0011      	movs	r1, r2
 800915e:	0328      	lsls	r0, r5, #12
 8009160:	0f62      	lsrs	r2, r4, #29
 8009162:	0a40      	lsrs	r0, r0, #9
 8009164:	4310      	orrs	r0, r2
 8009166:	007a      	lsls	r2, r7, #1
 8009168:	0d52      	lsrs	r2, r2, #21
 800916a:	00e3      	lsls	r3, r4, #3
 800916c:	033c      	lsls	r4, r7, #12
 800916e:	4691      	mov	r9, r2
 8009170:	0a64      	lsrs	r4, r4, #9
 8009172:	0ffa      	lsrs	r2, r7, #31
 8009174:	0f4f      	lsrs	r7, r1, #29
 8009176:	006e      	lsls	r6, r5, #1
 8009178:	4327      	orrs	r7, r4
 800917a:	4692      	mov	sl, r2
 800917c:	46b8      	mov	r8, r7
 800917e:	0d76      	lsrs	r6, r6, #21
 8009180:	0fed      	lsrs	r5, r5, #31
 8009182:	00c9      	lsls	r1, r1, #3
 8009184:	4295      	cmp	r5, r2
 8009186:	d100      	bne.n	800918a <__aeabi_dadd+0x3e>
 8009188:	e099      	b.n	80092be <__aeabi_dadd+0x172>
 800918a:	464c      	mov	r4, r9
 800918c:	1b34      	subs	r4, r6, r4
 800918e:	46a4      	mov	ip, r4
 8009190:	2c00      	cmp	r4, #0
 8009192:	dc00      	bgt.n	8009196 <__aeabi_dadd+0x4a>
 8009194:	e07c      	b.n	8009290 <__aeabi_dadd+0x144>
 8009196:	464a      	mov	r2, r9
 8009198:	2a00      	cmp	r2, #0
 800919a:	d100      	bne.n	800919e <__aeabi_dadd+0x52>
 800919c:	e0b8      	b.n	8009310 <__aeabi_dadd+0x1c4>
 800919e:	4ac5      	ldr	r2, [pc, #788]	; (80094b4 <__aeabi_dadd+0x368>)
 80091a0:	4296      	cmp	r6, r2
 80091a2:	d100      	bne.n	80091a6 <__aeabi_dadd+0x5a>
 80091a4:	e11c      	b.n	80093e0 <__aeabi_dadd+0x294>
 80091a6:	2280      	movs	r2, #128	; 0x80
 80091a8:	003c      	movs	r4, r7
 80091aa:	0412      	lsls	r2, r2, #16
 80091ac:	4314      	orrs	r4, r2
 80091ae:	46a0      	mov	r8, r4
 80091b0:	4662      	mov	r2, ip
 80091b2:	2a38      	cmp	r2, #56	; 0x38
 80091b4:	dd00      	ble.n	80091b8 <__aeabi_dadd+0x6c>
 80091b6:	e161      	b.n	800947c <__aeabi_dadd+0x330>
 80091b8:	2a1f      	cmp	r2, #31
 80091ba:	dd00      	ble.n	80091be <__aeabi_dadd+0x72>
 80091bc:	e1cc      	b.n	8009558 <__aeabi_dadd+0x40c>
 80091be:	4664      	mov	r4, ip
 80091c0:	2220      	movs	r2, #32
 80091c2:	1b12      	subs	r2, r2, r4
 80091c4:	4644      	mov	r4, r8
 80091c6:	4094      	lsls	r4, r2
 80091c8:	000f      	movs	r7, r1
 80091ca:	46a1      	mov	r9, r4
 80091cc:	4664      	mov	r4, ip
 80091ce:	4091      	lsls	r1, r2
 80091d0:	40e7      	lsrs	r7, r4
 80091d2:	464c      	mov	r4, r9
 80091d4:	1e4a      	subs	r2, r1, #1
 80091d6:	4191      	sbcs	r1, r2
 80091d8:	433c      	orrs	r4, r7
 80091da:	4642      	mov	r2, r8
 80091dc:	4321      	orrs	r1, r4
 80091de:	4664      	mov	r4, ip
 80091e0:	40e2      	lsrs	r2, r4
 80091e2:	1a80      	subs	r0, r0, r2
 80091e4:	1a5c      	subs	r4, r3, r1
 80091e6:	42a3      	cmp	r3, r4
 80091e8:	419b      	sbcs	r3, r3
 80091ea:	425f      	negs	r7, r3
 80091ec:	1bc7      	subs	r7, r0, r7
 80091ee:	023b      	lsls	r3, r7, #8
 80091f0:	d400      	bmi.n	80091f4 <__aeabi_dadd+0xa8>
 80091f2:	e0d0      	b.n	8009396 <__aeabi_dadd+0x24a>
 80091f4:	027f      	lsls	r7, r7, #9
 80091f6:	0a7f      	lsrs	r7, r7, #9
 80091f8:	2f00      	cmp	r7, #0
 80091fa:	d100      	bne.n	80091fe <__aeabi_dadd+0xb2>
 80091fc:	e0ff      	b.n	80093fe <__aeabi_dadd+0x2b2>
 80091fe:	0038      	movs	r0, r7
 8009200:	f001 fe12 	bl	800ae28 <__clzsi2>
 8009204:	0001      	movs	r1, r0
 8009206:	3908      	subs	r1, #8
 8009208:	2320      	movs	r3, #32
 800920a:	0022      	movs	r2, r4
 800920c:	1a5b      	subs	r3, r3, r1
 800920e:	408f      	lsls	r7, r1
 8009210:	40da      	lsrs	r2, r3
 8009212:	408c      	lsls	r4, r1
 8009214:	4317      	orrs	r7, r2
 8009216:	42b1      	cmp	r1, r6
 8009218:	da00      	bge.n	800921c <__aeabi_dadd+0xd0>
 800921a:	e0ff      	b.n	800941c <__aeabi_dadd+0x2d0>
 800921c:	1b89      	subs	r1, r1, r6
 800921e:	1c4b      	adds	r3, r1, #1
 8009220:	2b1f      	cmp	r3, #31
 8009222:	dd00      	ble.n	8009226 <__aeabi_dadd+0xda>
 8009224:	e0a8      	b.n	8009378 <__aeabi_dadd+0x22c>
 8009226:	2220      	movs	r2, #32
 8009228:	0039      	movs	r1, r7
 800922a:	1ad2      	subs	r2, r2, r3
 800922c:	0020      	movs	r0, r4
 800922e:	4094      	lsls	r4, r2
 8009230:	4091      	lsls	r1, r2
 8009232:	40d8      	lsrs	r0, r3
 8009234:	1e62      	subs	r2, r4, #1
 8009236:	4194      	sbcs	r4, r2
 8009238:	40df      	lsrs	r7, r3
 800923a:	2600      	movs	r6, #0
 800923c:	4301      	orrs	r1, r0
 800923e:	430c      	orrs	r4, r1
 8009240:	0763      	lsls	r3, r4, #29
 8009242:	d009      	beq.n	8009258 <__aeabi_dadd+0x10c>
 8009244:	230f      	movs	r3, #15
 8009246:	4023      	ands	r3, r4
 8009248:	2b04      	cmp	r3, #4
 800924a:	d005      	beq.n	8009258 <__aeabi_dadd+0x10c>
 800924c:	1d23      	adds	r3, r4, #4
 800924e:	42a3      	cmp	r3, r4
 8009250:	41a4      	sbcs	r4, r4
 8009252:	4264      	negs	r4, r4
 8009254:	193f      	adds	r7, r7, r4
 8009256:	001c      	movs	r4, r3
 8009258:	023b      	lsls	r3, r7, #8
 800925a:	d400      	bmi.n	800925e <__aeabi_dadd+0x112>
 800925c:	e09e      	b.n	800939c <__aeabi_dadd+0x250>
 800925e:	4b95      	ldr	r3, [pc, #596]	; (80094b4 <__aeabi_dadd+0x368>)
 8009260:	3601      	adds	r6, #1
 8009262:	429e      	cmp	r6, r3
 8009264:	d100      	bne.n	8009268 <__aeabi_dadd+0x11c>
 8009266:	e0b7      	b.n	80093d8 <__aeabi_dadd+0x28c>
 8009268:	4a93      	ldr	r2, [pc, #588]	; (80094b8 <__aeabi_dadd+0x36c>)
 800926a:	08e4      	lsrs	r4, r4, #3
 800926c:	4017      	ands	r7, r2
 800926e:	077b      	lsls	r3, r7, #29
 8009270:	0571      	lsls	r1, r6, #21
 8009272:	027f      	lsls	r7, r7, #9
 8009274:	4323      	orrs	r3, r4
 8009276:	0b3f      	lsrs	r7, r7, #12
 8009278:	0d4a      	lsrs	r2, r1, #21
 800927a:	0512      	lsls	r2, r2, #20
 800927c:	433a      	orrs	r2, r7
 800927e:	07ed      	lsls	r5, r5, #31
 8009280:	432a      	orrs	r2, r5
 8009282:	0018      	movs	r0, r3
 8009284:	0011      	movs	r1, r2
 8009286:	bce0      	pop	{r5, r6, r7}
 8009288:	46ba      	mov	sl, r7
 800928a:	46b1      	mov	r9, r6
 800928c:	46a8      	mov	r8, r5
 800928e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009290:	2c00      	cmp	r4, #0
 8009292:	d04b      	beq.n	800932c <__aeabi_dadd+0x1e0>
 8009294:	464c      	mov	r4, r9
 8009296:	1ba4      	subs	r4, r4, r6
 8009298:	46a4      	mov	ip, r4
 800929a:	2e00      	cmp	r6, #0
 800929c:	d000      	beq.n	80092a0 <__aeabi_dadd+0x154>
 800929e:	e123      	b.n	80094e8 <__aeabi_dadd+0x39c>
 80092a0:	0004      	movs	r4, r0
 80092a2:	431c      	orrs	r4, r3
 80092a4:	d100      	bne.n	80092a8 <__aeabi_dadd+0x15c>
 80092a6:	e1af      	b.n	8009608 <__aeabi_dadd+0x4bc>
 80092a8:	4662      	mov	r2, ip
 80092aa:	1e54      	subs	r4, r2, #1
 80092ac:	2a01      	cmp	r2, #1
 80092ae:	d100      	bne.n	80092b2 <__aeabi_dadd+0x166>
 80092b0:	e215      	b.n	80096de <__aeabi_dadd+0x592>
 80092b2:	4d80      	ldr	r5, [pc, #512]	; (80094b4 <__aeabi_dadd+0x368>)
 80092b4:	45ac      	cmp	ip, r5
 80092b6:	d100      	bne.n	80092ba <__aeabi_dadd+0x16e>
 80092b8:	e1c8      	b.n	800964c <__aeabi_dadd+0x500>
 80092ba:	46a4      	mov	ip, r4
 80092bc:	e11b      	b.n	80094f6 <__aeabi_dadd+0x3aa>
 80092be:	464a      	mov	r2, r9
 80092c0:	1ab2      	subs	r2, r6, r2
 80092c2:	4694      	mov	ip, r2
 80092c4:	2a00      	cmp	r2, #0
 80092c6:	dc00      	bgt.n	80092ca <__aeabi_dadd+0x17e>
 80092c8:	e0ac      	b.n	8009424 <__aeabi_dadd+0x2d8>
 80092ca:	464a      	mov	r2, r9
 80092cc:	2a00      	cmp	r2, #0
 80092ce:	d043      	beq.n	8009358 <__aeabi_dadd+0x20c>
 80092d0:	4a78      	ldr	r2, [pc, #480]	; (80094b4 <__aeabi_dadd+0x368>)
 80092d2:	4296      	cmp	r6, r2
 80092d4:	d100      	bne.n	80092d8 <__aeabi_dadd+0x18c>
 80092d6:	e1af      	b.n	8009638 <__aeabi_dadd+0x4ec>
 80092d8:	2280      	movs	r2, #128	; 0x80
 80092da:	003c      	movs	r4, r7
 80092dc:	0412      	lsls	r2, r2, #16
 80092de:	4314      	orrs	r4, r2
 80092e0:	46a0      	mov	r8, r4
 80092e2:	4662      	mov	r2, ip
 80092e4:	2a38      	cmp	r2, #56	; 0x38
 80092e6:	dc67      	bgt.n	80093b8 <__aeabi_dadd+0x26c>
 80092e8:	2a1f      	cmp	r2, #31
 80092ea:	dc00      	bgt.n	80092ee <__aeabi_dadd+0x1a2>
 80092ec:	e15f      	b.n	80095ae <__aeabi_dadd+0x462>
 80092ee:	4647      	mov	r7, r8
 80092f0:	3a20      	subs	r2, #32
 80092f2:	40d7      	lsrs	r7, r2
 80092f4:	4662      	mov	r2, ip
 80092f6:	2a20      	cmp	r2, #32
 80092f8:	d005      	beq.n	8009306 <__aeabi_dadd+0x1ba>
 80092fa:	4664      	mov	r4, ip
 80092fc:	2240      	movs	r2, #64	; 0x40
 80092fe:	1b12      	subs	r2, r2, r4
 8009300:	4644      	mov	r4, r8
 8009302:	4094      	lsls	r4, r2
 8009304:	4321      	orrs	r1, r4
 8009306:	1e4a      	subs	r2, r1, #1
 8009308:	4191      	sbcs	r1, r2
 800930a:	000c      	movs	r4, r1
 800930c:	433c      	orrs	r4, r7
 800930e:	e057      	b.n	80093c0 <__aeabi_dadd+0x274>
 8009310:	003a      	movs	r2, r7
 8009312:	430a      	orrs	r2, r1
 8009314:	d100      	bne.n	8009318 <__aeabi_dadd+0x1cc>
 8009316:	e105      	b.n	8009524 <__aeabi_dadd+0x3d8>
 8009318:	0022      	movs	r2, r4
 800931a:	3a01      	subs	r2, #1
 800931c:	2c01      	cmp	r4, #1
 800931e:	d100      	bne.n	8009322 <__aeabi_dadd+0x1d6>
 8009320:	e182      	b.n	8009628 <__aeabi_dadd+0x4dc>
 8009322:	4c64      	ldr	r4, [pc, #400]	; (80094b4 <__aeabi_dadd+0x368>)
 8009324:	45a4      	cmp	ip, r4
 8009326:	d05b      	beq.n	80093e0 <__aeabi_dadd+0x294>
 8009328:	4694      	mov	ip, r2
 800932a:	e741      	b.n	80091b0 <__aeabi_dadd+0x64>
 800932c:	4c63      	ldr	r4, [pc, #396]	; (80094bc <__aeabi_dadd+0x370>)
 800932e:	1c77      	adds	r7, r6, #1
 8009330:	4227      	tst	r7, r4
 8009332:	d000      	beq.n	8009336 <__aeabi_dadd+0x1ea>
 8009334:	e0c4      	b.n	80094c0 <__aeabi_dadd+0x374>
 8009336:	0004      	movs	r4, r0
 8009338:	431c      	orrs	r4, r3
 800933a:	2e00      	cmp	r6, #0
 800933c:	d000      	beq.n	8009340 <__aeabi_dadd+0x1f4>
 800933e:	e169      	b.n	8009614 <__aeabi_dadd+0x4c8>
 8009340:	2c00      	cmp	r4, #0
 8009342:	d100      	bne.n	8009346 <__aeabi_dadd+0x1fa>
 8009344:	e1bf      	b.n	80096c6 <__aeabi_dadd+0x57a>
 8009346:	4644      	mov	r4, r8
 8009348:	430c      	orrs	r4, r1
 800934a:	d000      	beq.n	800934e <__aeabi_dadd+0x202>
 800934c:	e1d0      	b.n	80096f0 <__aeabi_dadd+0x5a4>
 800934e:	0742      	lsls	r2, r0, #29
 8009350:	08db      	lsrs	r3, r3, #3
 8009352:	4313      	orrs	r3, r2
 8009354:	08c0      	lsrs	r0, r0, #3
 8009356:	e029      	b.n	80093ac <__aeabi_dadd+0x260>
 8009358:	003a      	movs	r2, r7
 800935a:	430a      	orrs	r2, r1
 800935c:	d100      	bne.n	8009360 <__aeabi_dadd+0x214>
 800935e:	e170      	b.n	8009642 <__aeabi_dadd+0x4f6>
 8009360:	4662      	mov	r2, ip
 8009362:	4664      	mov	r4, ip
 8009364:	3a01      	subs	r2, #1
 8009366:	2c01      	cmp	r4, #1
 8009368:	d100      	bne.n	800936c <__aeabi_dadd+0x220>
 800936a:	e0e0      	b.n	800952e <__aeabi_dadd+0x3e2>
 800936c:	4c51      	ldr	r4, [pc, #324]	; (80094b4 <__aeabi_dadd+0x368>)
 800936e:	45a4      	cmp	ip, r4
 8009370:	d100      	bne.n	8009374 <__aeabi_dadd+0x228>
 8009372:	e161      	b.n	8009638 <__aeabi_dadd+0x4ec>
 8009374:	4694      	mov	ip, r2
 8009376:	e7b4      	b.n	80092e2 <__aeabi_dadd+0x196>
 8009378:	003a      	movs	r2, r7
 800937a:	391f      	subs	r1, #31
 800937c:	40ca      	lsrs	r2, r1
 800937e:	0011      	movs	r1, r2
 8009380:	2b20      	cmp	r3, #32
 8009382:	d003      	beq.n	800938c <__aeabi_dadd+0x240>
 8009384:	2240      	movs	r2, #64	; 0x40
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	409f      	lsls	r7, r3
 800938a:	433c      	orrs	r4, r7
 800938c:	1e63      	subs	r3, r4, #1
 800938e:	419c      	sbcs	r4, r3
 8009390:	2700      	movs	r7, #0
 8009392:	2600      	movs	r6, #0
 8009394:	430c      	orrs	r4, r1
 8009396:	0763      	lsls	r3, r4, #29
 8009398:	d000      	beq.n	800939c <__aeabi_dadd+0x250>
 800939a:	e753      	b.n	8009244 <__aeabi_dadd+0xf8>
 800939c:	46b4      	mov	ip, r6
 800939e:	08e4      	lsrs	r4, r4, #3
 80093a0:	077b      	lsls	r3, r7, #29
 80093a2:	4323      	orrs	r3, r4
 80093a4:	08f8      	lsrs	r0, r7, #3
 80093a6:	4a43      	ldr	r2, [pc, #268]	; (80094b4 <__aeabi_dadd+0x368>)
 80093a8:	4594      	cmp	ip, r2
 80093aa:	d01d      	beq.n	80093e8 <__aeabi_dadd+0x29c>
 80093ac:	4662      	mov	r2, ip
 80093ae:	0307      	lsls	r7, r0, #12
 80093b0:	0552      	lsls	r2, r2, #21
 80093b2:	0b3f      	lsrs	r7, r7, #12
 80093b4:	0d52      	lsrs	r2, r2, #21
 80093b6:	e760      	b.n	800927a <__aeabi_dadd+0x12e>
 80093b8:	4644      	mov	r4, r8
 80093ba:	430c      	orrs	r4, r1
 80093bc:	1e62      	subs	r2, r4, #1
 80093be:	4194      	sbcs	r4, r2
 80093c0:	18e4      	adds	r4, r4, r3
 80093c2:	429c      	cmp	r4, r3
 80093c4:	419b      	sbcs	r3, r3
 80093c6:	425f      	negs	r7, r3
 80093c8:	183f      	adds	r7, r7, r0
 80093ca:	023b      	lsls	r3, r7, #8
 80093cc:	d5e3      	bpl.n	8009396 <__aeabi_dadd+0x24a>
 80093ce:	4b39      	ldr	r3, [pc, #228]	; (80094b4 <__aeabi_dadd+0x368>)
 80093d0:	3601      	adds	r6, #1
 80093d2:	429e      	cmp	r6, r3
 80093d4:	d000      	beq.n	80093d8 <__aeabi_dadd+0x28c>
 80093d6:	e0b5      	b.n	8009544 <__aeabi_dadd+0x3f8>
 80093d8:	0032      	movs	r2, r6
 80093da:	2700      	movs	r7, #0
 80093dc:	2300      	movs	r3, #0
 80093de:	e74c      	b.n	800927a <__aeabi_dadd+0x12e>
 80093e0:	0742      	lsls	r2, r0, #29
 80093e2:	08db      	lsrs	r3, r3, #3
 80093e4:	4313      	orrs	r3, r2
 80093e6:	08c0      	lsrs	r0, r0, #3
 80093e8:	001a      	movs	r2, r3
 80093ea:	4302      	orrs	r2, r0
 80093ec:	d100      	bne.n	80093f0 <__aeabi_dadd+0x2a4>
 80093ee:	e1e1      	b.n	80097b4 <__aeabi_dadd+0x668>
 80093f0:	2780      	movs	r7, #128	; 0x80
 80093f2:	033f      	lsls	r7, r7, #12
 80093f4:	4307      	orrs	r7, r0
 80093f6:	033f      	lsls	r7, r7, #12
 80093f8:	4a2e      	ldr	r2, [pc, #184]	; (80094b4 <__aeabi_dadd+0x368>)
 80093fa:	0b3f      	lsrs	r7, r7, #12
 80093fc:	e73d      	b.n	800927a <__aeabi_dadd+0x12e>
 80093fe:	0020      	movs	r0, r4
 8009400:	f001 fd12 	bl	800ae28 <__clzsi2>
 8009404:	0001      	movs	r1, r0
 8009406:	3118      	adds	r1, #24
 8009408:	291f      	cmp	r1, #31
 800940a:	dc00      	bgt.n	800940e <__aeabi_dadd+0x2c2>
 800940c:	e6fc      	b.n	8009208 <__aeabi_dadd+0xbc>
 800940e:	3808      	subs	r0, #8
 8009410:	4084      	lsls	r4, r0
 8009412:	0027      	movs	r7, r4
 8009414:	2400      	movs	r4, #0
 8009416:	42b1      	cmp	r1, r6
 8009418:	db00      	blt.n	800941c <__aeabi_dadd+0x2d0>
 800941a:	e6ff      	b.n	800921c <__aeabi_dadd+0xd0>
 800941c:	4a26      	ldr	r2, [pc, #152]	; (80094b8 <__aeabi_dadd+0x36c>)
 800941e:	1a76      	subs	r6, r6, r1
 8009420:	4017      	ands	r7, r2
 8009422:	e70d      	b.n	8009240 <__aeabi_dadd+0xf4>
 8009424:	2a00      	cmp	r2, #0
 8009426:	d02f      	beq.n	8009488 <__aeabi_dadd+0x33c>
 8009428:	464a      	mov	r2, r9
 800942a:	1b92      	subs	r2, r2, r6
 800942c:	4694      	mov	ip, r2
 800942e:	2e00      	cmp	r6, #0
 8009430:	d100      	bne.n	8009434 <__aeabi_dadd+0x2e8>
 8009432:	e0ad      	b.n	8009590 <__aeabi_dadd+0x444>
 8009434:	4a1f      	ldr	r2, [pc, #124]	; (80094b4 <__aeabi_dadd+0x368>)
 8009436:	4591      	cmp	r9, r2
 8009438:	d100      	bne.n	800943c <__aeabi_dadd+0x2f0>
 800943a:	e10f      	b.n	800965c <__aeabi_dadd+0x510>
 800943c:	2280      	movs	r2, #128	; 0x80
 800943e:	0412      	lsls	r2, r2, #16
 8009440:	4310      	orrs	r0, r2
 8009442:	4662      	mov	r2, ip
 8009444:	2a38      	cmp	r2, #56	; 0x38
 8009446:	dd00      	ble.n	800944a <__aeabi_dadd+0x2fe>
 8009448:	e10f      	b.n	800966a <__aeabi_dadd+0x51e>
 800944a:	2a1f      	cmp	r2, #31
 800944c:	dd00      	ble.n	8009450 <__aeabi_dadd+0x304>
 800944e:	e180      	b.n	8009752 <__aeabi_dadd+0x606>
 8009450:	4664      	mov	r4, ip
 8009452:	2220      	movs	r2, #32
 8009454:	001e      	movs	r6, r3
 8009456:	1b12      	subs	r2, r2, r4
 8009458:	4667      	mov	r7, ip
 800945a:	0004      	movs	r4, r0
 800945c:	4093      	lsls	r3, r2
 800945e:	4094      	lsls	r4, r2
 8009460:	40fe      	lsrs	r6, r7
 8009462:	1e5a      	subs	r2, r3, #1
 8009464:	4193      	sbcs	r3, r2
 8009466:	40f8      	lsrs	r0, r7
 8009468:	4334      	orrs	r4, r6
 800946a:	431c      	orrs	r4, r3
 800946c:	4480      	add	r8, r0
 800946e:	1864      	adds	r4, r4, r1
 8009470:	428c      	cmp	r4, r1
 8009472:	41bf      	sbcs	r7, r7
 8009474:	427f      	negs	r7, r7
 8009476:	464e      	mov	r6, r9
 8009478:	4447      	add	r7, r8
 800947a:	e7a6      	b.n	80093ca <__aeabi_dadd+0x27e>
 800947c:	4642      	mov	r2, r8
 800947e:	430a      	orrs	r2, r1
 8009480:	0011      	movs	r1, r2
 8009482:	1e4a      	subs	r2, r1, #1
 8009484:	4191      	sbcs	r1, r2
 8009486:	e6ad      	b.n	80091e4 <__aeabi_dadd+0x98>
 8009488:	4c0c      	ldr	r4, [pc, #48]	; (80094bc <__aeabi_dadd+0x370>)
 800948a:	1c72      	adds	r2, r6, #1
 800948c:	4222      	tst	r2, r4
 800948e:	d000      	beq.n	8009492 <__aeabi_dadd+0x346>
 8009490:	e0a1      	b.n	80095d6 <__aeabi_dadd+0x48a>
 8009492:	0002      	movs	r2, r0
 8009494:	431a      	orrs	r2, r3
 8009496:	2e00      	cmp	r6, #0
 8009498:	d000      	beq.n	800949c <__aeabi_dadd+0x350>
 800949a:	e0fa      	b.n	8009692 <__aeabi_dadd+0x546>
 800949c:	2a00      	cmp	r2, #0
 800949e:	d100      	bne.n	80094a2 <__aeabi_dadd+0x356>
 80094a0:	e145      	b.n	800972e <__aeabi_dadd+0x5e2>
 80094a2:	003a      	movs	r2, r7
 80094a4:	430a      	orrs	r2, r1
 80094a6:	d000      	beq.n	80094aa <__aeabi_dadd+0x35e>
 80094a8:	e146      	b.n	8009738 <__aeabi_dadd+0x5ec>
 80094aa:	0742      	lsls	r2, r0, #29
 80094ac:	08db      	lsrs	r3, r3, #3
 80094ae:	4313      	orrs	r3, r2
 80094b0:	08c0      	lsrs	r0, r0, #3
 80094b2:	e77b      	b.n	80093ac <__aeabi_dadd+0x260>
 80094b4:	000007ff 	.word	0x000007ff
 80094b8:	ff7fffff 	.word	0xff7fffff
 80094bc:	000007fe 	.word	0x000007fe
 80094c0:	4647      	mov	r7, r8
 80094c2:	1a5c      	subs	r4, r3, r1
 80094c4:	1bc2      	subs	r2, r0, r7
 80094c6:	42a3      	cmp	r3, r4
 80094c8:	41bf      	sbcs	r7, r7
 80094ca:	427f      	negs	r7, r7
 80094cc:	46b9      	mov	r9, r7
 80094ce:	0017      	movs	r7, r2
 80094d0:	464a      	mov	r2, r9
 80094d2:	1abf      	subs	r7, r7, r2
 80094d4:	023a      	lsls	r2, r7, #8
 80094d6:	d500      	bpl.n	80094da <__aeabi_dadd+0x38e>
 80094d8:	e08d      	b.n	80095f6 <__aeabi_dadd+0x4aa>
 80094da:	0023      	movs	r3, r4
 80094dc:	433b      	orrs	r3, r7
 80094de:	d000      	beq.n	80094e2 <__aeabi_dadd+0x396>
 80094e0:	e68a      	b.n	80091f8 <__aeabi_dadd+0xac>
 80094e2:	2000      	movs	r0, #0
 80094e4:	2500      	movs	r5, #0
 80094e6:	e761      	b.n	80093ac <__aeabi_dadd+0x260>
 80094e8:	4cb4      	ldr	r4, [pc, #720]	; (80097bc <__aeabi_dadd+0x670>)
 80094ea:	45a1      	cmp	r9, r4
 80094ec:	d100      	bne.n	80094f0 <__aeabi_dadd+0x3a4>
 80094ee:	e0ad      	b.n	800964c <__aeabi_dadd+0x500>
 80094f0:	2480      	movs	r4, #128	; 0x80
 80094f2:	0424      	lsls	r4, r4, #16
 80094f4:	4320      	orrs	r0, r4
 80094f6:	4664      	mov	r4, ip
 80094f8:	2c38      	cmp	r4, #56	; 0x38
 80094fa:	dc3d      	bgt.n	8009578 <__aeabi_dadd+0x42c>
 80094fc:	4662      	mov	r2, ip
 80094fe:	2c1f      	cmp	r4, #31
 8009500:	dd00      	ble.n	8009504 <__aeabi_dadd+0x3b8>
 8009502:	e0b7      	b.n	8009674 <__aeabi_dadd+0x528>
 8009504:	2520      	movs	r5, #32
 8009506:	001e      	movs	r6, r3
 8009508:	1b2d      	subs	r5, r5, r4
 800950a:	0004      	movs	r4, r0
 800950c:	40ab      	lsls	r3, r5
 800950e:	40ac      	lsls	r4, r5
 8009510:	40d6      	lsrs	r6, r2
 8009512:	40d0      	lsrs	r0, r2
 8009514:	4642      	mov	r2, r8
 8009516:	1e5d      	subs	r5, r3, #1
 8009518:	41ab      	sbcs	r3, r5
 800951a:	4334      	orrs	r4, r6
 800951c:	1a12      	subs	r2, r2, r0
 800951e:	4690      	mov	r8, r2
 8009520:	4323      	orrs	r3, r4
 8009522:	e02c      	b.n	800957e <__aeabi_dadd+0x432>
 8009524:	0742      	lsls	r2, r0, #29
 8009526:	08db      	lsrs	r3, r3, #3
 8009528:	4313      	orrs	r3, r2
 800952a:	08c0      	lsrs	r0, r0, #3
 800952c:	e73b      	b.n	80093a6 <__aeabi_dadd+0x25a>
 800952e:	185c      	adds	r4, r3, r1
 8009530:	429c      	cmp	r4, r3
 8009532:	419b      	sbcs	r3, r3
 8009534:	4440      	add	r0, r8
 8009536:	425b      	negs	r3, r3
 8009538:	18c7      	adds	r7, r0, r3
 800953a:	2601      	movs	r6, #1
 800953c:	023b      	lsls	r3, r7, #8
 800953e:	d400      	bmi.n	8009542 <__aeabi_dadd+0x3f6>
 8009540:	e729      	b.n	8009396 <__aeabi_dadd+0x24a>
 8009542:	2602      	movs	r6, #2
 8009544:	4a9e      	ldr	r2, [pc, #632]	; (80097c0 <__aeabi_dadd+0x674>)
 8009546:	0863      	lsrs	r3, r4, #1
 8009548:	4017      	ands	r7, r2
 800954a:	2201      	movs	r2, #1
 800954c:	4014      	ands	r4, r2
 800954e:	431c      	orrs	r4, r3
 8009550:	07fb      	lsls	r3, r7, #31
 8009552:	431c      	orrs	r4, r3
 8009554:	087f      	lsrs	r7, r7, #1
 8009556:	e673      	b.n	8009240 <__aeabi_dadd+0xf4>
 8009558:	4644      	mov	r4, r8
 800955a:	3a20      	subs	r2, #32
 800955c:	40d4      	lsrs	r4, r2
 800955e:	4662      	mov	r2, ip
 8009560:	2a20      	cmp	r2, #32
 8009562:	d005      	beq.n	8009570 <__aeabi_dadd+0x424>
 8009564:	4667      	mov	r7, ip
 8009566:	2240      	movs	r2, #64	; 0x40
 8009568:	1bd2      	subs	r2, r2, r7
 800956a:	4647      	mov	r7, r8
 800956c:	4097      	lsls	r7, r2
 800956e:	4339      	orrs	r1, r7
 8009570:	1e4a      	subs	r2, r1, #1
 8009572:	4191      	sbcs	r1, r2
 8009574:	4321      	orrs	r1, r4
 8009576:	e635      	b.n	80091e4 <__aeabi_dadd+0x98>
 8009578:	4303      	orrs	r3, r0
 800957a:	1e58      	subs	r0, r3, #1
 800957c:	4183      	sbcs	r3, r0
 800957e:	1acc      	subs	r4, r1, r3
 8009580:	42a1      	cmp	r1, r4
 8009582:	41bf      	sbcs	r7, r7
 8009584:	4643      	mov	r3, r8
 8009586:	427f      	negs	r7, r7
 8009588:	4655      	mov	r5, sl
 800958a:	464e      	mov	r6, r9
 800958c:	1bdf      	subs	r7, r3, r7
 800958e:	e62e      	b.n	80091ee <__aeabi_dadd+0xa2>
 8009590:	0002      	movs	r2, r0
 8009592:	431a      	orrs	r2, r3
 8009594:	d100      	bne.n	8009598 <__aeabi_dadd+0x44c>
 8009596:	e0bd      	b.n	8009714 <__aeabi_dadd+0x5c8>
 8009598:	4662      	mov	r2, ip
 800959a:	4664      	mov	r4, ip
 800959c:	3a01      	subs	r2, #1
 800959e:	2c01      	cmp	r4, #1
 80095a0:	d100      	bne.n	80095a4 <__aeabi_dadd+0x458>
 80095a2:	e0e5      	b.n	8009770 <__aeabi_dadd+0x624>
 80095a4:	4c85      	ldr	r4, [pc, #532]	; (80097bc <__aeabi_dadd+0x670>)
 80095a6:	45a4      	cmp	ip, r4
 80095a8:	d058      	beq.n	800965c <__aeabi_dadd+0x510>
 80095aa:	4694      	mov	ip, r2
 80095ac:	e749      	b.n	8009442 <__aeabi_dadd+0x2f6>
 80095ae:	4664      	mov	r4, ip
 80095b0:	2220      	movs	r2, #32
 80095b2:	1b12      	subs	r2, r2, r4
 80095b4:	4644      	mov	r4, r8
 80095b6:	4094      	lsls	r4, r2
 80095b8:	000f      	movs	r7, r1
 80095ba:	46a1      	mov	r9, r4
 80095bc:	4664      	mov	r4, ip
 80095be:	4091      	lsls	r1, r2
 80095c0:	40e7      	lsrs	r7, r4
 80095c2:	464c      	mov	r4, r9
 80095c4:	1e4a      	subs	r2, r1, #1
 80095c6:	4191      	sbcs	r1, r2
 80095c8:	433c      	orrs	r4, r7
 80095ca:	4642      	mov	r2, r8
 80095cc:	430c      	orrs	r4, r1
 80095ce:	4661      	mov	r1, ip
 80095d0:	40ca      	lsrs	r2, r1
 80095d2:	1880      	adds	r0, r0, r2
 80095d4:	e6f4      	b.n	80093c0 <__aeabi_dadd+0x274>
 80095d6:	4c79      	ldr	r4, [pc, #484]	; (80097bc <__aeabi_dadd+0x670>)
 80095d8:	42a2      	cmp	r2, r4
 80095da:	d100      	bne.n	80095de <__aeabi_dadd+0x492>
 80095dc:	e6fd      	b.n	80093da <__aeabi_dadd+0x28e>
 80095de:	1859      	adds	r1, r3, r1
 80095e0:	4299      	cmp	r1, r3
 80095e2:	419b      	sbcs	r3, r3
 80095e4:	4440      	add	r0, r8
 80095e6:	425f      	negs	r7, r3
 80095e8:	19c7      	adds	r7, r0, r7
 80095ea:	07fc      	lsls	r4, r7, #31
 80095ec:	0849      	lsrs	r1, r1, #1
 80095ee:	0016      	movs	r6, r2
 80095f0:	430c      	orrs	r4, r1
 80095f2:	087f      	lsrs	r7, r7, #1
 80095f4:	e6cf      	b.n	8009396 <__aeabi_dadd+0x24a>
 80095f6:	1acc      	subs	r4, r1, r3
 80095f8:	42a1      	cmp	r1, r4
 80095fa:	41bf      	sbcs	r7, r7
 80095fc:	4643      	mov	r3, r8
 80095fe:	427f      	negs	r7, r7
 8009600:	1a18      	subs	r0, r3, r0
 8009602:	4655      	mov	r5, sl
 8009604:	1bc7      	subs	r7, r0, r7
 8009606:	e5f7      	b.n	80091f8 <__aeabi_dadd+0xac>
 8009608:	08c9      	lsrs	r1, r1, #3
 800960a:	077b      	lsls	r3, r7, #29
 800960c:	4655      	mov	r5, sl
 800960e:	430b      	orrs	r3, r1
 8009610:	08f8      	lsrs	r0, r7, #3
 8009612:	e6c8      	b.n	80093a6 <__aeabi_dadd+0x25a>
 8009614:	2c00      	cmp	r4, #0
 8009616:	d000      	beq.n	800961a <__aeabi_dadd+0x4ce>
 8009618:	e081      	b.n	800971e <__aeabi_dadd+0x5d2>
 800961a:	4643      	mov	r3, r8
 800961c:	430b      	orrs	r3, r1
 800961e:	d115      	bne.n	800964c <__aeabi_dadd+0x500>
 8009620:	2080      	movs	r0, #128	; 0x80
 8009622:	2500      	movs	r5, #0
 8009624:	0300      	lsls	r0, r0, #12
 8009626:	e6e3      	b.n	80093f0 <__aeabi_dadd+0x2a4>
 8009628:	1a5c      	subs	r4, r3, r1
 800962a:	42a3      	cmp	r3, r4
 800962c:	419b      	sbcs	r3, r3
 800962e:	1bc7      	subs	r7, r0, r7
 8009630:	425b      	negs	r3, r3
 8009632:	2601      	movs	r6, #1
 8009634:	1aff      	subs	r7, r7, r3
 8009636:	e5da      	b.n	80091ee <__aeabi_dadd+0xa2>
 8009638:	0742      	lsls	r2, r0, #29
 800963a:	08db      	lsrs	r3, r3, #3
 800963c:	4313      	orrs	r3, r2
 800963e:	08c0      	lsrs	r0, r0, #3
 8009640:	e6d2      	b.n	80093e8 <__aeabi_dadd+0x29c>
 8009642:	0742      	lsls	r2, r0, #29
 8009644:	08db      	lsrs	r3, r3, #3
 8009646:	4313      	orrs	r3, r2
 8009648:	08c0      	lsrs	r0, r0, #3
 800964a:	e6ac      	b.n	80093a6 <__aeabi_dadd+0x25a>
 800964c:	4643      	mov	r3, r8
 800964e:	4642      	mov	r2, r8
 8009650:	08c9      	lsrs	r1, r1, #3
 8009652:	075b      	lsls	r3, r3, #29
 8009654:	4655      	mov	r5, sl
 8009656:	430b      	orrs	r3, r1
 8009658:	08d0      	lsrs	r0, r2, #3
 800965a:	e6c5      	b.n	80093e8 <__aeabi_dadd+0x29c>
 800965c:	4643      	mov	r3, r8
 800965e:	4642      	mov	r2, r8
 8009660:	075b      	lsls	r3, r3, #29
 8009662:	08c9      	lsrs	r1, r1, #3
 8009664:	430b      	orrs	r3, r1
 8009666:	08d0      	lsrs	r0, r2, #3
 8009668:	e6be      	b.n	80093e8 <__aeabi_dadd+0x29c>
 800966a:	4303      	orrs	r3, r0
 800966c:	001c      	movs	r4, r3
 800966e:	1e63      	subs	r3, r4, #1
 8009670:	419c      	sbcs	r4, r3
 8009672:	e6fc      	b.n	800946e <__aeabi_dadd+0x322>
 8009674:	0002      	movs	r2, r0
 8009676:	3c20      	subs	r4, #32
 8009678:	40e2      	lsrs	r2, r4
 800967a:	0014      	movs	r4, r2
 800967c:	4662      	mov	r2, ip
 800967e:	2a20      	cmp	r2, #32
 8009680:	d003      	beq.n	800968a <__aeabi_dadd+0x53e>
 8009682:	2540      	movs	r5, #64	; 0x40
 8009684:	1aad      	subs	r5, r5, r2
 8009686:	40a8      	lsls	r0, r5
 8009688:	4303      	orrs	r3, r0
 800968a:	1e58      	subs	r0, r3, #1
 800968c:	4183      	sbcs	r3, r0
 800968e:	4323      	orrs	r3, r4
 8009690:	e775      	b.n	800957e <__aeabi_dadd+0x432>
 8009692:	2a00      	cmp	r2, #0
 8009694:	d0e2      	beq.n	800965c <__aeabi_dadd+0x510>
 8009696:	003a      	movs	r2, r7
 8009698:	430a      	orrs	r2, r1
 800969a:	d0cd      	beq.n	8009638 <__aeabi_dadd+0x4ec>
 800969c:	0742      	lsls	r2, r0, #29
 800969e:	08db      	lsrs	r3, r3, #3
 80096a0:	4313      	orrs	r3, r2
 80096a2:	2280      	movs	r2, #128	; 0x80
 80096a4:	08c0      	lsrs	r0, r0, #3
 80096a6:	0312      	lsls	r2, r2, #12
 80096a8:	4210      	tst	r0, r2
 80096aa:	d006      	beq.n	80096ba <__aeabi_dadd+0x56e>
 80096ac:	08fc      	lsrs	r4, r7, #3
 80096ae:	4214      	tst	r4, r2
 80096b0:	d103      	bne.n	80096ba <__aeabi_dadd+0x56e>
 80096b2:	0020      	movs	r0, r4
 80096b4:	08cb      	lsrs	r3, r1, #3
 80096b6:	077a      	lsls	r2, r7, #29
 80096b8:	4313      	orrs	r3, r2
 80096ba:	0f5a      	lsrs	r2, r3, #29
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	0752      	lsls	r2, r2, #29
 80096c0:	08db      	lsrs	r3, r3, #3
 80096c2:	4313      	orrs	r3, r2
 80096c4:	e690      	b.n	80093e8 <__aeabi_dadd+0x29c>
 80096c6:	4643      	mov	r3, r8
 80096c8:	430b      	orrs	r3, r1
 80096ca:	d100      	bne.n	80096ce <__aeabi_dadd+0x582>
 80096cc:	e709      	b.n	80094e2 <__aeabi_dadd+0x396>
 80096ce:	4643      	mov	r3, r8
 80096d0:	4642      	mov	r2, r8
 80096d2:	08c9      	lsrs	r1, r1, #3
 80096d4:	075b      	lsls	r3, r3, #29
 80096d6:	4655      	mov	r5, sl
 80096d8:	430b      	orrs	r3, r1
 80096da:	08d0      	lsrs	r0, r2, #3
 80096dc:	e666      	b.n	80093ac <__aeabi_dadd+0x260>
 80096de:	1acc      	subs	r4, r1, r3
 80096e0:	42a1      	cmp	r1, r4
 80096e2:	4189      	sbcs	r1, r1
 80096e4:	1a3f      	subs	r7, r7, r0
 80096e6:	4249      	negs	r1, r1
 80096e8:	4655      	mov	r5, sl
 80096ea:	2601      	movs	r6, #1
 80096ec:	1a7f      	subs	r7, r7, r1
 80096ee:	e57e      	b.n	80091ee <__aeabi_dadd+0xa2>
 80096f0:	4642      	mov	r2, r8
 80096f2:	1a5c      	subs	r4, r3, r1
 80096f4:	1a87      	subs	r7, r0, r2
 80096f6:	42a3      	cmp	r3, r4
 80096f8:	4192      	sbcs	r2, r2
 80096fa:	4252      	negs	r2, r2
 80096fc:	1abf      	subs	r7, r7, r2
 80096fe:	023a      	lsls	r2, r7, #8
 8009700:	d53d      	bpl.n	800977e <__aeabi_dadd+0x632>
 8009702:	1acc      	subs	r4, r1, r3
 8009704:	42a1      	cmp	r1, r4
 8009706:	4189      	sbcs	r1, r1
 8009708:	4643      	mov	r3, r8
 800970a:	4249      	negs	r1, r1
 800970c:	1a1f      	subs	r7, r3, r0
 800970e:	4655      	mov	r5, sl
 8009710:	1a7f      	subs	r7, r7, r1
 8009712:	e595      	b.n	8009240 <__aeabi_dadd+0xf4>
 8009714:	077b      	lsls	r3, r7, #29
 8009716:	08c9      	lsrs	r1, r1, #3
 8009718:	430b      	orrs	r3, r1
 800971a:	08f8      	lsrs	r0, r7, #3
 800971c:	e643      	b.n	80093a6 <__aeabi_dadd+0x25a>
 800971e:	4644      	mov	r4, r8
 8009720:	08db      	lsrs	r3, r3, #3
 8009722:	430c      	orrs	r4, r1
 8009724:	d130      	bne.n	8009788 <__aeabi_dadd+0x63c>
 8009726:	0742      	lsls	r2, r0, #29
 8009728:	4313      	orrs	r3, r2
 800972a:	08c0      	lsrs	r0, r0, #3
 800972c:	e65c      	b.n	80093e8 <__aeabi_dadd+0x29c>
 800972e:	077b      	lsls	r3, r7, #29
 8009730:	08c9      	lsrs	r1, r1, #3
 8009732:	430b      	orrs	r3, r1
 8009734:	08f8      	lsrs	r0, r7, #3
 8009736:	e639      	b.n	80093ac <__aeabi_dadd+0x260>
 8009738:	185c      	adds	r4, r3, r1
 800973a:	429c      	cmp	r4, r3
 800973c:	419b      	sbcs	r3, r3
 800973e:	4440      	add	r0, r8
 8009740:	425b      	negs	r3, r3
 8009742:	18c7      	adds	r7, r0, r3
 8009744:	023b      	lsls	r3, r7, #8
 8009746:	d400      	bmi.n	800974a <__aeabi_dadd+0x5fe>
 8009748:	e625      	b.n	8009396 <__aeabi_dadd+0x24a>
 800974a:	4b1d      	ldr	r3, [pc, #116]	; (80097c0 <__aeabi_dadd+0x674>)
 800974c:	2601      	movs	r6, #1
 800974e:	401f      	ands	r7, r3
 8009750:	e621      	b.n	8009396 <__aeabi_dadd+0x24a>
 8009752:	0004      	movs	r4, r0
 8009754:	3a20      	subs	r2, #32
 8009756:	40d4      	lsrs	r4, r2
 8009758:	4662      	mov	r2, ip
 800975a:	2a20      	cmp	r2, #32
 800975c:	d004      	beq.n	8009768 <__aeabi_dadd+0x61c>
 800975e:	2240      	movs	r2, #64	; 0x40
 8009760:	4666      	mov	r6, ip
 8009762:	1b92      	subs	r2, r2, r6
 8009764:	4090      	lsls	r0, r2
 8009766:	4303      	orrs	r3, r0
 8009768:	1e5a      	subs	r2, r3, #1
 800976a:	4193      	sbcs	r3, r2
 800976c:	431c      	orrs	r4, r3
 800976e:	e67e      	b.n	800946e <__aeabi_dadd+0x322>
 8009770:	185c      	adds	r4, r3, r1
 8009772:	428c      	cmp	r4, r1
 8009774:	4189      	sbcs	r1, r1
 8009776:	4440      	add	r0, r8
 8009778:	4249      	negs	r1, r1
 800977a:	1847      	adds	r7, r0, r1
 800977c:	e6dd      	b.n	800953a <__aeabi_dadd+0x3ee>
 800977e:	0023      	movs	r3, r4
 8009780:	433b      	orrs	r3, r7
 8009782:	d100      	bne.n	8009786 <__aeabi_dadd+0x63a>
 8009784:	e6ad      	b.n	80094e2 <__aeabi_dadd+0x396>
 8009786:	e606      	b.n	8009396 <__aeabi_dadd+0x24a>
 8009788:	0744      	lsls	r4, r0, #29
 800978a:	4323      	orrs	r3, r4
 800978c:	2480      	movs	r4, #128	; 0x80
 800978e:	08c0      	lsrs	r0, r0, #3
 8009790:	0324      	lsls	r4, r4, #12
 8009792:	4220      	tst	r0, r4
 8009794:	d008      	beq.n	80097a8 <__aeabi_dadd+0x65c>
 8009796:	4642      	mov	r2, r8
 8009798:	08d6      	lsrs	r6, r2, #3
 800979a:	4226      	tst	r6, r4
 800979c:	d104      	bne.n	80097a8 <__aeabi_dadd+0x65c>
 800979e:	4655      	mov	r5, sl
 80097a0:	0030      	movs	r0, r6
 80097a2:	08cb      	lsrs	r3, r1, #3
 80097a4:	0751      	lsls	r1, r2, #29
 80097a6:	430b      	orrs	r3, r1
 80097a8:	0f5a      	lsrs	r2, r3, #29
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	08db      	lsrs	r3, r3, #3
 80097ae:	0752      	lsls	r2, r2, #29
 80097b0:	4313      	orrs	r3, r2
 80097b2:	e619      	b.n	80093e8 <__aeabi_dadd+0x29c>
 80097b4:	2300      	movs	r3, #0
 80097b6:	4a01      	ldr	r2, [pc, #4]	; (80097bc <__aeabi_dadd+0x670>)
 80097b8:	001f      	movs	r7, r3
 80097ba:	e55e      	b.n	800927a <__aeabi_dadd+0x12e>
 80097bc:	000007ff 	.word	0x000007ff
 80097c0:	ff7fffff 	.word	0xff7fffff

080097c4 <__aeabi_ddiv>:
 80097c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097c6:	4657      	mov	r7, sl
 80097c8:	464e      	mov	r6, r9
 80097ca:	4645      	mov	r5, r8
 80097cc:	46de      	mov	lr, fp
 80097ce:	b5e0      	push	{r5, r6, r7, lr}
 80097d0:	4681      	mov	r9, r0
 80097d2:	0005      	movs	r5, r0
 80097d4:	030c      	lsls	r4, r1, #12
 80097d6:	0048      	lsls	r0, r1, #1
 80097d8:	4692      	mov	sl, r2
 80097da:	001f      	movs	r7, r3
 80097dc:	b085      	sub	sp, #20
 80097de:	0b24      	lsrs	r4, r4, #12
 80097e0:	0d40      	lsrs	r0, r0, #21
 80097e2:	0fce      	lsrs	r6, r1, #31
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d100      	bne.n	80097ea <__aeabi_ddiv+0x26>
 80097e8:	e156      	b.n	8009a98 <__aeabi_ddiv+0x2d4>
 80097ea:	4bd4      	ldr	r3, [pc, #848]	; (8009b3c <__aeabi_ddiv+0x378>)
 80097ec:	4298      	cmp	r0, r3
 80097ee:	d100      	bne.n	80097f2 <__aeabi_ddiv+0x2e>
 80097f0:	e172      	b.n	8009ad8 <__aeabi_ddiv+0x314>
 80097f2:	0f6b      	lsrs	r3, r5, #29
 80097f4:	00e4      	lsls	r4, r4, #3
 80097f6:	431c      	orrs	r4, r3
 80097f8:	2380      	movs	r3, #128	; 0x80
 80097fa:	041b      	lsls	r3, r3, #16
 80097fc:	4323      	orrs	r3, r4
 80097fe:	4698      	mov	r8, r3
 8009800:	4bcf      	ldr	r3, [pc, #828]	; (8009b40 <__aeabi_ddiv+0x37c>)
 8009802:	00ed      	lsls	r5, r5, #3
 8009804:	469b      	mov	fp, r3
 8009806:	2300      	movs	r3, #0
 8009808:	4699      	mov	r9, r3
 800980a:	4483      	add	fp, r0
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	033c      	lsls	r4, r7, #12
 8009810:	007b      	lsls	r3, r7, #1
 8009812:	4650      	mov	r0, sl
 8009814:	0b24      	lsrs	r4, r4, #12
 8009816:	0d5b      	lsrs	r3, r3, #21
 8009818:	0fff      	lsrs	r7, r7, #31
 800981a:	2b00      	cmp	r3, #0
 800981c:	d100      	bne.n	8009820 <__aeabi_ddiv+0x5c>
 800981e:	e11f      	b.n	8009a60 <__aeabi_ddiv+0x29c>
 8009820:	4ac6      	ldr	r2, [pc, #792]	; (8009b3c <__aeabi_ddiv+0x378>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d100      	bne.n	8009828 <__aeabi_ddiv+0x64>
 8009826:	e162      	b.n	8009aee <__aeabi_ddiv+0x32a>
 8009828:	49c5      	ldr	r1, [pc, #788]	; (8009b40 <__aeabi_ddiv+0x37c>)
 800982a:	0f42      	lsrs	r2, r0, #29
 800982c:	468c      	mov	ip, r1
 800982e:	00e4      	lsls	r4, r4, #3
 8009830:	4659      	mov	r1, fp
 8009832:	4314      	orrs	r4, r2
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	4463      	add	r3, ip
 8009838:	0412      	lsls	r2, r2, #16
 800983a:	1acb      	subs	r3, r1, r3
 800983c:	4314      	orrs	r4, r2
 800983e:	469b      	mov	fp, r3
 8009840:	00c2      	lsls	r2, r0, #3
 8009842:	2000      	movs	r0, #0
 8009844:	0033      	movs	r3, r6
 8009846:	407b      	eors	r3, r7
 8009848:	469a      	mov	sl, r3
 800984a:	464b      	mov	r3, r9
 800984c:	2b0f      	cmp	r3, #15
 800984e:	d827      	bhi.n	80098a0 <__aeabi_ddiv+0xdc>
 8009850:	49bc      	ldr	r1, [pc, #752]	; (8009b44 <__aeabi_ddiv+0x380>)
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	58cb      	ldr	r3, [r1, r3]
 8009856:	469f      	mov	pc, r3
 8009858:	46b2      	mov	sl, r6
 800985a:	9b00      	ldr	r3, [sp, #0]
 800985c:	2b02      	cmp	r3, #2
 800985e:	d016      	beq.n	800988e <__aeabi_ddiv+0xca>
 8009860:	2b03      	cmp	r3, #3
 8009862:	d100      	bne.n	8009866 <__aeabi_ddiv+0xa2>
 8009864:	e28e      	b.n	8009d84 <__aeabi_ddiv+0x5c0>
 8009866:	2b01      	cmp	r3, #1
 8009868:	d000      	beq.n	800986c <__aeabi_ddiv+0xa8>
 800986a:	e0d9      	b.n	8009a20 <__aeabi_ddiv+0x25c>
 800986c:	2300      	movs	r3, #0
 800986e:	2400      	movs	r4, #0
 8009870:	2500      	movs	r5, #0
 8009872:	4652      	mov	r2, sl
 8009874:	051b      	lsls	r3, r3, #20
 8009876:	4323      	orrs	r3, r4
 8009878:	07d2      	lsls	r2, r2, #31
 800987a:	4313      	orrs	r3, r2
 800987c:	0028      	movs	r0, r5
 800987e:	0019      	movs	r1, r3
 8009880:	b005      	add	sp, #20
 8009882:	bcf0      	pop	{r4, r5, r6, r7}
 8009884:	46bb      	mov	fp, r7
 8009886:	46b2      	mov	sl, r6
 8009888:	46a9      	mov	r9, r5
 800988a:	46a0      	mov	r8, r4
 800988c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988e:	2400      	movs	r4, #0
 8009890:	2500      	movs	r5, #0
 8009892:	4baa      	ldr	r3, [pc, #680]	; (8009b3c <__aeabi_ddiv+0x378>)
 8009894:	e7ed      	b.n	8009872 <__aeabi_ddiv+0xae>
 8009896:	46ba      	mov	sl, r7
 8009898:	46a0      	mov	r8, r4
 800989a:	0015      	movs	r5, r2
 800989c:	9000      	str	r0, [sp, #0]
 800989e:	e7dc      	b.n	800985a <__aeabi_ddiv+0x96>
 80098a0:	4544      	cmp	r4, r8
 80098a2:	d200      	bcs.n	80098a6 <__aeabi_ddiv+0xe2>
 80098a4:	e1c7      	b.n	8009c36 <__aeabi_ddiv+0x472>
 80098a6:	d100      	bne.n	80098aa <__aeabi_ddiv+0xe6>
 80098a8:	e1c2      	b.n	8009c30 <__aeabi_ddiv+0x46c>
 80098aa:	2301      	movs	r3, #1
 80098ac:	425b      	negs	r3, r3
 80098ae:	469c      	mov	ip, r3
 80098b0:	002e      	movs	r6, r5
 80098b2:	4640      	mov	r0, r8
 80098b4:	2500      	movs	r5, #0
 80098b6:	44e3      	add	fp, ip
 80098b8:	0223      	lsls	r3, r4, #8
 80098ba:	0e14      	lsrs	r4, r2, #24
 80098bc:	431c      	orrs	r4, r3
 80098be:	0c1b      	lsrs	r3, r3, #16
 80098c0:	4699      	mov	r9, r3
 80098c2:	0423      	lsls	r3, r4, #16
 80098c4:	0c1f      	lsrs	r7, r3, #16
 80098c6:	0212      	lsls	r2, r2, #8
 80098c8:	4649      	mov	r1, r9
 80098ca:	9200      	str	r2, [sp, #0]
 80098cc:	9701      	str	r7, [sp, #4]
 80098ce:	f7fe fc9f 	bl	8008210 <__aeabi_uidivmod>
 80098d2:	0002      	movs	r2, r0
 80098d4:	437a      	muls	r2, r7
 80098d6:	040b      	lsls	r3, r1, #16
 80098d8:	0c31      	lsrs	r1, r6, #16
 80098da:	4680      	mov	r8, r0
 80098dc:	4319      	orrs	r1, r3
 80098de:	428a      	cmp	r2, r1
 80098e0:	d907      	bls.n	80098f2 <__aeabi_ddiv+0x12e>
 80098e2:	2301      	movs	r3, #1
 80098e4:	425b      	negs	r3, r3
 80098e6:	469c      	mov	ip, r3
 80098e8:	1909      	adds	r1, r1, r4
 80098ea:	44e0      	add	r8, ip
 80098ec:	428c      	cmp	r4, r1
 80098ee:	d800      	bhi.n	80098f2 <__aeabi_ddiv+0x12e>
 80098f0:	e207      	b.n	8009d02 <__aeabi_ddiv+0x53e>
 80098f2:	1a88      	subs	r0, r1, r2
 80098f4:	4649      	mov	r1, r9
 80098f6:	f7fe fc8b 	bl	8008210 <__aeabi_uidivmod>
 80098fa:	0409      	lsls	r1, r1, #16
 80098fc:	468c      	mov	ip, r1
 80098fe:	0431      	lsls	r1, r6, #16
 8009900:	4666      	mov	r6, ip
 8009902:	9a01      	ldr	r2, [sp, #4]
 8009904:	0c09      	lsrs	r1, r1, #16
 8009906:	4342      	muls	r2, r0
 8009908:	0003      	movs	r3, r0
 800990a:	4331      	orrs	r1, r6
 800990c:	428a      	cmp	r2, r1
 800990e:	d904      	bls.n	800991a <__aeabi_ddiv+0x156>
 8009910:	1909      	adds	r1, r1, r4
 8009912:	3b01      	subs	r3, #1
 8009914:	428c      	cmp	r4, r1
 8009916:	d800      	bhi.n	800991a <__aeabi_ddiv+0x156>
 8009918:	e1ed      	b.n	8009cf6 <__aeabi_ddiv+0x532>
 800991a:	1a88      	subs	r0, r1, r2
 800991c:	4642      	mov	r2, r8
 800991e:	0412      	lsls	r2, r2, #16
 8009920:	431a      	orrs	r2, r3
 8009922:	4690      	mov	r8, r2
 8009924:	4641      	mov	r1, r8
 8009926:	9b00      	ldr	r3, [sp, #0]
 8009928:	040e      	lsls	r6, r1, #16
 800992a:	0c1b      	lsrs	r3, r3, #16
 800992c:	001f      	movs	r7, r3
 800992e:	9302      	str	r3, [sp, #8]
 8009930:	9b00      	ldr	r3, [sp, #0]
 8009932:	0c36      	lsrs	r6, r6, #16
 8009934:	041b      	lsls	r3, r3, #16
 8009936:	0c19      	lsrs	r1, r3, #16
 8009938:	000b      	movs	r3, r1
 800993a:	4373      	muls	r3, r6
 800993c:	0c12      	lsrs	r2, r2, #16
 800993e:	437e      	muls	r6, r7
 8009940:	9103      	str	r1, [sp, #12]
 8009942:	4351      	muls	r1, r2
 8009944:	437a      	muls	r2, r7
 8009946:	0c1f      	lsrs	r7, r3, #16
 8009948:	46bc      	mov	ip, r7
 800994a:	1876      	adds	r6, r6, r1
 800994c:	4466      	add	r6, ip
 800994e:	42b1      	cmp	r1, r6
 8009950:	d903      	bls.n	800995a <__aeabi_ddiv+0x196>
 8009952:	2180      	movs	r1, #128	; 0x80
 8009954:	0249      	lsls	r1, r1, #9
 8009956:	468c      	mov	ip, r1
 8009958:	4462      	add	r2, ip
 800995a:	0c31      	lsrs	r1, r6, #16
 800995c:	188a      	adds	r2, r1, r2
 800995e:	0431      	lsls	r1, r6, #16
 8009960:	041e      	lsls	r6, r3, #16
 8009962:	0c36      	lsrs	r6, r6, #16
 8009964:	198e      	adds	r6, r1, r6
 8009966:	4290      	cmp	r0, r2
 8009968:	d302      	bcc.n	8009970 <__aeabi_ddiv+0x1ac>
 800996a:	d112      	bne.n	8009992 <__aeabi_ddiv+0x1ce>
 800996c:	42b5      	cmp	r5, r6
 800996e:	d210      	bcs.n	8009992 <__aeabi_ddiv+0x1ce>
 8009970:	4643      	mov	r3, r8
 8009972:	1e59      	subs	r1, r3, #1
 8009974:	9b00      	ldr	r3, [sp, #0]
 8009976:	469c      	mov	ip, r3
 8009978:	4465      	add	r5, ip
 800997a:	001f      	movs	r7, r3
 800997c:	429d      	cmp	r5, r3
 800997e:	419b      	sbcs	r3, r3
 8009980:	425b      	negs	r3, r3
 8009982:	191b      	adds	r3, r3, r4
 8009984:	18c0      	adds	r0, r0, r3
 8009986:	4284      	cmp	r4, r0
 8009988:	d200      	bcs.n	800998c <__aeabi_ddiv+0x1c8>
 800998a:	e1a0      	b.n	8009cce <__aeabi_ddiv+0x50a>
 800998c:	d100      	bne.n	8009990 <__aeabi_ddiv+0x1cc>
 800998e:	e19b      	b.n	8009cc8 <__aeabi_ddiv+0x504>
 8009990:	4688      	mov	r8, r1
 8009992:	1bae      	subs	r6, r5, r6
 8009994:	42b5      	cmp	r5, r6
 8009996:	41ad      	sbcs	r5, r5
 8009998:	1a80      	subs	r0, r0, r2
 800999a:	426d      	negs	r5, r5
 800999c:	1b40      	subs	r0, r0, r5
 800999e:	4284      	cmp	r4, r0
 80099a0:	d100      	bne.n	80099a4 <__aeabi_ddiv+0x1e0>
 80099a2:	e1d5      	b.n	8009d50 <__aeabi_ddiv+0x58c>
 80099a4:	4649      	mov	r1, r9
 80099a6:	f7fe fc33 	bl	8008210 <__aeabi_uidivmod>
 80099aa:	9a01      	ldr	r2, [sp, #4]
 80099ac:	040b      	lsls	r3, r1, #16
 80099ae:	4342      	muls	r2, r0
 80099b0:	0c31      	lsrs	r1, r6, #16
 80099b2:	0005      	movs	r5, r0
 80099b4:	4319      	orrs	r1, r3
 80099b6:	428a      	cmp	r2, r1
 80099b8:	d900      	bls.n	80099bc <__aeabi_ddiv+0x1f8>
 80099ba:	e16c      	b.n	8009c96 <__aeabi_ddiv+0x4d2>
 80099bc:	1a88      	subs	r0, r1, r2
 80099be:	4649      	mov	r1, r9
 80099c0:	f7fe fc26 	bl	8008210 <__aeabi_uidivmod>
 80099c4:	9a01      	ldr	r2, [sp, #4]
 80099c6:	0436      	lsls	r6, r6, #16
 80099c8:	4342      	muls	r2, r0
 80099ca:	0409      	lsls	r1, r1, #16
 80099cc:	0c36      	lsrs	r6, r6, #16
 80099ce:	0003      	movs	r3, r0
 80099d0:	430e      	orrs	r6, r1
 80099d2:	42b2      	cmp	r2, r6
 80099d4:	d900      	bls.n	80099d8 <__aeabi_ddiv+0x214>
 80099d6:	e153      	b.n	8009c80 <__aeabi_ddiv+0x4bc>
 80099d8:	9803      	ldr	r0, [sp, #12]
 80099da:	1ab6      	subs	r6, r6, r2
 80099dc:	0002      	movs	r2, r0
 80099de:	042d      	lsls	r5, r5, #16
 80099e0:	431d      	orrs	r5, r3
 80099e2:	9f02      	ldr	r7, [sp, #8]
 80099e4:	042b      	lsls	r3, r5, #16
 80099e6:	0c1b      	lsrs	r3, r3, #16
 80099e8:	435a      	muls	r2, r3
 80099ea:	437b      	muls	r3, r7
 80099ec:	469c      	mov	ip, r3
 80099ee:	0c29      	lsrs	r1, r5, #16
 80099f0:	4348      	muls	r0, r1
 80099f2:	0c13      	lsrs	r3, r2, #16
 80099f4:	4484      	add	ip, r0
 80099f6:	4463      	add	r3, ip
 80099f8:	4379      	muls	r1, r7
 80099fa:	4298      	cmp	r0, r3
 80099fc:	d903      	bls.n	8009a06 <__aeabi_ddiv+0x242>
 80099fe:	2080      	movs	r0, #128	; 0x80
 8009a00:	0240      	lsls	r0, r0, #9
 8009a02:	4684      	mov	ip, r0
 8009a04:	4461      	add	r1, ip
 8009a06:	0c18      	lsrs	r0, r3, #16
 8009a08:	0412      	lsls	r2, r2, #16
 8009a0a:	041b      	lsls	r3, r3, #16
 8009a0c:	0c12      	lsrs	r2, r2, #16
 8009a0e:	1841      	adds	r1, r0, r1
 8009a10:	189b      	adds	r3, r3, r2
 8009a12:	428e      	cmp	r6, r1
 8009a14:	d200      	bcs.n	8009a18 <__aeabi_ddiv+0x254>
 8009a16:	e0ff      	b.n	8009c18 <__aeabi_ddiv+0x454>
 8009a18:	d100      	bne.n	8009a1c <__aeabi_ddiv+0x258>
 8009a1a:	e0fa      	b.n	8009c12 <__aeabi_ddiv+0x44e>
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	431d      	orrs	r5, r3
 8009a20:	4a49      	ldr	r2, [pc, #292]	; (8009b48 <__aeabi_ddiv+0x384>)
 8009a22:	445a      	add	r2, fp
 8009a24:	2a00      	cmp	r2, #0
 8009a26:	dc00      	bgt.n	8009a2a <__aeabi_ddiv+0x266>
 8009a28:	e0aa      	b.n	8009b80 <__aeabi_ddiv+0x3bc>
 8009a2a:	076b      	lsls	r3, r5, #29
 8009a2c:	d000      	beq.n	8009a30 <__aeabi_ddiv+0x26c>
 8009a2e:	e13d      	b.n	8009cac <__aeabi_ddiv+0x4e8>
 8009a30:	08ed      	lsrs	r5, r5, #3
 8009a32:	4643      	mov	r3, r8
 8009a34:	01db      	lsls	r3, r3, #7
 8009a36:	d506      	bpl.n	8009a46 <__aeabi_ddiv+0x282>
 8009a38:	4642      	mov	r2, r8
 8009a3a:	4b44      	ldr	r3, [pc, #272]	; (8009b4c <__aeabi_ddiv+0x388>)
 8009a3c:	401a      	ands	r2, r3
 8009a3e:	4690      	mov	r8, r2
 8009a40:	2280      	movs	r2, #128	; 0x80
 8009a42:	00d2      	lsls	r2, r2, #3
 8009a44:	445a      	add	r2, fp
 8009a46:	4b42      	ldr	r3, [pc, #264]	; (8009b50 <__aeabi_ddiv+0x38c>)
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	dd00      	ble.n	8009a4e <__aeabi_ddiv+0x28a>
 8009a4c:	e71f      	b.n	800988e <__aeabi_ddiv+0xca>
 8009a4e:	4643      	mov	r3, r8
 8009a50:	075b      	lsls	r3, r3, #29
 8009a52:	431d      	orrs	r5, r3
 8009a54:	4643      	mov	r3, r8
 8009a56:	0552      	lsls	r2, r2, #21
 8009a58:	025c      	lsls	r4, r3, #9
 8009a5a:	0b24      	lsrs	r4, r4, #12
 8009a5c:	0d53      	lsrs	r3, r2, #21
 8009a5e:	e708      	b.n	8009872 <__aeabi_ddiv+0xae>
 8009a60:	4652      	mov	r2, sl
 8009a62:	4322      	orrs	r2, r4
 8009a64:	d100      	bne.n	8009a68 <__aeabi_ddiv+0x2a4>
 8009a66:	e07b      	b.n	8009b60 <__aeabi_ddiv+0x39c>
 8009a68:	2c00      	cmp	r4, #0
 8009a6a:	d100      	bne.n	8009a6e <__aeabi_ddiv+0x2aa>
 8009a6c:	e0fa      	b.n	8009c64 <__aeabi_ddiv+0x4a0>
 8009a6e:	0020      	movs	r0, r4
 8009a70:	f001 f9da 	bl	800ae28 <__clzsi2>
 8009a74:	0002      	movs	r2, r0
 8009a76:	3a0b      	subs	r2, #11
 8009a78:	231d      	movs	r3, #29
 8009a7a:	0001      	movs	r1, r0
 8009a7c:	1a9b      	subs	r3, r3, r2
 8009a7e:	4652      	mov	r2, sl
 8009a80:	3908      	subs	r1, #8
 8009a82:	40da      	lsrs	r2, r3
 8009a84:	408c      	lsls	r4, r1
 8009a86:	4314      	orrs	r4, r2
 8009a88:	4652      	mov	r2, sl
 8009a8a:	408a      	lsls	r2, r1
 8009a8c:	4b31      	ldr	r3, [pc, #196]	; (8009b54 <__aeabi_ddiv+0x390>)
 8009a8e:	4458      	add	r0, fp
 8009a90:	469b      	mov	fp, r3
 8009a92:	4483      	add	fp, r0
 8009a94:	2000      	movs	r0, #0
 8009a96:	e6d5      	b.n	8009844 <__aeabi_ddiv+0x80>
 8009a98:	464b      	mov	r3, r9
 8009a9a:	4323      	orrs	r3, r4
 8009a9c:	4698      	mov	r8, r3
 8009a9e:	d044      	beq.n	8009b2a <__aeabi_ddiv+0x366>
 8009aa0:	2c00      	cmp	r4, #0
 8009aa2:	d100      	bne.n	8009aa6 <__aeabi_ddiv+0x2e2>
 8009aa4:	e0ce      	b.n	8009c44 <__aeabi_ddiv+0x480>
 8009aa6:	0020      	movs	r0, r4
 8009aa8:	f001 f9be 	bl	800ae28 <__clzsi2>
 8009aac:	0001      	movs	r1, r0
 8009aae:	0002      	movs	r2, r0
 8009ab0:	390b      	subs	r1, #11
 8009ab2:	231d      	movs	r3, #29
 8009ab4:	1a5b      	subs	r3, r3, r1
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	0010      	movs	r0, r2
 8009aba:	40d9      	lsrs	r1, r3
 8009abc:	3808      	subs	r0, #8
 8009abe:	4084      	lsls	r4, r0
 8009ac0:	000b      	movs	r3, r1
 8009ac2:	464d      	mov	r5, r9
 8009ac4:	4323      	orrs	r3, r4
 8009ac6:	4698      	mov	r8, r3
 8009ac8:	4085      	lsls	r5, r0
 8009aca:	4823      	ldr	r0, [pc, #140]	; (8009b58 <__aeabi_ddiv+0x394>)
 8009acc:	1a83      	subs	r3, r0, r2
 8009ace:	469b      	mov	fp, r3
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	4699      	mov	r9, r3
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	e69a      	b.n	800980e <__aeabi_ddiv+0x4a>
 8009ad8:	464b      	mov	r3, r9
 8009ada:	4323      	orrs	r3, r4
 8009adc:	4698      	mov	r8, r3
 8009ade:	d11d      	bne.n	8009b1c <__aeabi_ddiv+0x358>
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	4699      	mov	r9, r3
 8009ae4:	3b06      	subs	r3, #6
 8009ae6:	2500      	movs	r5, #0
 8009ae8:	4683      	mov	fp, r0
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	e68f      	b.n	800980e <__aeabi_ddiv+0x4a>
 8009aee:	4652      	mov	r2, sl
 8009af0:	4322      	orrs	r2, r4
 8009af2:	d109      	bne.n	8009b08 <__aeabi_ddiv+0x344>
 8009af4:	2302      	movs	r3, #2
 8009af6:	4649      	mov	r1, r9
 8009af8:	4319      	orrs	r1, r3
 8009afa:	4b18      	ldr	r3, [pc, #96]	; (8009b5c <__aeabi_ddiv+0x398>)
 8009afc:	4689      	mov	r9, r1
 8009afe:	469c      	mov	ip, r3
 8009b00:	2400      	movs	r4, #0
 8009b02:	2002      	movs	r0, #2
 8009b04:	44e3      	add	fp, ip
 8009b06:	e69d      	b.n	8009844 <__aeabi_ddiv+0x80>
 8009b08:	2303      	movs	r3, #3
 8009b0a:	464a      	mov	r2, r9
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	4b13      	ldr	r3, [pc, #76]	; (8009b5c <__aeabi_ddiv+0x398>)
 8009b10:	4691      	mov	r9, r2
 8009b12:	469c      	mov	ip, r3
 8009b14:	4652      	mov	r2, sl
 8009b16:	2003      	movs	r0, #3
 8009b18:	44e3      	add	fp, ip
 8009b1a:	e693      	b.n	8009844 <__aeabi_ddiv+0x80>
 8009b1c:	230c      	movs	r3, #12
 8009b1e:	4699      	mov	r9, r3
 8009b20:	3b09      	subs	r3, #9
 8009b22:	46a0      	mov	r8, r4
 8009b24:	4683      	mov	fp, r0
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	e671      	b.n	800980e <__aeabi_ddiv+0x4a>
 8009b2a:	2304      	movs	r3, #4
 8009b2c:	4699      	mov	r9, r3
 8009b2e:	2300      	movs	r3, #0
 8009b30:	469b      	mov	fp, r3
 8009b32:	3301      	adds	r3, #1
 8009b34:	2500      	movs	r5, #0
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	e669      	b.n	800980e <__aeabi_ddiv+0x4a>
 8009b3a:	46c0      	nop			; (mov r8, r8)
 8009b3c:	000007ff 	.word	0x000007ff
 8009b40:	fffffc01 	.word	0xfffffc01
 8009b44:	08010e58 	.word	0x08010e58
 8009b48:	000003ff 	.word	0x000003ff
 8009b4c:	feffffff 	.word	0xfeffffff
 8009b50:	000007fe 	.word	0x000007fe
 8009b54:	000003f3 	.word	0x000003f3
 8009b58:	fffffc0d 	.word	0xfffffc0d
 8009b5c:	fffff801 	.word	0xfffff801
 8009b60:	4649      	mov	r1, r9
 8009b62:	2301      	movs	r3, #1
 8009b64:	4319      	orrs	r1, r3
 8009b66:	4689      	mov	r9, r1
 8009b68:	2400      	movs	r4, #0
 8009b6a:	2001      	movs	r0, #1
 8009b6c:	e66a      	b.n	8009844 <__aeabi_ddiv+0x80>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2480      	movs	r4, #128	; 0x80
 8009b72:	469a      	mov	sl, r3
 8009b74:	2500      	movs	r5, #0
 8009b76:	4b8a      	ldr	r3, [pc, #552]	; (8009da0 <__aeabi_ddiv+0x5dc>)
 8009b78:	0324      	lsls	r4, r4, #12
 8009b7a:	e67a      	b.n	8009872 <__aeabi_ddiv+0xae>
 8009b7c:	2501      	movs	r5, #1
 8009b7e:	426d      	negs	r5, r5
 8009b80:	2301      	movs	r3, #1
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	2b38      	cmp	r3, #56	; 0x38
 8009b86:	dd00      	ble.n	8009b8a <__aeabi_ddiv+0x3c6>
 8009b88:	e670      	b.n	800986c <__aeabi_ddiv+0xa8>
 8009b8a:	2b1f      	cmp	r3, #31
 8009b8c:	dc00      	bgt.n	8009b90 <__aeabi_ddiv+0x3cc>
 8009b8e:	e0bf      	b.n	8009d10 <__aeabi_ddiv+0x54c>
 8009b90:	211f      	movs	r1, #31
 8009b92:	4249      	negs	r1, r1
 8009b94:	1a8a      	subs	r2, r1, r2
 8009b96:	4641      	mov	r1, r8
 8009b98:	40d1      	lsrs	r1, r2
 8009b9a:	000a      	movs	r2, r1
 8009b9c:	2b20      	cmp	r3, #32
 8009b9e:	d004      	beq.n	8009baa <__aeabi_ddiv+0x3e6>
 8009ba0:	4641      	mov	r1, r8
 8009ba2:	4b80      	ldr	r3, [pc, #512]	; (8009da4 <__aeabi_ddiv+0x5e0>)
 8009ba4:	445b      	add	r3, fp
 8009ba6:	4099      	lsls	r1, r3
 8009ba8:	430d      	orrs	r5, r1
 8009baa:	1e6b      	subs	r3, r5, #1
 8009bac:	419d      	sbcs	r5, r3
 8009bae:	2307      	movs	r3, #7
 8009bb0:	432a      	orrs	r2, r5
 8009bb2:	001d      	movs	r5, r3
 8009bb4:	2400      	movs	r4, #0
 8009bb6:	4015      	ands	r5, r2
 8009bb8:	4213      	tst	r3, r2
 8009bba:	d100      	bne.n	8009bbe <__aeabi_ddiv+0x3fa>
 8009bbc:	e0d4      	b.n	8009d68 <__aeabi_ddiv+0x5a4>
 8009bbe:	210f      	movs	r1, #15
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4011      	ands	r1, r2
 8009bc4:	2904      	cmp	r1, #4
 8009bc6:	d100      	bne.n	8009bca <__aeabi_ddiv+0x406>
 8009bc8:	e0cb      	b.n	8009d62 <__aeabi_ddiv+0x59e>
 8009bca:	1d11      	adds	r1, r2, #4
 8009bcc:	4291      	cmp	r1, r2
 8009bce:	4192      	sbcs	r2, r2
 8009bd0:	4252      	negs	r2, r2
 8009bd2:	189b      	adds	r3, r3, r2
 8009bd4:	000a      	movs	r2, r1
 8009bd6:	0219      	lsls	r1, r3, #8
 8009bd8:	d400      	bmi.n	8009bdc <__aeabi_ddiv+0x418>
 8009bda:	e0c2      	b.n	8009d62 <__aeabi_ddiv+0x59e>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	2400      	movs	r4, #0
 8009be0:	2500      	movs	r5, #0
 8009be2:	e646      	b.n	8009872 <__aeabi_ddiv+0xae>
 8009be4:	2380      	movs	r3, #128	; 0x80
 8009be6:	4641      	mov	r1, r8
 8009be8:	031b      	lsls	r3, r3, #12
 8009bea:	4219      	tst	r1, r3
 8009bec:	d008      	beq.n	8009c00 <__aeabi_ddiv+0x43c>
 8009bee:	421c      	tst	r4, r3
 8009bf0:	d106      	bne.n	8009c00 <__aeabi_ddiv+0x43c>
 8009bf2:	431c      	orrs	r4, r3
 8009bf4:	0324      	lsls	r4, r4, #12
 8009bf6:	46ba      	mov	sl, r7
 8009bf8:	0015      	movs	r5, r2
 8009bfa:	4b69      	ldr	r3, [pc, #420]	; (8009da0 <__aeabi_ddiv+0x5dc>)
 8009bfc:	0b24      	lsrs	r4, r4, #12
 8009bfe:	e638      	b.n	8009872 <__aeabi_ddiv+0xae>
 8009c00:	2480      	movs	r4, #128	; 0x80
 8009c02:	4643      	mov	r3, r8
 8009c04:	0324      	lsls	r4, r4, #12
 8009c06:	431c      	orrs	r4, r3
 8009c08:	0324      	lsls	r4, r4, #12
 8009c0a:	46b2      	mov	sl, r6
 8009c0c:	4b64      	ldr	r3, [pc, #400]	; (8009da0 <__aeabi_ddiv+0x5dc>)
 8009c0e:	0b24      	lsrs	r4, r4, #12
 8009c10:	e62f      	b.n	8009872 <__aeabi_ddiv+0xae>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d100      	bne.n	8009c18 <__aeabi_ddiv+0x454>
 8009c16:	e703      	b.n	8009a20 <__aeabi_ddiv+0x25c>
 8009c18:	19a6      	adds	r6, r4, r6
 8009c1a:	1e68      	subs	r0, r5, #1
 8009c1c:	42a6      	cmp	r6, r4
 8009c1e:	d200      	bcs.n	8009c22 <__aeabi_ddiv+0x45e>
 8009c20:	e08d      	b.n	8009d3e <__aeabi_ddiv+0x57a>
 8009c22:	428e      	cmp	r6, r1
 8009c24:	d200      	bcs.n	8009c28 <__aeabi_ddiv+0x464>
 8009c26:	e0a3      	b.n	8009d70 <__aeabi_ddiv+0x5ac>
 8009c28:	d100      	bne.n	8009c2c <__aeabi_ddiv+0x468>
 8009c2a:	e0b3      	b.n	8009d94 <__aeabi_ddiv+0x5d0>
 8009c2c:	0005      	movs	r5, r0
 8009c2e:	e6f5      	b.n	8009a1c <__aeabi_ddiv+0x258>
 8009c30:	42aa      	cmp	r2, r5
 8009c32:	d900      	bls.n	8009c36 <__aeabi_ddiv+0x472>
 8009c34:	e639      	b.n	80098aa <__aeabi_ddiv+0xe6>
 8009c36:	4643      	mov	r3, r8
 8009c38:	07de      	lsls	r6, r3, #31
 8009c3a:	0858      	lsrs	r0, r3, #1
 8009c3c:	086b      	lsrs	r3, r5, #1
 8009c3e:	431e      	orrs	r6, r3
 8009c40:	07ed      	lsls	r5, r5, #31
 8009c42:	e639      	b.n	80098b8 <__aeabi_ddiv+0xf4>
 8009c44:	4648      	mov	r0, r9
 8009c46:	f001 f8ef 	bl	800ae28 <__clzsi2>
 8009c4a:	0001      	movs	r1, r0
 8009c4c:	0002      	movs	r2, r0
 8009c4e:	3115      	adds	r1, #21
 8009c50:	3220      	adds	r2, #32
 8009c52:	291c      	cmp	r1, #28
 8009c54:	dc00      	bgt.n	8009c58 <__aeabi_ddiv+0x494>
 8009c56:	e72c      	b.n	8009ab2 <__aeabi_ddiv+0x2ee>
 8009c58:	464b      	mov	r3, r9
 8009c5a:	3808      	subs	r0, #8
 8009c5c:	4083      	lsls	r3, r0
 8009c5e:	2500      	movs	r5, #0
 8009c60:	4698      	mov	r8, r3
 8009c62:	e732      	b.n	8009aca <__aeabi_ddiv+0x306>
 8009c64:	f001 f8e0 	bl	800ae28 <__clzsi2>
 8009c68:	0003      	movs	r3, r0
 8009c6a:	001a      	movs	r2, r3
 8009c6c:	3215      	adds	r2, #21
 8009c6e:	3020      	adds	r0, #32
 8009c70:	2a1c      	cmp	r2, #28
 8009c72:	dc00      	bgt.n	8009c76 <__aeabi_ddiv+0x4b2>
 8009c74:	e700      	b.n	8009a78 <__aeabi_ddiv+0x2b4>
 8009c76:	4654      	mov	r4, sl
 8009c78:	3b08      	subs	r3, #8
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	409c      	lsls	r4, r3
 8009c7e:	e705      	b.n	8009a8c <__aeabi_ddiv+0x2c8>
 8009c80:	1936      	adds	r6, r6, r4
 8009c82:	3b01      	subs	r3, #1
 8009c84:	42b4      	cmp	r4, r6
 8009c86:	d900      	bls.n	8009c8a <__aeabi_ddiv+0x4c6>
 8009c88:	e6a6      	b.n	80099d8 <__aeabi_ddiv+0x214>
 8009c8a:	42b2      	cmp	r2, r6
 8009c8c:	d800      	bhi.n	8009c90 <__aeabi_ddiv+0x4cc>
 8009c8e:	e6a3      	b.n	80099d8 <__aeabi_ddiv+0x214>
 8009c90:	1e83      	subs	r3, r0, #2
 8009c92:	1936      	adds	r6, r6, r4
 8009c94:	e6a0      	b.n	80099d8 <__aeabi_ddiv+0x214>
 8009c96:	1909      	adds	r1, r1, r4
 8009c98:	3d01      	subs	r5, #1
 8009c9a:	428c      	cmp	r4, r1
 8009c9c:	d900      	bls.n	8009ca0 <__aeabi_ddiv+0x4dc>
 8009c9e:	e68d      	b.n	80099bc <__aeabi_ddiv+0x1f8>
 8009ca0:	428a      	cmp	r2, r1
 8009ca2:	d800      	bhi.n	8009ca6 <__aeabi_ddiv+0x4e2>
 8009ca4:	e68a      	b.n	80099bc <__aeabi_ddiv+0x1f8>
 8009ca6:	1e85      	subs	r5, r0, #2
 8009ca8:	1909      	adds	r1, r1, r4
 8009caa:	e687      	b.n	80099bc <__aeabi_ddiv+0x1f8>
 8009cac:	230f      	movs	r3, #15
 8009cae:	402b      	ands	r3, r5
 8009cb0:	2b04      	cmp	r3, #4
 8009cb2:	d100      	bne.n	8009cb6 <__aeabi_ddiv+0x4f2>
 8009cb4:	e6bc      	b.n	8009a30 <__aeabi_ddiv+0x26c>
 8009cb6:	2305      	movs	r3, #5
 8009cb8:	425b      	negs	r3, r3
 8009cba:	42ab      	cmp	r3, r5
 8009cbc:	419b      	sbcs	r3, r3
 8009cbe:	3504      	adds	r5, #4
 8009cc0:	425b      	negs	r3, r3
 8009cc2:	08ed      	lsrs	r5, r5, #3
 8009cc4:	4498      	add	r8, r3
 8009cc6:	e6b4      	b.n	8009a32 <__aeabi_ddiv+0x26e>
 8009cc8:	42af      	cmp	r7, r5
 8009cca:	d900      	bls.n	8009cce <__aeabi_ddiv+0x50a>
 8009ccc:	e660      	b.n	8009990 <__aeabi_ddiv+0x1cc>
 8009cce:	4282      	cmp	r2, r0
 8009cd0:	d804      	bhi.n	8009cdc <__aeabi_ddiv+0x518>
 8009cd2:	d000      	beq.n	8009cd6 <__aeabi_ddiv+0x512>
 8009cd4:	e65c      	b.n	8009990 <__aeabi_ddiv+0x1cc>
 8009cd6:	42ae      	cmp	r6, r5
 8009cd8:	d800      	bhi.n	8009cdc <__aeabi_ddiv+0x518>
 8009cda:	e659      	b.n	8009990 <__aeabi_ddiv+0x1cc>
 8009cdc:	2302      	movs	r3, #2
 8009cde:	425b      	negs	r3, r3
 8009ce0:	469c      	mov	ip, r3
 8009ce2:	9b00      	ldr	r3, [sp, #0]
 8009ce4:	44e0      	add	r8, ip
 8009ce6:	469c      	mov	ip, r3
 8009ce8:	4465      	add	r5, ip
 8009cea:	429d      	cmp	r5, r3
 8009cec:	419b      	sbcs	r3, r3
 8009cee:	425b      	negs	r3, r3
 8009cf0:	191b      	adds	r3, r3, r4
 8009cf2:	18c0      	adds	r0, r0, r3
 8009cf4:	e64d      	b.n	8009992 <__aeabi_ddiv+0x1ce>
 8009cf6:	428a      	cmp	r2, r1
 8009cf8:	d800      	bhi.n	8009cfc <__aeabi_ddiv+0x538>
 8009cfa:	e60e      	b.n	800991a <__aeabi_ddiv+0x156>
 8009cfc:	1e83      	subs	r3, r0, #2
 8009cfe:	1909      	adds	r1, r1, r4
 8009d00:	e60b      	b.n	800991a <__aeabi_ddiv+0x156>
 8009d02:	428a      	cmp	r2, r1
 8009d04:	d800      	bhi.n	8009d08 <__aeabi_ddiv+0x544>
 8009d06:	e5f4      	b.n	80098f2 <__aeabi_ddiv+0x12e>
 8009d08:	1e83      	subs	r3, r0, #2
 8009d0a:	4698      	mov	r8, r3
 8009d0c:	1909      	adds	r1, r1, r4
 8009d0e:	e5f0      	b.n	80098f2 <__aeabi_ddiv+0x12e>
 8009d10:	4925      	ldr	r1, [pc, #148]	; (8009da8 <__aeabi_ddiv+0x5e4>)
 8009d12:	0028      	movs	r0, r5
 8009d14:	4459      	add	r1, fp
 8009d16:	408d      	lsls	r5, r1
 8009d18:	4642      	mov	r2, r8
 8009d1a:	408a      	lsls	r2, r1
 8009d1c:	1e69      	subs	r1, r5, #1
 8009d1e:	418d      	sbcs	r5, r1
 8009d20:	4641      	mov	r1, r8
 8009d22:	40d8      	lsrs	r0, r3
 8009d24:	40d9      	lsrs	r1, r3
 8009d26:	4302      	orrs	r2, r0
 8009d28:	432a      	orrs	r2, r5
 8009d2a:	000b      	movs	r3, r1
 8009d2c:	0751      	lsls	r1, r2, #29
 8009d2e:	d100      	bne.n	8009d32 <__aeabi_ddiv+0x56e>
 8009d30:	e751      	b.n	8009bd6 <__aeabi_ddiv+0x412>
 8009d32:	210f      	movs	r1, #15
 8009d34:	4011      	ands	r1, r2
 8009d36:	2904      	cmp	r1, #4
 8009d38:	d000      	beq.n	8009d3c <__aeabi_ddiv+0x578>
 8009d3a:	e746      	b.n	8009bca <__aeabi_ddiv+0x406>
 8009d3c:	e74b      	b.n	8009bd6 <__aeabi_ddiv+0x412>
 8009d3e:	0005      	movs	r5, r0
 8009d40:	428e      	cmp	r6, r1
 8009d42:	d000      	beq.n	8009d46 <__aeabi_ddiv+0x582>
 8009d44:	e66a      	b.n	8009a1c <__aeabi_ddiv+0x258>
 8009d46:	9a00      	ldr	r2, [sp, #0]
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d000      	beq.n	8009d4e <__aeabi_ddiv+0x58a>
 8009d4c:	e666      	b.n	8009a1c <__aeabi_ddiv+0x258>
 8009d4e:	e667      	b.n	8009a20 <__aeabi_ddiv+0x25c>
 8009d50:	4a16      	ldr	r2, [pc, #88]	; (8009dac <__aeabi_ddiv+0x5e8>)
 8009d52:	445a      	add	r2, fp
 8009d54:	2a00      	cmp	r2, #0
 8009d56:	dc00      	bgt.n	8009d5a <__aeabi_ddiv+0x596>
 8009d58:	e710      	b.n	8009b7c <__aeabi_ddiv+0x3b8>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	2500      	movs	r5, #0
 8009d5e:	4498      	add	r8, r3
 8009d60:	e667      	b.n	8009a32 <__aeabi_ddiv+0x26e>
 8009d62:	075d      	lsls	r5, r3, #29
 8009d64:	025b      	lsls	r3, r3, #9
 8009d66:	0b1c      	lsrs	r4, r3, #12
 8009d68:	08d2      	lsrs	r2, r2, #3
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	4315      	orrs	r5, r2
 8009d6e:	e580      	b.n	8009872 <__aeabi_ddiv+0xae>
 8009d70:	9800      	ldr	r0, [sp, #0]
 8009d72:	3d02      	subs	r5, #2
 8009d74:	0042      	lsls	r2, r0, #1
 8009d76:	4282      	cmp	r2, r0
 8009d78:	41bf      	sbcs	r7, r7
 8009d7a:	427f      	negs	r7, r7
 8009d7c:	193c      	adds	r4, r7, r4
 8009d7e:	1936      	adds	r6, r6, r4
 8009d80:	9200      	str	r2, [sp, #0]
 8009d82:	e7dd      	b.n	8009d40 <__aeabi_ddiv+0x57c>
 8009d84:	2480      	movs	r4, #128	; 0x80
 8009d86:	4643      	mov	r3, r8
 8009d88:	0324      	lsls	r4, r4, #12
 8009d8a:	431c      	orrs	r4, r3
 8009d8c:	0324      	lsls	r4, r4, #12
 8009d8e:	4b04      	ldr	r3, [pc, #16]	; (8009da0 <__aeabi_ddiv+0x5dc>)
 8009d90:	0b24      	lsrs	r4, r4, #12
 8009d92:	e56e      	b.n	8009872 <__aeabi_ddiv+0xae>
 8009d94:	9a00      	ldr	r2, [sp, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d3ea      	bcc.n	8009d70 <__aeabi_ddiv+0x5ac>
 8009d9a:	0005      	movs	r5, r0
 8009d9c:	e7d3      	b.n	8009d46 <__aeabi_ddiv+0x582>
 8009d9e:	46c0      	nop			; (mov r8, r8)
 8009da0:	000007ff 	.word	0x000007ff
 8009da4:	0000043e 	.word	0x0000043e
 8009da8:	0000041e 	.word	0x0000041e
 8009dac:	000003ff 	.word	0x000003ff

08009db0 <__eqdf2>:
 8009db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009db2:	464e      	mov	r6, r9
 8009db4:	4645      	mov	r5, r8
 8009db6:	46de      	mov	lr, fp
 8009db8:	4657      	mov	r7, sl
 8009dba:	4690      	mov	r8, r2
 8009dbc:	b5e0      	push	{r5, r6, r7, lr}
 8009dbe:	0017      	movs	r7, r2
 8009dc0:	031a      	lsls	r2, r3, #12
 8009dc2:	0b12      	lsrs	r2, r2, #12
 8009dc4:	0005      	movs	r5, r0
 8009dc6:	4684      	mov	ip, r0
 8009dc8:	4819      	ldr	r0, [pc, #100]	; (8009e30 <__eqdf2+0x80>)
 8009dca:	030e      	lsls	r6, r1, #12
 8009dcc:	004c      	lsls	r4, r1, #1
 8009dce:	4691      	mov	r9, r2
 8009dd0:	005a      	lsls	r2, r3, #1
 8009dd2:	0fdb      	lsrs	r3, r3, #31
 8009dd4:	469b      	mov	fp, r3
 8009dd6:	0b36      	lsrs	r6, r6, #12
 8009dd8:	0d64      	lsrs	r4, r4, #21
 8009dda:	0fc9      	lsrs	r1, r1, #31
 8009ddc:	0d52      	lsrs	r2, r2, #21
 8009dde:	4284      	cmp	r4, r0
 8009de0:	d019      	beq.n	8009e16 <__eqdf2+0x66>
 8009de2:	4282      	cmp	r2, r0
 8009de4:	d010      	beq.n	8009e08 <__eqdf2+0x58>
 8009de6:	2001      	movs	r0, #1
 8009de8:	4294      	cmp	r4, r2
 8009dea:	d10e      	bne.n	8009e0a <__eqdf2+0x5a>
 8009dec:	454e      	cmp	r6, r9
 8009dee:	d10c      	bne.n	8009e0a <__eqdf2+0x5a>
 8009df0:	2001      	movs	r0, #1
 8009df2:	45c4      	cmp	ip, r8
 8009df4:	d109      	bne.n	8009e0a <__eqdf2+0x5a>
 8009df6:	4559      	cmp	r1, fp
 8009df8:	d017      	beq.n	8009e2a <__eqdf2+0x7a>
 8009dfa:	2c00      	cmp	r4, #0
 8009dfc:	d105      	bne.n	8009e0a <__eqdf2+0x5a>
 8009dfe:	0030      	movs	r0, r6
 8009e00:	4328      	orrs	r0, r5
 8009e02:	1e43      	subs	r3, r0, #1
 8009e04:	4198      	sbcs	r0, r3
 8009e06:	e000      	b.n	8009e0a <__eqdf2+0x5a>
 8009e08:	2001      	movs	r0, #1
 8009e0a:	bcf0      	pop	{r4, r5, r6, r7}
 8009e0c:	46bb      	mov	fp, r7
 8009e0e:	46b2      	mov	sl, r6
 8009e10:	46a9      	mov	r9, r5
 8009e12:	46a0      	mov	r8, r4
 8009e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e16:	0033      	movs	r3, r6
 8009e18:	2001      	movs	r0, #1
 8009e1a:	432b      	orrs	r3, r5
 8009e1c:	d1f5      	bne.n	8009e0a <__eqdf2+0x5a>
 8009e1e:	42a2      	cmp	r2, r4
 8009e20:	d1f3      	bne.n	8009e0a <__eqdf2+0x5a>
 8009e22:	464b      	mov	r3, r9
 8009e24:	433b      	orrs	r3, r7
 8009e26:	d1f0      	bne.n	8009e0a <__eqdf2+0x5a>
 8009e28:	e7e2      	b.n	8009df0 <__eqdf2+0x40>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	e7ed      	b.n	8009e0a <__eqdf2+0x5a>
 8009e2e:	46c0      	nop			; (mov r8, r8)
 8009e30:	000007ff 	.word	0x000007ff

08009e34 <__gedf2>:
 8009e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e36:	4647      	mov	r7, r8
 8009e38:	46ce      	mov	lr, r9
 8009e3a:	0004      	movs	r4, r0
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	0016      	movs	r6, r2
 8009e40:	031b      	lsls	r3, r3, #12
 8009e42:	0b1b      	lsrs	r3, r3, #12
 8009e44:	4d2d      	ldr	r5, [pc, #180]	; (8009efc <__gedf2+0xc8>)
 8009e46:	004a      	lsls	r2, r1, #1
 8009e48:	4699      	mov	r9, r3
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	0043      	lsls	r3, r0, #1
 8009e4e:	030f      	lsls	r7, r1, #12
 8009e50:	46a4      	mov	ip, r4
 8009e52:	46b0      	mov	r8, r6
 8009e54:	0b3f      	lsrs	r7, r7, #12
 8009e56:	0d52      	lsrs	r2, r2, #21
 8009e58:	0fc9      	lsrs	r1, r1, #31
 8009e5a:	0d5b      	lsrs	r3, r3, #21
 8009e5c:	0fc0      	lsrs	r0, r0, #31
 8009e5e:	42aa      	cmp	r2, r5
 8009e60:	d021      	beq.n	8009ea6 <__gedf2+0x72>
 8009e62:	42ab      	cmp	r3, r5
 8009e64:	d013      	beq.n	8009e8e <__gedf2+0x5a>
 8009e66:	2a00      	cmp	r2, #0
 8009e68:	d122      	bne.n	8009eb0 <__gedf2+0x7c>
 8009e6a:	433c      	orrs	r4, r7
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d102      	bne.n	8009e76 <__gedf2+0x42>
 8009e70:	464d      	mov	r5, r9
 8009e72:	432e      	orrs	r6, r5
 8009e74:	d022      	beq.n	8009ebc <__gedf2+0x88>
 8009e76:	2c00      	cmp	r4, #0
 8009e78:	d010      	beq.n	8009e9c <__gedf2+0x68>
 8009e7a:	4281      	cmp	r1, r0
 8009e7c:	d022      	beq.n	8009ec4 <__gedf2+0x90>
 8009e7e:	2002      	movs	r0, #2
 8009e80:	3901      	subs	r1, #1
 8009e82:	4008      	ands	r0, r1
 8009e84:	3801      	subs	r0, #1
 8009e86:	bcc0      	pop	{r6, r7}
 8009e88:	46b9      	mov	r9, r7
 8009e8a:	46b0      	mov	r8, r6
 8009e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e8e:	464d      	mov	r5, r9
 8009e90:	432e      	orrs	r6, r5
 8009e92:	d129      	bne.n	8009ee8 <__gedf2+0xb4>
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	d1f0      	bne.n	8009e7a <__gedf2+0x46>
 8009e98:	433c      	orrs	r4, r7
 8009e9a:	d1ee      	bne.n	8009e7a <__gedf2+0x46>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d1f2      	bne.n	8009e86 <__gedf2+0x52>
 8009ea0:	2001      	movs	r0, #1
 8009ea2:	4240      	negs	r0, r0
 8009ea4:	e7ef      	b.n	8009e86 <__gedf2+0x52>
 8009ea6:	003d      	movs	r5, r7
 8009ea8:	4325      	orrs	r5, r4
 8009eaa:	d11d      	bne.n	8009ee8 <__gedf2+0xb4>
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d0ee      	beq.n	8009e8e <__gedf2+0x5a>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e2      	bne.n	8009e7a <__gedf2+0x46>
 8009eb4:	464c      	mov	r4, r9
 8009eb6:	4326      	orrs	r6, r4
 8009eb8:	d1df      	bne.n	8009e7a <__gedf2+0x46>
 8009eba:	e7e0      	b.n	8009e7e <__gedf2+0x4a>
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	2c00      	cmp	r4, #0
 8009ec0:	d0e1      	beq.n	8009e86 <__gedf2+0x52>
 8009ec2:	e7dc      	b.n	8009e7e <__gedf2+0x4a>
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	dc0a      	bgt.n	8009ede <__gedf2+0xaa>
 8009ec8:	dbe8      	blt.n	8009e9c <__gedf2+0x68>
 8009eca:	454f      	cmp	r7, r9
 8009ecc:	d8d7      	bhi.n	8009e7e <__gedf2+0x4a>
 8009ece:	d00e      	beq.n	8009eee <__gedf2+0xba>
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	454f      	cmp	r7, r9
 8009ed4:	d2d7      	bcs.n	8009e86 <__gedf2+0x52>
 8009ed6:	2900      	cmp	r1, #0
 8009ed8:	d0e2      	beq.n	8009ea0 <__gedf2+0x6c>
 8009eda:	0008      	movs	r0, r1
 8009edc:	e7d3      	b.n	8009e86 <__gedf2+0x52>
 8009ede:	4243      	negs	r3, r0
 8009ee0:	4158      	adcs	r0, r3
 8009ee2:	0040      	lsls	r0, r0, #1
 8009ee4:	3801      	subs	r0, #1
 8009ee6:	e7ce      	b.n	8009e86 <__gedf2+0x52>
 8009ee8:	2002      	movs	r0, #2
 8009eea:	4240      	negs	r0, r0
 8009eec:	e7cb      	b.n	8009e86 <__gedf2+0x52>
 8009eee:	45c4      	cmp	ip, r8
 8009ef0:	d8c5      	bhi.n	8009e7e <__gedf2+0x4a>
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	45c4      	cmp	ip, r8
 8009ef6:	d2c6      	bcs.n	8009e86 <__gedf2+0x52>
 8009ef8:	e7ed      	b.n	8009ed6 <__gedf2+0xa2>
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	000007ff 	.word	0x000007ff

08009f00 <__ledf2>:
 8009f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f02:	4647      	mov	r7, r8
 8009f04:	46ce      	mov	lr, r9
 8009f06:	0004      	movs	r4, r0
 8009f08:	0018      	movs	r0, r3
 8009f0a:	0016      	movs	r6, r2
 8009f0c:	031b      	lsls	r3, r3, #12
 8009f0e:	0b1b      	lsrs	r3, r3, #12
 8009f10:	4d2c      	ldr	r5, [pc, #176]	; (8009fc4 <__ledf2+0xc4>)
 8009f12:	004a      	lsls	r2, r1, #1
 8009f14:	4699      	mov	r9, r3
 8009f16:	b580      	push	{r7, lr}
 8009f18:	0043      	lsls	r3, r0, #1
 8009f1a:	030f      	lsls	r7, r1, #12
 8009f1c:	46a4      	mov	ip, r4
 8009f1e:	46b0      	mov	r8, r6
 8009f20:	0b3f      	lsrs	r7, r7, #12
 8009f22:	0d52      	lsrs	r2, r2, #21
 8009f24:	0fc9      	lsrs	r1, r1, #31
 8009f26:	0d5b      	lsrs	r3, r3, #21
 8009f28:	0fc0      	lsrs	r0, r0, #31
 8009f2a:	42aa      	cmp	r2, r5
 8009f2c:	d00d      	beq.n	8009f4a <__ledf2+0x4a>
 8009f2e:	42ab      	cmp	r3, r5
 8009f30:	d010      	beq.n	8009f54 <__ledf2+0x54>
 8009f32:	2a00      	cmp	r2, #0
 8009f34:	d127      	bne.n	8009f86 <__ledf2+0x86>
 8009f36:	433c      	orrs	r4, r7
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d111      	bne.n	8009f60 <__ledf2+0x60>
 8009f3c:	464d      	mov	r5, r9
 8009f3e:	432e      	orrs	r6, r5
 8009f40:	d10e      	bne.n	8009f60 <__ledf2+0x60>
 8009f42:	2000      	movs	r0, #0
 8009f44:	2c00      	cmp	r4, #0
 8009f46:	d015      	beq.n	8009f74 <__ledf2+0x74>
 8009f48:	e00e      	b.n	8009f68 <__ledf2+0x68>
 8009f4a:	003d      	movs	r5, r7
 8009f4c:	4325      	orrs	r5, r4
 8009f4e:	d110      	bne.n	8009f72 <__ledf2+0x72>
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d118      	bne.n	8009f86 <__ledf2+0x86>
 8009f54:	464d      	mov	r5, r9
 8009f56:	432e      	orrs	r6, r5
 8009f58:	d10b      	bne.n	8009f72 <__ledf2+0x72>
 8009f5a:	2a00      	cmp	r2, #0
 8009f5c:	d102      	bne.n	8009f64 <__ledf2+0x64>
 8009f5e:	433c      	orrs	r4, r7
 8009f60:	2c00      	cmp	r4, #0
 8009f62:	d00b      	beq.n	8009f7c <__ledf2+0x7c>
 8009f64:	4281      	cmp	r1, r0
 8009f66:	d014      	beq.n	8009f92 <__ledf2+0x92>
 8009f68:	2002      	movs	r0, #2
 8009f6a:	3901      	subs	r1, #1
 8009f6c:	4008      	ands	r0, r1
 8009f6e:	3801      	subs	r0, #1
 8009f70:	e000      	b.n	8009f74 <__ledf2+0x74>
 8009f72:	2002      	movs	r0, #2
 8009f74:	bcc0      	pop	{r6, r7}
 8009f76:	46b9      	mov	r9, r7
 8009f78:	46b0      	mov	r8, r6
 8009f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d1f9      	bne.n	8009f74 <__ledf2+0x74>
 8009f80:	2001      	movs	r0, #1
 8009f82:	4240      	negs	r0, r0
 8009f84:	e7f6      	b.n	8009f74 <__ledf2+0x74>
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1ec      	bne.n	8009f64 <__ledf2+0x64>
 8009f8a:	464c      	mov	r4, r9
 8009f8c:	4326      	orrs	r6, r4
 8009f8e:	d1e9      	bne.n	8009f64 <__ledf2+0x64>
 8009f90:	e7ea      	b.n	8009f68 <__ledf2+0x68>
 8009f92:	429a      	cmp	r2, r3
 8009f94:	dd04      	ble.n	8009fa0 <__ledf2+0xa0>
 8009f96:	4243      	negs	r3, r0
 8009f98:	4158      	adcs	r0, r3
 8009f9a:	0040      	lsls	r0, r0, #1
 8009f9c:	3801      	subs	r0, #1
 8009f9e:	e7e9      	b.n	8009f74 <__ledf2+0x74>
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	dbeb      	blt.n	8009f7c <__ledf2+0x7c>
 8009fa4:	454f      	cmp	r7, r9
 8009fa6:	d8df      	bhi.n	8009f68 <__ledf2+0x68>
 8009fa8:	d006      	beq.n	8009fb8 <__ledf2+0xb8>
 8009faa:	2000      	movs	r0, #0
 8009fac:	454f      	cmp	r7, r9
 8009fae:	d2e1      	bcs.n	8009f74 <__ledf2+0x74>
 8009fb0:	2900      	cmp	r1, #0
 8009fb2:	d0e5      	beq.n	8009f80 <__ledf2+0x80>
 8009fb4:	0008      	movs	r0, r1
 8009fb6:	e7dd      	b.n	8009f74 <__ledf2+0x74>
 8009fb8:	45c4      	cmp	ip, r8
 8009fba:	d8d5      	bhi.n	8009f68 <__ledf2+0x68>
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	45c4      	cmp	ip, r8
 8009fc0:	d2d8      	bcs.n	8009f74 <__ledf2+0x74>
 8009fc2:	e7f5      	b.n	8009fb0 <__ledf2+0xb0>
 8009fc4:	000007ff 	.word	0x000007ff

08009fc8 <__aeabi_dmul>:
 8009fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fca:	4657      	mov	r7, sl
 8009fcc:	464e      	mov	r6, r9
 8009fce:	4645      	mov	r5, r8
 8009fd0:	46de      	mov	lr, fp
 8009fd2:	b5e0      	push	{r5, r6, r7, lr}
 8009fd4:	4698      	mov	r8, r3
 8009fd6:	030c      	lsls	r4, r1, #12
 8009fd8:	004b      	lsls	r3, r1, #1
 8009fda:	0006      	movs	r6, r0
 8009fdc:	4692      	mov	sl, r2
 8009fde:	b087      	sub	sp, #28
 8009fe0:	0b24      	lsrs	r4, r4, #12
 8009fe2:	0d5b      	lsrs	r3, r3, #21
 8009fe4:	0fcf      	lsrs	r7, r1, #31
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d100      	bne.n	8009fec <__aeabi_dmul+0x24>
 8009fea:	e15c      	b.n	800a2a6 <__aeabi_dmul+0x2de>
 8009fec:	4ad9      	ldr	r2, [pc, #868]	; (800a354 <__aeabi_dmul+0x38c>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d100      	bne.n	8009ff4 <__aeabi_dmul+0x2c>
 8009ff2:	e175      	b.n	800a2e0 <__aeabi_dmul+0x318>
 8009ff4:	0f42      	lsrs	r2, r0, #29
 8009ff6:	00e4      	lsls	r4, r4, #3
 8009ff8:	4314      	orrs	r4, r2
 8009ffa:	2280      	movs	r2, #128	; 0x80
 8009ffc:	0412      	lsls	r2, r2, #16
 8009ffe:	4314      	orrs	r4, r2
 800a000:	4ad5      	ldr	r2, [pc, #852]	; (800a358 <__aeabi_dmul+0x390>)
 800a002:	00c5      	lsls	r5, r0, #3
 800a004:	4694      	mov	ip, r2
 800a006:	4463      	add	r3, ip
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	2300      	movs	r3, #0
 800a00c:	4699      	mov	r9, r3
 800a00e:	469b      	mov	fp, r3
 800a010:	4643      	mov	r3, r8
 800a012:	4642      	mov	r2, r8
 800a014:	031e      	lsls	r6, r3, #12
 800a016:	0fd2      	lsrs	r2, r2, #31
 800a018:	005b      	lsls	r3, r3, #1
 800a01a:	4650      	mov	r0, sl
 800a01c:	4690      	mov	r8, r2
 800a01e:	0b36      	lsrs	r6, r6, #12
 800a020:	0d5b      	lsrs	r3, r3, #21
 800a022:	d100      	bne.n	800a026 <__aeabi_dmul+0x5e>
 800a024:	e120      	b.n	800a268 <__aeabi_dmul+0x2a0>
 800a026:	4acb      	ldr	r2, [pc, #812]	; (800a354 <__aeabi_dmul+0x38c>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d100      	bne.n	800a02e <__aeabi_dmul+0x66>
 800a02c:	e162      	b.n	800a2f4 <__aeabi_dmul+0x32c>
 800a02e:	49ca      	ldr	r1, [pc, #808]	; (800a358 <__aeabi_dmul+0x390>)
 800a030:	0f42      	lsrs	r2, r0, #29
 800a032:	468c      	mov	ip, r1
 800a034:	9900      	ldr	r1, [sp, #0]
 800a036:	4463      	add	r3, ip
 800a038:	00f6      	lsls	r6, r6, #3
 800a03a:	468c      	mov	ip, r1
 800a03c:	4316      	orrs	r6, r2
 800a03e:	2280      	movs	r2, #128	; 0x80
 800a040:	449c      	add	ip, r3
 800a042:	0412      	lsls	r2, r2, #16
 800a044:	4663      	mov	r3, ip
 800a046:	4316      	orrs	r6, r2
 800a048:	00c2      	lsls	r2, r0, #3
 800a04a:	2000      	movs	r0, #0
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	9900      	ldr	r1, [sp, #0]
 800a050:	4643      	mov	r3, r8
 800a052:	3101      	adds	r1, #1
 800a054:	468c      	mov	ip, r1
 800a056:	4649      	mov	r1, r9
 800a058:	407b      	eors	r3, r7
 800a05a:	9301      	str	r3, [sp, #4]
 800a05c:	290f      	cmp	r1, #15
 800a05e:	d826      	bhi.n	800a0ae <__aeabi_dmul+0xe6>
 800a060:	4bbe      	ldr	r3, [pc, #760]	; (800a35c <__aeabi_dmul+0x394>)
 800a062:	0089      	lsls	r1, r1, #2
 800a064:	5859      	ldr	r1, [r3, r1]
 800a066:	468f      	mov	pc, r1
 800a068:	4643      	mov	r3, r8
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	0034      	movs	r4, r6
 800a06e:	0015      	movs	r5, r2
 800a070:	4683      	mov	fp, r0
 800a072:	465b      	mov	r3, fp
 800a074:	2b02      	cmp	r3, #2
 800a076:	d016      	beq.n	800a0a6 <__aeabi_dmul+0xde>
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d100      	bne.n	800a07e <__aeabi_dmul+0xb6>
 800a07c:	e203      	b.n	800a486 <__aeabi_dmul+0x4be>
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d000      	beq.n	800a084 <__aeabi_dmul+0xbc>
 800a082:	e0cd      	b.n	800a220 <__aeabi_dmul+0x258>
 800a084:	2200      	movs	r2, #0
 800a086:	2400      	movs	r4, #0
 800a088:	2500      	movs	r5, #0
 800a08a:	9b01      	ldr	r3, [sp, #4]
 800a08c:	0512      	lsls	r2, r2, #20
 800a08e:	4322      	orrs	r2, r4
 800a090:	07db      	lsls	r3, r3, #31
 800a092:	431a      	orrs	r2, r3
 800a094:	0028      	movs	r0, r5
 800a096:	0011      	movs	r1, r2
 800a098:	b007      	add	sp, #28
 800a09a:	bcf0      	pop	{r4, r5, r6, r7}
 800a09c:	46bb      	mov	fp, r7
 800a09e:	46b2      	mov	sl, r6
 800a0a0:	46a9      	mov	r9, r5
 800a0a2:	46a0      	mov	r8, r4
 800a0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0a6:	2400      	movs	r4, #0
 800a0a8:	2500      	movs	r5, #0
 800a0aa:	4aaa      	ldr	r2, [pc, #680]	; (800a354 <__aeabi_dmul+0x38c>)
 800a0ac:	e7ed      	b.n	800a08a <__aeabi_dmul+0xc2>
 800a0ae:	0c28      	lsrs	r0, r5, #16
 800a0b0:	042d      	lsls	r5, r5, #16
 800a0b2:	0c2d      	lsrs	r5, r5, #16
 800a0b4:	002b      	movs	r3, r5
 800a0b6:	0c11      	lsrs	r1, r2, #16
 800a0b8:	0412      	lsls	r2, r2, #16
 800a0ba:	0c12      	lsrs	r2, r2, #16
 800a0bc:	4353      	muls	r3, r2
 800a0be:	4698      	mov	r8, r3
 800a0c0:	0013      	movs	r3, r2
 800a0c2:	002f      	movs	r7, r5
 800a0c4:	4343      	muls	r3, r0
 800a0c6:	4699      	mov	r9, r3
 800a0c8:	434f      	muls	r7, r1
 800a0ca:	444f      	add	r7, r9
 800a0cc:	46bb      	mov	fp, r7
 800a0ce:	4647      	mov	r7, r8
 800a0d0:	000b      	movs	r3, r1
 800a0d2:	0c3f      	lsrs	r7, r7, #16
 800a0d4:	46ba      	mov	sl, r7
 800a0d6:	4343      	muls	r3, r0
 800a0d8:	44da      	add	sl, fp
 800a0da:	9302      	str	r3, [sp, #8]
 800a0dc:	45d1      	cmp	r9, sl
 800a0de:	d904      	bls.n	800a0ea <__aeabi_dmul+0x122>
 800a0e0:	2780      	movs	r7, #128	; 0x80
 800a0e2:	027f      	lsls	r7, r7, #9
 800a0e4:	46b9      	mov	r9, r7
 800a0e6:	444b      	add	r3, r9
 800a0e8:	9302      	str	r3, [sp, #8]
 800a0ea:	4653      	mov	r3, sl
 800a0ec:	0c1b      	lsrs	r3, r3, #16
 800a0ee:	469b      	mov	fp, r3
 800a0f0:	4653      	mov	r3, sl
 800a0f2:	041f      	lsls	r7, r3, #16
 800a0f4:	4643      	mov	r3, r8
 800a0f6:	041b      	lsls	r3, r3, #16
 800a0f8:	0c1b      	lsrs	r3, r3, #16
 800a0fa:	4698      	mov	r8, r3
 800a0fc:	003b      	movs	r3, r7
 800a0fe:	4443      	add	r3, r8
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	0c33      	lsrs	r3, r6, #16
 800a104:	0436      	lsls	r6, r6, #16
 800a106:	0c36      	lsrs	r6, r6, #16
 800a108:	4698      	mov	r8, r3
 800a10a:	0033      	movs	r3, r6
 800a10c:	4343      	muls	r3, r0
 800a10e:	4699      	mov	r9, r3
 800a110:	4643      	mov	r3, r8
 800a112:	4343      	muls	r3, r0
 800a114:	002f      	movs	r7, r5
 800a116:	469a      	mov	sl, r3
 800a118:	4643      	mov	r3, r8
 800a11a:	4377      	muls	r7, r6
 800a11c:	435d      	muls	r5, r3
 800a11e:	0c38      	lsrs	r0, r7, #16
 800a120:	444d      	add	r5, r9
 800a122:	1945      	adds	r5, r0, r5
 800a124:	45a9      	cmp	r9, r5
 800a126:	d903      	bls.n	800a130 <__aeabi_dmul+0x168>
 800a128:	2380      	movs	r3, #128	; 0x80
 800a12a:	025b      	lsls	r3, r3, #9
 800a12c:	4699      	mov	r9, r3
 800a12e:	44ca      	add	sl, r9
 800a130:	043f      	lsls	r7, r7, #16
 800a132:	0c28      	lsrs	r0, r5, #16
 800a134:	0c3f      	lsrs	r7, r7, #16
 800a136:	042d      	lsls	r5, r5, #16
 800a138:	19ed      	adds	r5, r5, r7
 800a13a:	0c27      	lsrs	r7, r4, #16
 800a13c:	0424      	lsls	r4, r4, #16
 800a13e:	0c24      	lsrs	r4, r4, #16
 800a140:	0003      	movs	r3, r0
 800a142:	0020      	movs	r0, r4
 800a144:	4350      	muls	r0, r2
 800a146:	437a      	muls	r2, r7
 800a148:	4691      	mov	r9, r2
 800a14a:	003a      	movs	r2, r7
 800a14c:	4453      	add	r3, sl
 800a14e:	9305      	str	r3, [sp, #20]
 800a150:	0c03      	lsrs	r3, r0, #16
 800a152:	469a      	mov	sl, r3
 800a154:	434a      	muls	r2, r1
 800a156:	4361      	muls	r1, r4
 800a158:	4449      	add	r1, r9
 800a15a:	4451      	add	r1, sl
 800a15c:	44ab      	add	fp, r5
 800a15e:	4589      	cmp	r9, r1
 800a160:	d903      	bls.n	800a16a <__aeabi_dmul+0x1a2>
 800a162:	2380      	movs	r3, #128	; 0x80
 800a164:	025b      	lsls	r3, r3, #9
 800a166:	4699      	mov	r9, r3
 800a168:	444a      	add	r2, r9
 800a16a:	0400      	lsls	r0, r0, #16
 800a16c:	0c0b      	lsrs	r3, r1, #16
 800a16e:	0c00      	lsrs	r0, r0, #16
 800a170:	0409      	lsls	r1, r1, #16
 800a172:	1809      	adds	r1, r1, r0
 800a174:	0020      	movs	r0, r4
 800a176:	4699      	mov	r9, r3
 800a178:	4643      	mov	r3, r8
 800a17a:	4370      	muls	r0, r6
 800a17c:	435c      	muls	r4, r3
 800a17e:	437e      	muls	r6, r7
 800a180:	435f      	muls	r7, r3
 800a182:	0c03      	lsrs	r3, r0, #16
 800a184:	4698      	mov	r8, r3
 800a186:	19a4      	adds	r4, r4, r6
 800a188:	4444      	add	r4, r8
 800a18a:	444a      	add	r2, r9
 800a18c:	9703      	str	r7, [sp, #12]
 800a18e:	42a6      	cmp	r6, r4
 800a190:	d904      	bls.n	800a19c <__aeabi_dmul+0x1d4>
 800a192:	2380      	movs	r3, #128	; 0x80
 800a194:	025b      	lsls	r3, r3, #9
 800a196:	4698      	mov	r8, r3
 800a198:	4447      	add	r7, r8
 800a19a:	9703      	str	r7, [sp, #12]
 800a19c:	0423      	lsls	r3, r4, #16
 800a19e:	9e02      	ldr	r6, [sp, #8]
 800a1a0:	469a      	mov	sl, r3
 800a1a2:	9b05      	ldr	r3, [sp, #20]
 800a1a4:	445e      	add	r6, fp
 800a1a6:	4698      	mov	r8, r3
 800a1a8:	42ae      	cmp	r6, r5
 800a1aa:	41ad      	sbcs	r5, r5
 800a1ac:	1876      	adds	r6, r6, r1
 800a1ae:	428e      	cmp	r6, r1
 800a1b0:	4189      	sbcs	r1, r1
 800a1b2:	0400      	lsls	r0, r0, #16
 800a1b4:	0c00      	lsrs	r0, r0, #16
 800a1b6:	4450      	add	r0, sl
 800a1b8:	4440      	add	r0, r8
 800a1ba:	426d      	negs	r5, r5
 800a1bc:	1947      	adds	r7, r0, r5
 800a1be:	46b8      	mov	r8, r7
 800a1c0:	4693      	mov	fp, r2
 800a1c2:	4249      	negs	r1, r1
 800a1c4:	4689      	mov	r9, r1
 800a1c6:	44c3      	add	fp, r8
 800a1c8:	44d9      	add	r9, fp
 800a1ca:	4298      	cmp	r0, r3
 800a1cc:	4180      	sbcs	r0, r0
 800a1ce:	45a8      	cmp	r8, r5
 800a1d0:	41ad      	sbcs	r5, r5
 800a1d2:	4593      	cmp	fp, r2
 800a1d4:	4192      	sbcs	r2, r2
 800a1d6:	4589      	cmp	r9, r1
 800a1d8:	4189      	sbcs	r1, r1
 800a1da:	426d      	negs	r5, r5
 800a1dc:	4240      	negs	r0, r0
 800a1de:	4328      	orrs	r0, r5
 800a1e0:	0c24      	lsrs	r4, r4, #16
 800a1e2:	4252      	negs	r2, r2
 800a1e4:	4249      	negs	r1, r1
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	1900      	adds	r0, r0, r4
 800a1ec:	1880      	adds	r0, r0, r2
 800a1ee:	18c7      	adds	r7, r0, r3
 800a1f0:	464b      	mov	r3, r9
 800a1f2:	0ddc      	lsrs	r4, r3, #23
 800a1f4:	9b04      	ldr	r3, [sp, #16]
 800a1f6:	0275      	lsls	r5, r6, #9
 800a1f8:	431d      	orrs	r5, r3
 800a1fa:	1e6a      	subs	r2, r5, #1
 800a1fc:	4195      	sbcs	r5, r2
 800a1fe:	464b      	mov	r3, r9
 800a200:	0df6      	lsrs	r6, r6, #23
 800a202:	027f      	lsls	r7, r7, #9
 800a204:	4335      	orrs	r5, r6
 800a206:	025a      	lsls	r2, r3, #9
 800a208:	433c      	orrs	r4, r7
 800a20a:	4315      	orrs	r5, r2
 800a20c:	01fb      	lsls	r3, r7, #7
 800a20e:	d400      	bmi.n	800a212 <__aeabi_dmul+0x24a>
 800a210:	e11c      	b.n	800a44c <__aeabi_dmul+0x484>
 800a212:	2101      	movs	r1, #1
 800a214:	086a      	lsrs	r2, r5, #1
 800a216:	400d      	ands	r5, r1
 800a218:	4315      	orrs	r5, r2
 800a21a:	07e2      	lsls	r2, r4, #31
 800a21c:	4315      	orrs	r5, r2
 800a21e:	0864      	lsrs	r4, r4, #1
 800a220:	494f      	ldr	r1, [pc, #316]	; (800a360 <__aeabi_dmul+0x398>)
 800a222:	4461      	add	r1, ip
 800a224:	2900      	cmp	r1, #0
 800a226:	dc00      	bgt.n	800a22a <__aeabi_dmul+0x262>
 800a228:	e0b0      	b.n	800a38c <__aeabi_dmul+0x3c4>
 800a22a:	076b      	lsls	r3, r5, #29
 800a22c:	d009      	beq.n	800a242 <__aeabi_dmul+0x27a>
 800a22e:	220f      	movs	r2, #15
 800a230:	402a      	ands	r2, r5
 800a232:	2a04      	cmp	r2, #4
 800a234:	d005      	beq.n	800a242 <__aeabi_dmul+0x27a>
 800a236:	1d2a      	adds	r2, r5, #4
 800a238:	42aa      	cmp	r2, r5
 800a23a:	41ad      	sbcs	r5, r5
 800a23c:	426d      	negs	r5, r5
 800a23e:	1964      	adds	r4, r4, r5
 800a240:	0015      	movs	r5, r2
 800a242:	01e3      	lsls	r3, r4, #7
 800a244:	d504      	bpl.n	800a250 <__aeabi_dmul+0x288>
 800a246:	2180      	movs	r1, #128	; 0x80
 800a248:	4a46      	ldr	r2, [pc, #280]	; (800a364 <__aeabi_dmul+0x39c>)
 800a24a:	00c9      	lsls	r1, r1, #3
 800a24c:	4014      	ands	r4, r2
 800a24e:	4461      	add	r1, ip
 800a250:	4a45      	ldr	r2, [pc, #276]	; (800a368 <__aeabi_dmul+0x3a0>)
 800a252:	4291      	cmp	r1, r2
 800a254:	dd00      	ble.n	800a258 <__aeabi_dmul+0x290>
 800a256:	e726      	b.n	800a0a6 <__aeabi_dmul+0xde>
 800a258:	0762      	lsls	r2, r4, #29
 800a25a:	08ed      	lsrs	r5, r5, #3
 800a25c:	0264      	lsls	r4, r4, #9
 800a25e:	0549      	lsls	r1, r1, #21
 800a260:	4315      	orrs	r5, r2
 800a262:	0b24      	lsrs	r4, r4, #12
 800a264:	0d4a      	lsrs	r2, r1, #21
 800a266:	e710      	b.n	800a08a <__aeabi_dmul+0xc2>
 800a268:	4652      	mov	r2, sl
 800a26a:	4332      	orrs	r2, r6
 800a26c:	d100      	bne.n	800a270 <__aeabi_dmul+0x2a8>
 800a26e:	e07f      	b.n	800a370 <__aeabi_dmul+0x3a8>
 800a270:	2e00      	cmp	r6, #0
 800a272:	d100      	bne.n	800a276 <__aeabi_dmul+0x2ae>
 800a274:	e0dc      	b.n	800a430 <__aeabi_dmul+0x468>
 800a276:	0030      	movs	r0, r6
 800a278:	f000 fdd6 	bl	800ae28 <__clzsi2>
 800a27c:	0002      	movs	r2, r0
 800a27e:	3a0b      	subs	r2, #11
 800a280:	231d      	movs	r3, #29
 800a282:	0001      	movs	r1, r0
 800a284:	1a9b      	subs	r3, r3, r2
 800a286:	4652      	mov	r2, sl
 800a288:	3908      	subs	r1, #8
 800a28a:	40da      	lsrs	r2, r3
 800a28c:	408e      	lsls	r6, r1
 800a28e:	4316      	orrs	r6, r2
 800a290:	4652      	mov	r2, sl
 800a292:	408a      	lsls	r2, r1
 800a294:	9b00      	ldr	r3, [sp, #0]
 800a296:	4935      	ldr	r1, [pc, #212]	; (800a36c <__aeabi_dmul+0x3a4>)
 800a298:	1a18      	subs	r0, r3, r0
 800a29a:	0003      	movs	r3, r0
 800a29c:	468c      	mov	ip, r1
 800a29e:	4463      	add	r3, ip
 800a2a0:	2000      	movs	r0, #0
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	e6d3      	b.n	800a04e <__aeabi_dmul+0x86>
 800a2a6:	0025      	movs	r5, r4
 800a2a8:	4305      	orrs	r5, r0
 800a2aa:	d04a      	beq.n	800a342 <__aeabi_dmul+0x37a>
 800a2ac:	2c00      	cmp	r4, #0
 800a2ae:	d100      	bne.n	800a2b2 <__aeabi_dmul+0x2ea>
 800a2b0:	e0b0      	b.n	800a414 <__aeabi_dmul+0x44c>
 800a2b2:	0020      	movs	r0, r4
 800a2b4:	f000 fdb8 	bl	800ae28 <__clzsi2>
 800a2b8:	0001      	movs	r1, r0
 800a2ba:	0002      	movs	r2, r0
 800a2bc:	390b      	subs	r1, #11
 800a2be:	231d      	movs	r3, #29
 800a2c0:	0010      	movs	r0, r2
 800a2c2:	1a5b      	subs	r3, r3, r1
 800a2c4:	0031      	movs	r1, r6
 800a2c6:	0035      	movs	r5, r6
 800a2c8:	3808      	subs	r0, #8
 800a2ca:	4084      	lsls	r4, r0
 800a2cc:	40d9      	lsrs	r1, r3
 800a2ce:	4085      	lsls	r5, r0
 800a2d0:	430c      	orrs	r4, r1
 800a2d2:	4826      	ldr	r0, [pc, #152]	; (800a36c <__aeabi_dmul+0x3a4>)
 800a2d4:	1a83      	subs	r3, r0, r2
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4699      	mov	r9, r3
 800a2dc:	469b      	mov	fp, r3
 800a2de:	e697      	b.n	800a010 <__aeabi_dmul+0x48>
 800a2e0:	0005      	movs	r5, r0
 800a2e2:	4325      	orrs	r5, r4
 800a2e4:	d126      	bne.n	800a334 <__aeabi_dmul+0x36c>
 800a2e6:	2208      	movs	r2, #8
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	2400      	movs	r4, #0
 800a2ee:	4691      	mov	r9, r2
 800a2f0:	469b      	mov	fp, r3
 800a2f2:	e68d      	b.n	800a010 <__aeabi_dmul+0x48>
 800a2f4:	4652      	mov	r2, sl
 800a2f6:	9b00      	ldr	r3, [sp, #0]
 800a2f8:	4332      	orrs	r2, r6
 800a2fa:	d110      	bne.n	800a31e <__aeabi_dmul+0x356>
 800a2fc:	4915      	ldr	r1, [pc, #84]	; (800a354 <__aeabi_dmul+0x38c>)
 800a2fe:	2600      	movs	r6, #0
 800a300:	468c      	mov	ip, r1
 800a302:	4463      	add	r3, ip
 800a304:	4649      	mov	r1, r9
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	2302      	movs	r3, #2
 800a30a:	4319      	orrs	r1, r3
 800a30c:	4689      	mov	r9, r1
 800a30e:	2002      	movs	r0, #2
 800a310:	e69d      	b.n	800a04e <__aeabi_dmul+0x86>
 800a312:	465b      	mov	r3, fp
 800a314:	9701      	str	r7, [sp, #4]
 800a316:	2b02      	cmp	r3, #2
 800a318:	d000      	beq.n	800a31c <__aeabi_dmul+0x354>
 800a31a:	e6ad      	b.n	800a078 <__aeabi_dmul+0xb0>
 800a31c:	e6c3      	b.n	800a0a6 <__aeabi_dmul+0xde>
 800a31e:	4a0d      	ldr	r2, [pc, #52]	; (800a354 <__aeabi_dmul+0x38c>)
 800a320:	2003      	movs	r0, #3
 800a322:	4694      	mov	ip, r2
 800a324:	4463      	add	r3, ip
 800a326:	464a      	mov	r2, r9
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	2303      	movs	r3, #3
 800a32c:	431a      	orrs	r2, r3
 800a32e:	4691      	mov	r9, r2
 800a330:	4652      	mov	r2, sl
 800a332:	e68c      	b.n	800a04e <__aeabi_dmul+0x86>
 800a334:	220c      	movs	r2, #12
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	2303      	movs	r3, #3
 800a33a:	0005      	movs	r5, r0
 800a33c:	4691      	mov	r9, r2
 800a33e:	469b      	mov	fp, r3
 800a340:	e666      	b.n	800a010 <__aeabi_dmul+0x48>
 800a342:	2304      	movs	r3, #4
 800a344:	4699      	mov	r9, r3
 800a346:	2300      	movs	r3, #0
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	3301      	adds	r3, #1
 800a34c:	2400      	movs	r4, #0
 800a34e:	469b      	mov	fp, r3
 800a350:	e65e      	b.n	800a010 <__aeabi_dmul+0x48>
 800a352:	46c0      	nop			; (mov r8, r8)
 800a354:	000007ff 	.word	0x000007ff
 800a358:	fffffc01 	.word	0xfffffc01
 800a35c:	08010e98 	.word	0x08010e98
 800a360:	000003ff 	.word	0x000003ff
 800a364:	feffffff 	.word	0xfeffffff
 800a368:	000007fe 	.word	0x000007fe
 800a36c:	fffffc0d 	.word	0xfffffc0d
 800a370:	4649      	mov	r1, r9
 800a372:	2301      	movs	r3, #1
 800a374:	4319      	orrs	r1, r3
 800a376:	4689      	mov	r9, r1
 800a378:	2600      	movs	r6, #0
 800a37a:	2001      	movs	r0, #1
 800a37c:	e667      	b.n	800a04e <__aeabi_dmul+0x86>
 800a37e:	2300      	movs	r3, #0
 800a380:	2480      	movs	r4, #128	; 0x80
 800a382:	2500      	movs	r5, #0
 800a384:	4a43      	ldr	r2, [pc, #268]	; (800a494 <__aeabi_dmul+0x4cc>)
 800a386:	9301      	str	r3, [sp, #4]
 800a388:	0324      	lsls	r4, r4, #12
 800a38a:	e67e      	b.n	800a08a <__aeabi_dmul+0xc2>
 800a38c:	2001      	movs	r0, #1
 800a38e:	1a40      	subs	r0, r0, r1
 800a390:	2838      	cmp	r0, #56	; 0x38
 800a392:	dd00      	ble.n	800a396 <__aeabi_dmul+0x3ce>
 800a394:	e676      	b.n	800a084 <__aeabi_dmul+0xbc>
 800a396:	281f      	cmp	r0, #31
 800a398:	dd5b      	ble.n	800a452 <__aeabi_dmul+0x48a>
 800a39a:	221f      	movs	r2, #31
 800a39c:	0023      	movs	r3, r4
 800a39e:	4252      	negs	r2, r2
 800a3a0:	1a51      	subs	r1, r2, r1
 800a3a2:	40cb      	lsrs	r3, r1
 800a3a4:	0019      	movs	r1, r3
 800a3a6:	2820      	cmp	r0, #32
 800a3a8:	d003      	beq.n	800a3b2 <__aeabi_dmul+0x3ea>
 800a3aa:	4a3b      	ldr	r2, [pc, #236]	; (800a498 <__aeabi_dmul+0x4d0>)
 800a3ac:	4462      	add	r2, ip
 800a3ae:	4094      	lsls	r4, r2
 800a3b0:	4325      	orrs	r5, r4
 800a3b2:	1e6a      	subs	r2, r5, #1
 800a3b4:	4195      	sbcs	r5, r2
 800a3b6:	002a      	movs	r2, r5
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	2107      	movs	r1, #7
 800a3bc:	000d      	movs	r5, r1
 800a3be:	2400      	movs	r4, #0
 800a3c0:	4015      	ands	r5, r2
 800a3c2:	4211      	tst	r1, r2
 800a3c4:	d05b      	beq.n	800a47e <__aeabi_dmul+0x4b6>
 800a3c6:	210f      	movs	r1, #15
 800a3c8:	2400      	movs	r4, #0
 800a3ca:	4011      	ands	r1, r2
 800a3cc:	2904      	cmp	r1, #4
 800a3ce:	d053      	beq.n	800a478 <__aeabi_dmul+0x4b0>
 800a3d0:	1d11      	adds	r1, r2, #4
 800a3d2:	4291      	cmp	r1, r2
 800a3d4:	4192      	sbcs	r2, r2
 800a3d6:	4252      	negs	r2, r2
 800a3d8:	18a4      	adds	r4, r4, r2
 800a3da:	000a      	movs	r2, r1
 800a3dc:	0223      	lsls	r3, r4, #8
 800a3de:	d54b      	bpl.n	800a478 <__aeabi_dmul+0x4b0>
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	2400      	movs	r4, #0
 800a3e4:	2500      	movs	r5, #0
 800a3e6:	e650      	b.n	800a08a <__aeabi_dmul+0xc2>
 800a3e8:	2380      	movs	r3, #128	; 0x80
 800a3ea:	031b      	lsls	r3, r3, #12
 800a3ec:	421c      	tst	r4, r3
 800a3ee:	d009      	beq.n	800a404 <__aeabi_dmul+0x43c>
 800a3f0:	421e      	tst	r6, r3
 800a3f2:	d107      	bne.n	800a404 <__aeabi_dmul+0x43c>
 800a3f4:	4333      	orrs	r3, r6
 800a3f6:	031c      	lsls	r4, r3, #12
 800a3f8:	4643      	mov	r3, r8
 800a3fa:	0015      	movs	r5, r2
 800a3fc:	0b24      	lsrs	r4, r4, #12
 800a3fe:	4a25      	ldr	r2, [pc, #148]	; (800a494 <__aeabi_dmul+0x4cc>)
 800a400:	9301      	str	r3, [sp, #4]
 800a402:	e642      	b.n	800a08a <__aeabi_dmul+0xc2>
 800a404:	2280      	movs	r2, #128	; 0x80
 800a406:	0312      	lsls	r2, r2, #12
 800a408:	4314      	orrs	r4, r2
 800a40a:	0324      	lsls	r4, r4, #12
 800a40c:	4a21      	ldr	r2, [pc, #132]	; (800a494 <__aeabi_dmul+0x4cc>)
 800a40e:	0b24      	lsrs	r4, r4, #12
 800a410:	9701      	str	r7, [sp, #4]
 800a412:	e63a      	b.n	800a08a <__aeabi_dmul+0xc2>
 800a414:	f000 fd08 	bl	800ae28 <__clzsi2>
 800a418:	0001      	movs	r1, r0
 800a41a:	0002      	movs	r2, r0
 800a41c:	3115      	adds	r1, #21
 800a41e:	3220      	adds	r2, #32
 800a420:	291c      	cmp	r1, #28
 800a422:	dc00      	bgt.n	800a426 <__aeabi_dmul+0x45e>
 800a424:	e74b      	b.n	800a2be <__aeabi_dmul+0x2f6>
 800a426:	0034      	movs	r4, r6
 800a428:	3808      	subs	r0, #8
 800a42a:	2500      	movs	r5, #0
 800a42c:	4084      	lsls	r4, r0
 800a42e:	e750      	b.n	800a2d2 <__aeabi_dmul+0x30a>
 800a430:	f000 fcfa 	bl	800ae28 <__clzsi2>
 800a434:	0003      	movs	r3, r0
 800a436:	001a      	movs	r2, r3
 800a438:	3215      	adds	r2, #21
 800a43a:	3020      	adds	r0, #32
 800a43c:	2a1c      	cmp	r2, #28
 800a43e:	dc00      	bgt.n	800a442 <__aeabi_dmul+0x47a>
 800a440:	e71e      	b.n	800a280 <__aeabi_dmul+0x2b8>
 800a442:	4656      	mov	r6, sl
 800a444:	3b08      	subs	r3, #8
 800a446:	2200      	movs	r2, #0
 800a448:	409e      	lsls	r6, r3
 800a44a:	e723      	b.n	800a294 <__aeabi_dmul+0x2cc>
 800a44c:	9b00      	ldr	r3, [sp, #0]
 800a44e:	469c      	mov	ip, r3
 800a450:	e6e6      	b.n	800a220 <__aeabi_dmul+0x258>
 800a452:	4912      	ldr	r1, [pc, #72]	; (800a49c <__aeabi_dmul+0x4d4>)
 800a454:	0022      	movs	r2, r4
 800a456:	4461      	add	r1, ip
 800a458:	002e      	movs	r6, r5
 800a45a:	408d      	lsls	r5, r1
 800a45c:	408a      	lsls	r2, r1
 800a45e:	40c6      	lsrs	r6, r0
 800a460:	1e69      	subs	r1, r5, #1
 800a462:	418d      	sbcs	r5, r1
 800a464:	4332      	orrs	r2, r6
 800a466:	432a      	orrs	r2, r5
 800a468:	40c4      	lsrs	r4, r0
 800a46a:	0753      	lsls	r3, r2, #29
 800a46c:	d0b6      	beq.n	800a3dc <__aeabi_dmul+0x414>
 800a46e:	210f      	movs	r1, #15
 800a470:	4011      	ands	r1, r2
 800a472:	2904      	cmp	r1, #4
 800a474:	d1ac      	bne.n	800a3d0 <__aeabi_dmul+0x408>
 800a476:	e7b1      	b.n	800a3dc <__aeabi_dmul+0x414>
 800a478:	0765      	lsls	r5, r4, #29
 800a47a:	0264      	lsls	r4, r4, #9
 800a47c:	0b24      	lsrs	r4, r4, #12
 800a47e:	08d2      	lsrs	r2, r2, #3
 800a480:	4315      	orrs	r5, r2
 800a482:	2200      	movs	r2, #0
 800a484:	e601      	b.n	800a08a <__aeabi_dmul+0xc2>
 800a486:	2280      	movs	r2, #128	; 0x80
 800a488:	0312      	lsls	r2, r2, #12
 800a48a:	4314      	orrs	r4, r2
 800a48c:	0324      	lsls	r4, r4, #12
 800a48e:	4a01      	ldr	r2, [pc, #4]	; (800a494 <__aeabi_dmul+0x4cc>)
 800a490:	0b24      	lsrs	r4, r4, #12
 800a492:	e5fa      	b.n	800a08a <__aeabi_dmul+0xc2>
 800a494:	000007ff 	.word	0x000007ff
 800a498:	0000043e 	.word	0x0000043e
 800a49c:	0000041e 	.word	0x0000041e

0800a4a0 <__aeabi_dsub>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	4657      	mov	r7, sl
 800a4a4:	464e      	mov	r6, r9
 800a4a6:	4645      	mov	r5, r8
 800a4a8:	46de      	mov	lr, fp
 800a4aa:	b5e0      	push	{r5, r6, r7, lr}
 800a4ac:	001e      	movs	r6, r3
 800a4ae:	0017      	movs	r7, r2
 800a4b0:	004a      	lsls	r2, r1, #1
 800a4b2:	030b      	lsls	r3, r1, #12
 800a4b4:	0d52      	lsrs	r2, r2, #21
 800a4b6:	0a5b      	lsrs	r3, r3, #9
 800a4b8:	4690      	mov	r8, r2
 800a4ba:	0f42      	lsrs	r2, r0, #29
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	0fcd      	lsrs	r5, r1, #31
 800a4c0:	4ccd      	ldr	r4, [pc, #820]	; (800a7f8 <__aeabi_dsub+0x358>)
 800a4c2:	0331      	lsls	r1, r6, #12
 800a4c4:	00c3      	lsls	r3, r0, #3
 800a4c6:	4694      	mov	ip, r2
 800a4c8:	0070      	lsls	r0, r6, #1
 800a4ca:	0f7a      	lsrs	r2, r7, #29
 800a4cc:	0a49      	lsrs	r1, r1, #9
 800a4ce:	00ff      	lsls	r7, r7, #3
 800a4d0:	469a      	mov	sl, r3
 800a4d2:	46b9      	mov	r9, r7
 800a4d4:	0d40      	lsrs	r0, r0, #21
 800a4d6:	0ff6      	lsrs	r6, r6, #31
 800a4d8:	4311      	orrs	r1, r2
 800a4da:	42a0      	cmp	r0, r4
 800a4dc:	d100      	bne.n	800a4e0 <__aeabi_dsub+0x40>
 800a4de:	e0b1      	b.n	800a644 <__aeabi_dsub+0x1a4>
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	4056      	eors	r6, r2
 800a4e4:	46b3      	mov	fp, r6
 800a4e6:	42b5      	cmp	r5, r6
 800a4e8:	d100      	bne.n	800a4ec <__aeabi_dsub+0x4c>
 800a4ea:	e088      	b.n	800a5fe <__aeabi_dsub+0x15e>
 800a4ec:	4642      	mov	r2, r8
 800a4ee:	1a12      	subs	r2, r2, r0
 800a4f0:	2a00      	cmp	r2, #0
 800a4f2:	dc00      	bgt.n	800a4f6 <__aeabi_dsub+0x56>
 800a4f4:	e0ae      	b.n	800a654 <__aeabi_dsub+0x1b4>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d100      	bne.n	800a4fc <__aeabi_dsub+0x5c>
 800a4fa:	e0c1      	b.n	800a680 <__aeabi_dsub+0x1e0>
 800a4fc:	48be      	ldr	r0, [pc, #760]	; (800a7f8 <__aeabi_dsub+0x358>)
 800a4fe:	4580      	cmp	r8, r0
 800a500:	d100      	bne.n	800a504 <__aeabi_dsub+0x64>
 800a502:	e151      	b.n	800a7a8 <__aeabi_dsub+0x308>
 800a504:	2080      	movs	r0, #128	; 0x80
 800a506:	0400      	lsls	r0, r0, #16
 800a508:	4301      	orrs	r1, r0
 800a50a:	2a38      	cmp	r2, #56	; 0x38
 800a50c:	dd00      	ble.n	800a510 <__aeabi_dsub+0x70>
 800a50e:	e17b      	b.n	800a808 <__aeabi_dsub+0x368>
 800a510:	2a1f      	cmp	r2, #31
 800a512:	dd00      	ble.n	800a516 <__aeabi_dsub+0x76>
 800a514:	e1ee      	b.n	800a8f4 <__aeabi_dsub+0x454>
 800a516:	2020      	movs	r0, #32
 800a518:	003e      	movs	r6, r7
 800a51a:	1a80      	subs	r0, r0, r2
 800a51c:	000c      	movs	r4, r1
 800a51e:	40d6      	lsrs	r6, r2
 800a520:	40d1      	lsrs	r1, r2
 800a522:	4087      	lsls	r7, r0
 800a524:	4662      	mov	r2, ip
 800a526:	4084      	lsls	r4, r0
 800a528:	1a52      	subs	r2, r2, r1
 800a52a:	1e78      	subs	r0, r7, #1
 800a52c:	4187      	sbcs	r7, r0
 800a52e:	4694      	mov	ip, r2
 800a530:	4334      	orrs	r4, r6
 800a532:	4327      	orrs	r7, r4
 800a534:	1bdc      	subs	r4, r3, r7
 800a536:	42a3      	cmp	r3, r4
 800a538:	419b      	sbcs	r3, r3
 800a53a:	4662      	mov	r2, ip
 800a53c:	425b      	negs	r3, r3
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	4699      	mov	r9, r3
 800a542:	464b      	mov	r3, r9
 800a544:	021b      	lsls	r3, r3, #8
 800a546:	d400      	bmi.n	800a54a <__aeabi_dsub+0xaa>
 800a548:	e118      	b.n	800a77c <__aeabi_dsub+0x2dc>
 800a54a:	464b      	mov	r3, r9
 800a54c:	0258      	lsls	r0, r3, #9
 800a54e:	0a43      	lsrs	r3, r0, #9
 800a550:	4699      	mov	r9, r3
 800a552:	464b      	mov	r3, r9
 800a554:	2b00      	cmp	r3, #0
 800a556:	d100      	bne.n	800a55a <__aeabi_dsub+0xba>
 800a558:	e137      	b.n	800a7ca <__aeabi_dsub+0x32a>
 800a55a:	4648      	mov	r0, r9
 800a55c:	f000 fc64 	bl	800ae28 <__clzsi2>
 800a560:	0001      	movs	r1, r0
 800a562:	3908      	subs	r1, #8
 800a564:	2320      	movs	r3, #32
 800a566:	0022      	movs	r2, r4
 800a568:	4648      	mov	r0, r9
 800a56a:	1a5b      	subs	r3, r3, r1
 800a56c:	40da      	lsrs	r2, r3
 800a56e:	4088      	lsls	r0, r1
 800a570:	408c      	lsls	r4, r1
 800a572:	4643      	mov	r3, r8
 800a574:	4310      	orrs	r0, r2
 800a576:	4588      	cmp	r8, r1
 800a578:	dd00      	ble.n	800a57c <__aeabi_dsub+0xdc>
 800a57a:	e136      	b.n	800a7ea <__aeabi_dsub+0x34a>
 800a57c:	1ac9      	subs	r1, r1, r3
 800a57e:	1c4b      	adds	r3, r1, #1
 800a580:	2b1f      	cmp	r3, #31
 800a582:	dd00      	ble.n	800a586 <__aeabi_dsub+0xe6>
 800a584:	e0ea      	b.n	800a75c <__aeabi_dsub+0x2bc>
 800a586:	2220      	movs	r2, #32
 800a588:	0026      	movs	r6, r4
 800a58a:	1ad2      	subs	r2, r2, r3
 800a58c:	0001      	movs	r1, r0
 800a58e:	4094      	lsls	r4, r2
 800a590:	40de      	lsrs	r6, r3
 800a592:	40d8      	lsrs	r0, r3
 800a594:	2300      	movs	r3, #0
 800a596:	4091      	lsls	r1, r2
 800a598:	1e62      	subs	r2, r4, #1
 800a59a:	4194      	sbcs	r4, r2
 800a59c:	4681      	mov	r9, r0
 800a59e:	4698      	mov	r8, r3
 800a5a0:	4331      	orrs	r1, r6
 800a5a2:	430c      	orrs	r4, r1
 800a5a4:	0763      	lsls	r3, r4, #29
 800a5a6:	d009      	beq.n	800a5bc <__aeabi_dsub+0x11c>
 800a5a8:	230f      	movs	r3, #15
 800a5aa:	4023      	ands	r3, r4
 800a5ac:	2b04      	cmp	r3, #4
 800a5ae:	d005      	beq.n	800a5bc <__aeabi_dsub+0x11c>
 800a5b0:	1d23      	adds	r3, r4, #4
 800a5b2:	42a3      	cmp	r3, r4
 800a5b4:	41a4      	sbcs	r4, r4
 800a5b6:	4264      	negs	r4, r4
 800a5b8:	44a1      	add	r9, r4
 800a5ba:	001c      	movs	r4, r3
 800a5bc:	464b      	mov	r3, r9
 800a5be:	021b      	lsls	r3, r3, #8
 800a5c0:	d400      	bmi.n	800a5c4 <__aeabi_dsub+0x124>
 800a5c2:	e0de      	b.n	800a782 <__aeabi_dsub+0x2e2>
 800a5c4:	4641      	mov	r1, r8
 800a5c6:	4b8c      	ldr	r3, [pc, #560]	; (800a7f8 <__aeabi_dsub+0x358>)
 800a5c8:	3101      	adds	r1, #1
 800a5ca:	4299      	cmp	r1, r3
 800a5cc:	d100      	bne.n	800a5d0 <__aeabi_dsub+0x130>
 800a5ce:	e0e7      	b.n	800a7a0 <__aeabi_dsub+0x300>
 800a5d0:	464b      	mov	r3, r9
 800a5d2:	488a      	ldr	r0, [pc, #552]	; (800a7fc <__aeabi_dsub+0x35c>)
 800a5d4:	08e4      	lsrs	r4, r4, #3
 800a5d6:	4003      	ands	r3, r0
 800a5d8:	0018      	movs	r0, r3
 800a5da:	0549      	lsls	r1, r1, #21
 800a5dc:	075b      	lsls	r3, r3, #29
 800a5de:	0240      	lsls	r0, r0, #9
 800a5e0:	4323      	orrs	r3, r4
 800a5e2:	0d4a      	lsrs	r2, r1, #21
 800a5e4:	0b04      	lsrs	r4, r0, #12
 800a5e6:	0512      	lsls	r2, r2, #20
 800a5e8:	07ed      	lsls	r5, r5, #31
 800a5ea:	4322      	orrs	r2, r4
 800a5ec:	432a      	orrs	r2, r5
 800a5ee:	0018      	movs	r0, r3
 800a5f0:	0011      	movs	r1, r2
 800a5f2:	bcf0      	pop	{r4, r5, r6, r7}
 800a5f4:	46bb      	mov	fp, r7
 800a5f6:	46b2      	mov	sl, r6
 800a5f8:	46a9      	mov	r9, r5
 800a5fa:	46a0      	mov	r8, r4
 800a5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5fe:	4642      	mov	r2, r8
 800a600:	1a12      	subs	r2, r2, r0
 800a602:	2a00      	cmp	r2, #0
 800a604:	dd52      	ble.n	800a6ac <__aeabi_dsub+0x20c>
 800a606:	2800      	cmp	r0, #0
 800a608:	d100      	bne.n	800a60c <__aeabi_dsub+0x16c>
 800a60a:	e09c      	b.n	800a746 <__aeabi_dsub+0x2a6>
 800a60c:	45a0      	cmp	r8, r4
 800a60e:	d100      	bne.n	800a612 <__aeabi_dsub+0x172>
 800a610:	e0ca      	b.n	800a7a8 <__aeabi_dsub+0x308>
 800a612:	2080      	movs	r0, #128	; 0x80
 800a614:	0400      	lsls	r0, r0, #16
 800a616:	4301      	orrs	r1, r0
 800a618:	2a38      	cmp	r2, #56	; 0x38
 800a61a:	dd00      	ble.n	800a61e <__aeabi_dsub+0x17e>
 800a61c:	e149      	b.n	800a8b2 <__aeabi_dsub+0x412>
 800a61e:	2a1f      	cmp	r2, #31
 800a620:	dc00      	bgt.n	800a624 <__aeabi_dsub+0x184>
 800a622:	e197      	b.n	800a954 <__aeabi_dsub+0x4b4>
 800a624:	0010      	movs	r0, r2
 800a626:	000e      	movs	r6, r1
 800a628:	3820      	subs	r0, #32
 800a62a:	40c6      	lsrs	r6, r0
 800a62c:	2a20      	cmp	r2, #32
 800a62e:	d004      	beq.n	800a63a <__aeabi_dsub+0x19a>
 800a630:	2040      	movs	r0, #64	; 0x40
 800a632:	1a82      	subs	r2, r0, r2
 800a634:	4091      	lsls	r1, r2
 800a636:	430f      	orrs	r7, r1
 800a638:	46b9      	mov	r9, r7
 800a63a:	464c      	mov	r4, r9
 800a63c:	1e62      	subs	r2, r4, #1
 800a63e:	4194      	sbcs	r4, r2
 800a640:	4334      	orrs	r4, r6
 800a642:	e13a      	b.n	800a8ba <__aeabi_dsub+0x41a>
 800a644:	000a      	movs	r2, r1
 800a646:	433a      	orrs	r2, r7
 800a648:	d028      	beq.n	800a69c <__aeabi_dsub+0x1fc>
 800a64a:	46b3      	mov	fp, r6
 800a64c:	42b5      	cmp	r5, r6
 800a64e:	d02b      	beq.n	800a6a8 <__aeabi_dsub+0x208>
 800a650:	4a6b      	ldr	r2, [pc, #428]	; (800a800 <__aeabi_dsub+0x360>)
 800a652:	4442      	add	r2, r8
 800a654:	2a00      	cmp	r2, #0
 800a656:	d05d      	beq.n	800a714 <__aeabi_dsub+0x274>
 800a658:	4642      	mov	r2, r8
 800a65a:	4644      	mov	r4, r8
 800a65c:	1a82      	subs	r2, r0, r2
 800a65e:	2c00      	cmp	r4, #0
 800a660:	d000      	beq.n	800a664 <__aeabi_dsub+0x1c4>
 800a662:	e0f5      	b.n	800a850 <__aeabi_dsub+0x3b0>
 800a664:	4665      	mov	r5, ip
 800a666:	431d      	orrs	r5, r3
 800a668:	d100      	bne.n	800a66c <__aeabi_dsub+0x1cc>
 800a66a:	e19c      	b.n	800a9a6 <__aeabi_dsub+0x506>
 800a66c:	1e55      	subs	r5, r2, #1
 800a66e:	2a01      	cmp	r2, #1
 800a670:	d100      	bne.n	800a674 <__aeabi_dsub+0x1d4>
 800a672:	e1fb      	b.n	800aa6c <__aeabi_dsub+0x5cc>
 800a674:	4c60      	ldr	r4, [pc, #384]	; (800a7f8 <__aeabi_dsub+0x358>)
 800a676:	42a2      	cmp	r2, r4
 800a678:	d100      	bne.n	800a67c <__aeabi_dsub+0x1dc>
 800a67a:	e1bd      	b.n	800a9f8 <__aeabi_dsub+0x558>
 800a67c:	002a      	movs	r2, r5
 800a67e:	e0f0      	b.n	800a862 <__aeabi_dsub+0x3c2>
 800a680:	0008      	movs	r0, r1
 800a682:	4338      	orrs	r0, r7
 800a684:	d100      	bne.n	800a688 <__aeabi_dsub+0x1e8>
 800a686:	e0c3      	b.n	800a810 <__aeabi_dsub+0x370>
 800a688:	1e50      	subs	r0, r2, #1
 800a68a:	2a01      	cmp	r2, #1
 800a68c:	d100      	bne.n	800a690 <__aeabi_dsub+0x1f0>
 800a68e:	e1a8      	b.n	800a9e2 <__aeabi_dsub+0x542>
 800a690:	4c59      	ldr	r4, [pc, #356]	; (800a7f8 <__aeabi_dsub+0x358>)
 800a692:	42a2      	cmp	r2, r4
 800a694:	d100      	bne.n	800a698 <__aeabi_dsub+0x1f8>
 800a696:	e087      	b.n	800a7a8 <__aeabi_dsub+0x308>
 800a698:	0002      	movs	r2, r0
 800a69a:	e736      	b.n	800a50a <__aeabi_dsub+0x6a>
 800a69c:	2201      	movs	r2, #1
 800a69e:	4056      	eors	r6, r2
 800a6a0:	46b3      	mov	fp, r6
 800a6a2:	42b5      	cmp	r5, r6
 800a6a4:	d000      	beq.n	800a6a8 <__aeabi_dsub+0x208>
 800a6a6:	e721      	b.n	800a4ec <__aeabi_dsub+0x4c>
 800a6a8:	4a55      	ldr	r2, [pc, #340]	; (800a800 <__aeabi_dsub+0x360>)
 800a6aa:	4442      	add	r2, r8
 800a6ac:	2a00      	cmp	r2, #0
 800a6ae:	d100      	bne.n	800a6b2 <__aeabi_dsub+0x212>
 800a6b0:	e0b5      	b.n	800a81e <__aeabi_dsub+0x37e>
 800a6b2:	4642      	mov	r2, r8
 800a6b4:	4644      	mov	r4, r8
 800a6b6:	1a82      	subs	r2, r0, r2
 800a6b8:	2c00      	cmp	r4, #0
 800a6ba:	d100      	bne.n	800a6be <__aeabi_dsub+0x21e>
 800a6bc:	e138      	b.n	800a930 <__aeabi_dsub+0x490>
 800a6be:	4e4e      	ldr	r6, [pc, #312]	; (800a7f8 <__aeabi_dsub+0x358>)
 800a6c0:	42b0      	cmp	r0, r6
 800a6c2:	d100      	bne.n	800a6c6 <__aeabi_dsub+0x226>
 800a6c4:	e1de      	b.n	800aa84 <__aeabi_dsub+0x5e4>
 800a6c6:	2680      	movs	r6, #128	; 0x80
 800a6c8:	4664      	mov	r4, ip
 800a6ca:	0436      	lsls	r6, r6, #16
 800a6cc:	4334      	orrs	r4, r6
 800a6ce:	46a4      	mov	ip, r4
 800a6d0:	2a38      	cmp	r2, #56	; 0x38
 800a6d2:	dd00      	ble.n	800a6d6 <__aeabi_dsub+0x236>
 800a6d4:	e196      	b.n	800aa04 <__aeabi_dsub+0x564>
 800a6d6:	2a1f      	cmp	r2, #31
 800a6d8:	dd00      	ble.n	800a6dc <__aeabi_dsub+0x23c>
 800a6da:	e224      	b.n	800ab26 <__aeabi_dsub+0x686>
 800a6dc:	2620      	movs	r6, #32
 800a6de:	1ab4      	subs	r4, r6, r2
 800a6e0:	46a2      	mov	sl, r4
 800a6e2:	4664      	mov	r4, ip
 800a6e4:	4656      	mov	r6, sl
 800a6e6:	40b4      	lsls	r4, r6
 800a6e8:	46a1      	mov	r9, r4
 800a6ea:	001c      	movs	r4, r3
 800a6ec:	464e      	mov	r6, r9
 800a6ee:	40d4      	lsrs	r4, r2
 800a6f0:	4326      	orrs	r6, r4
 800a6f2:	0034      	movs	r4, r6
 800a6f4:	4656      	mov	r6, sl
 800a6f6:	40b3      	lsls	r3, r6
 800a6f8:	1e5e      	subs	r6, r3, #1
 800a6fa:	41b3      	sbcs	r3, r6
 800a6fc:	431c      	orrs	r4, r3
 800a6fe:	4663      	mov	r3, ip
 800a700:	40d3      	lsrs	r3, r2
 800a702:	18c9      	adds	r1, r1, r3
 800a704:	19e4      	adds	r4, r4, r7
 800a706:	42bc      	cmp	r4, r7
 800a708:	41bf      	sbcs	r7, r7
 800a70a:	427f      	negs	r7, r7
 800a70c:	46b9      	mov	r9, r7
 800a70e:	4680      	mov	r8, r0
 800a710:	4489      	add	r9, r1
 800a712:	e0d8      	b.n	800a8c6 <__aeabi_dsub+0x426>
 800a714:	4640      	mov	r0, r8
 800a716:	4c3b      	ldr	r4, [pc, #236]	; (800a804 <__aeabi_dsub+0x364>)
 800a718:	3001      	adds	r0, #1
 800a71a:	4220      	tst	r0, r4
 800a71c:	d000      	beq.n	800a720 <__aeabi_dsub+0x280>
 800a71e:	e0b4      	b.n	800a88a <__aeabi_dsub+0x3ea>
 800a720:	4640      	mov	r0, r8
 800a722:	2800      	cmp	r0, #0
 800a724:	d000      	beq.n	800a728 <__aeabi_dsub+0x288>
 800a726:	e144      	b.n	800a9b2 <__aeabi_dsub+0x512>
 800a728:	4660      	mov	r0, ip
 800a72a:	4318      	orrs	r0, r3
 800a72c:	d100      	bne.n	800a730 <__aeabi_dsub+0x290>
 800a72e:	e190      	b.n	800aa52 <__aeabi_dsub+0x5b2>
 800a730:	0008      	movs	r0, r1
 800a732:	4338      	orrs	r0, r7
 800a734:	d000      	beq.n	800a738 <__aeabi_dsub+0x298>
 800a736:	e1aa      	b.n	800aa8e <__aeabi_dsub+0x5ee>
 800a738:	4661      	mov	r1, ip
 800a73a:	08db      	lsrs	r3, r3, #3
 800a73c:	0749      	lsls	r1, r1, #29
 800a73e:	430b      	orrs	r3, r1
 800a740:	4661      	mov	r1, ip
 800a742:	08cc      	lsrs	r4, r1, #3
 800a744:	e027      	b.n	800a796 <__aeabi_dsub+0x2f6>
 800a746:	0008      	movs	r0, r1
 800a748:	4338      	orrs	r0, r7
 800a74a:	d061      	beq.n	800a810 <__aeabi_dsub+0x370>
 800a74c:	1e50      	subs	r0, r2, #1
 800a74e:	2a01      	cmp	r2, #1
 800a750:	d100      	bne.n	800a754 <__aeabi_dsub+0x2b4>
 800a752:	e139      	b.n	800a9c8 <__aeabi_dsub+0x528>
 800a754:	42a2      	cmp	r2, r4
 800a756:	d027      	beq.n	800a7a8 <__aeabi_dsub+0x308>
 800a758:	0002      	movs	r2, r0
 800a75a:	e75d      	b.n	800a618 <__aeabi_dsub+0x178>
 800a75c:	0002      	movs	r2, r0
 800a75e:	391f      	subs	r1, #31
 800a760:	40ca      	lsrs	r2, r1
 800a762:	0011      	movs	r1, r2
 800a764:	2b20      	cmp	r3, #32
 800a766:	d003      	beq.n	800a770 <__aeabi_dsub+0x2d0>
 800a768:	2240      	movs	r2, #64	; 0x40
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	4098      	lsls	r0, r3
 800a76e:	4304      	orrs	r4, r0
 800a770:	1e63      	subs	r3, r4, #1
 800a772:	419c      	sbcs	r4, r3
 800a774:	2300      	movs	r3, #0
 800a776:	4699      	mov	r9, r3
 800a778:	4698      	mov	r8, r3
 800a77a:	430c      	orrs	r4, r1
 800a77c:	0763      	lsls	r3, r4, #29
 800a77e:	d000      	beq.n	800a782 <__aeabi_dsub+0x2e2>
 800a780:	e712      	b.n	800a5a8 <__aeabi_dsub+0x108>
 800a782:	464b      	mov	r3, r9
 800a784:	464a      	mov	r2, r9
 800a786:	08e4      	lsrs	r4, r4, #3
 800a788:	075b      	lsls	r3, r3, #29
 800a78a:	4323      	orrs	r3, r4
 800a78c:	08d4      	lsrs	r4, r2, #3
 800a78e:	4642      	mov	r2, r8
 800a790:	4919      	ldr	r1, [pc, #100]	; (800a7f8 <__aeabi_dsub+0x358>)
 800a792:	428a      	cmp	r2, r1
 800a794:	d00e      	beq.n	800a7b4 <__aeabi_dsub+0x314>
 800a796:	0324      	lsls	r4, r4, #12
 800a798:	0552      	lsls	r2, r2, #21
 800a79a:	0b24      	lsrs	r4, r4, #12
 800a79c:	0d52      	lsrs	r2, r2, #21
 800a79e:	e722      	b.n	800a5e6 <__aeabi_dsub+0x146>
 800a7a0:	000a      	movs	r2, r1
 800a7a2:	2400      	movs	r4, #0
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	e71e      	b.n	800a5e6 <__aeabi_dsub+0x146>
 800a7a8:	08db      	lsrs	r3, r3, #3
 800a7aa:	4662      	mov	r2, ip
 800a7ac:	0752      	lsls	r2, r2, #29
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	4662      	mov	r2, ip
 800a7b2:	08d4      	lsrs	r4, r2, #3
 800a7b4:	001a      	movs	r2, r3
 800a7b6:	4322      	orrs	r2, r4
 800a7b8:	d100      	bne.n	800a7bc <__aeabi_dsub+0x31c>
 800a7ba:	e1fc      	b.n	800abb6 <__aeabi_dsub+0x716>
 800a7bc:	2280      	movs	r2, #128	; 0x80
 800a7be:	0312      	lsls	r2, r2, #12
 800a7c0:	4314      	orrs	r4, r2
 800a7c2:	0324      	lsls	r4, r4, #12
 800a7c4:	4a0c      	ldr	r2, [pc, #48]	; (800a7f8 <__aeabi_dsub+0x358>)
 800a7c6:	0b24      	lsrs	r4, r4, #12
 800a7c8:	e70d      	b.n	800a5e6 <__aeabi_dsub+0x146>
 800a7ca:	0020      	movs	r0, r4
 800a7cc:	f000 fb2c 	bl	800ae28 <__clzsi2>
 800a7d0:	0001      	movs	r1, r0
 800a7d2:	3118      	adds	r1, #24
 800a7d4:	291f      	cmp	r1, #31
 800a7d6:	dc00      	bgt.n	800a7da <__aeabi_dsub+0x33a>
 800a7d8:	e6c4      	b.n	800a564 <__aeabi_dsub+0xc4>
 800a7da:	3808      	subs	r0, #8
 800a7dc:	4084      	lsls	r4, r0
 800a7de:	4643      	mov	r3, r8
 800a7e0:	0020      	movs	r0, r4
 800a7e2:	2400      	movs	r4, #0
 800a7e4:	4588      	cmp	r8, r1
 800a7e6:	dc00      	bgt.n	800a7ea <__aeabi_dsub+0x34a>
 800a7e8:	e6c8      	b.n	800a57c <__aeabi_dsub+0xdc>
 800a7ea:	4a04      	ldr	r2, [pc, #16]	; (800a7fc <__aeabi_dsub+0x35c>)
 800a7ec:	1a5b      	subs	r3, r3, r1
 800a7ee:	4010      	ands	r0, r2
 800a7f0:	4698      	mov	r8, r3
 800a7f2:	4681      	mov	r9, r0
 800a7f4:	e6d6      	b.n	800a5a4 <__aeabi_dsub+0x104>
 800a7f6:	46c0      	nop			; (mov r8, r8)
 800a7f8:	000007ff 	.word	0x000007ff
 800a7fc:	ff7fffff 	.word	0xff7fffff
 800a800:	fffff801 	.word	0xfffff801
 800a804:	000007fe 	.word	0x000007fe
 800a808:	430f      	orrs	r7, r1
 800a80a:	1e7a      	subs	r2, r7, #1
 800a80c:	4197      	sbcs	r7, r2
 800a80e:	e691      	b.n	800a534 <__aeabi_dsub+0x94>
 800a810:	4661      	mov	r1, ip
 800a812:	08db      	lsrs	r3, r3, #3
 800a814:	0749      	lsls	r1, r1, #29
 800a816:	430b      	orrs	r3, r1
 800a818:	4661      	mov	r1, ip
 800a81a:	08cc      	lsrs	r4, r1, #3
 800a81c:	e7b8      	b.n	800a790 <__aeabi_dsub+0x2f0>
 800a81e:	4640      	mov	r0, r8
 800a820:	4cd3      	ldr	r4, [pc, #844]	; (800ab70 <__aeabi_dsub+0x6d0>)
 800a822:	3001      	adds	r0, #1
 800a824:	4220      	tst	r0, r4
 800a826:	d000      	beq.n	800a82a <__aeabi_dsub+0x38a>
 800a828:	e0a2      	b.n	800a970 <__aeabi_dsub+0x4d0>
 800a82a:	4640      	mov	r0, r8
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d000      	beq.n	800a832 <__aeabi_dsub+0x392>
 800a830:	e101      	b.n	800aa36 <__aeabi_dsub+0x596>
 800a832:	4660      	mov	r0, ip
 800a834:	4318      	orrs	r0, r3
 800a836:	d100      	bne.n	800a83a <__aeabi_dsub+0x39a>
 800a838:	e15e      	b.n	800aaf8 <__aeabi_dsub+0x658>
 800a83a:	0008      	movs	r0, r1
 800a83c:	4338      	orrs	r0, r7
 800a83e:	d000      	beq.n	800a842 <__aeabi_dsub+0x3a2>
 800a840:	e15f      	b.n	800ab02 <__aeabi_dsub+0x662>
 800a842:	4661      	mov	r1, ip
 800a844:	08db      	lsrs	r3, r3, #3
 800a846:	0749      	lsls	r1, r1, #29
 800a848:	430b      	orrs	r3, r1
 800a84a:	4661      	mov	r1, ip
 800a84c:	08cc      	lsrs	r4, r1, #3
 800a84e:	e7a2      	b.n	800a796 <__aeabi_dsub+0x2f6>
 800a850:	4dc8      	ldr	r5, [pc, #800]	; (800ab74 <__aeabi_dsub+0x6d4>)
 800a852:	42a8      	cmp	r0, r5
 800a854:	d100      	bne.n	800a858 <__aeabi_dsub+0x3b8>
 800a856:	e0cf      	b.n	800a9f8 <__aeabi_dsub+0x558>
 800a858:	2580      	movs	r5, #128	; 0x80
 800a85a:	4664      	mov	r4, ip
 800a85c:	042d      	lsls	r5, r5, #16
 800a85e:	432c      	orrs	r4, r5
 800a860:	46a4      	mov	ip, r4
 800a862:	2a38      	cmp	r2, #56	; 0x38
 800a864:	dc56      	bgt.n	800a914 <__aeabi_dsub+0x474>
 800a866:	2a1f      	cmp	r2, #31
 800a868:	dd00      	ble.n	800a86c <__aeabi_dsub+0x3cc>
 800a86a:	e0d1      	b.n	800aa10 <__aeabi_dsub+0x570>
 800a86c:	2520      	movs	r5, #32
 800a86e:	001e      	movs	r6, r3
 800a870:	1aad      	subs	r5, r5, r2
 800a872:	4664      	mov	r4, ip
 800a874:	40ab      	lsls	r3, r5
 800a876:	40ac      	lsls	r4, r5
 800a878:	40d6      	lsrs	r6, r2
 800a87a:	1e5d      	subs	r5, r3, #1
 800a87c:	41ab      	sbcs	r3, r5
 800a87e:	4334      	orrs	r4, r6
 800a880:	4323      	orrs	r3, r4
 800a882:	4664      	mov	r4, ip
 800a884:	40d4      	lsrs	r4, r2
 800a886:	1b09      	subs	r1, r1, r4
 800a888:	e049      	b.n	800a91e <__aeabi_dsub+0x47e>
 800a88a:	4660      	mov	r0, ip
 800a88c:	1bdc      	subs	r4, r3, r7
 800a88e:	1a46      	subs	r6, r0, r1
 800a890:	42a3      	cmp	r3, r4
 800a892:	4180      	sbcs	r0, r0
 800a894:	4240      	negs	r0, r0
 800a896:	4681      	mov	r9, r0
 800a898:	0030      	movs	r0, r6
 800a89a:	464e      	mov	r6, r9
 800a89c:	1b80      	subs	r0, r0, r6
 800a89e:	4681      	mov	r9, r0
 800a8a0:	0200      	lsls	r0, r0, #8
 800a8a2:	d476      	bmi.n	800a992 <__aeabi_dsub+0x4f2>
 800a8a4:	464b      	mov	r3, r9
 800a8a6:	4323      	orrs	r3, r4
 800a8a8:	d000      	beq.n	800a8ac <__aeabi_dsub+0x40c>
 800a8aa:	e652      	b.n	800a552 <__aeabi_dsub+0xb2>
 800a8ac:	2400      	movs	r4, #0
 800a8ae:	2500      	movs	r5, #0
 800a8b0:	e771      	b.n	800a796 <__aeabi_dsub+0x2f6>
 800a8b2:	4339      	orrs	r1, r7
 800a8b4:	000c      	movs	r4, r1
 800a8b6:	1e62      	subs	r2, r4, #1
 800a8b8:	4194      	sbcs	r4, r2
 800a8ba:	18e4      	adds	r4, r4, r3
 800a8bc:	429c      	cmp	r4, r3
 800a8be:	419b      	sbcs	r3, r3
 800a8c0:	425b      	negs	r3, r3
 800a8c2:	4463      	add	r3, ip
 800a8c4:	4699      	mov	r9, r3
 800a8c6:	464b      	mov	r3, r9
 800a8c8:	021b      	lsls	r3, r3, #8
 800a8ca:	d400      	bmi.n	800a8ce <__aeabi_dsub+0x42e>
 800a8cc:	e756      	b.n	800a77c <__aeabi_dsub+0x2dc>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	469c      	mov	ip, r3
 800a8d2:	4ba8      	ldr	r3, [pc, #672]	; (800ab74 <__aeabi_dsub+0x6d4>)
 800a8d4:	44e0      	add	r8, ip
 800a8d6:	4598      	cmp	r8, r3
 800a8d8:	d038      	beq.n	800a94c <__aeabi_dsub+0x4ac>
 800a8da:	464b      	mov	r3, r9
 800a8dc:	48a6      	ldr	r0, [pc, #664]	; (800ab78 <__aeabi_dsub+0x6d8>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	4003      	ands	r3, r0
 800a8e2:	0018      	movs	r0, r3
 800a8e4:	0863      	lsrs	r3, r4, #1
 800a8e6:	4014      	ands	r4, r2
 800a8e8:	431c      	orrs	r4, r3
 800a8ea:	07c3      	lsls	r3, r0, #31
 800a8ec:	431c      	orrs	r4, r3
 800a8ee:	0843      	lsrs	r3, r0, #1
 800a8f0:	4699      	mov	r9, r3
 800a8f2:	e657      	b.n	800a5a4 <__aeabi_dsub+0x104>
 800a8f4:	0010      	movs	r0, r2
 800a8f6:	000e      	movs	r6, r1
 800a8f8:	3820      	subs	r0, #32
 800a8fa:	40c6      	lsrs	r6, r0
 800a8fc:	2a20      	cmp	r2, #32
 800a8fe:	d004      	beq.n	800a90a <__aeabi_dsub+0x46a>
 800a900:	2040      	movs	r0, #64	; 0x40
 800a902:	1a82      	subs	r2, r0, r2
 800a904:	4091      	lsls	r1, r2
 800a906:	430f      	orrs	r7, r1
 800a908:	46b9      	mov	r9, r7
 800a90a:	464f      	mov	r7, r9
 800a90c:	1e7a      	subs	r2, r7, #1
 800a90e:	4197      	sbcs	r7, r2
 800a910:	4337      	orrs	r7, r6
 800a912:	e60f      	b.n	800a534 <__aeabi_dsub+0x94>
 800a914:	4662      	mov	r2, ip
 800a916:	431a      	orrs	r2, r3
 800a918:	0013      	movs	r3, r2
 800a91a:	1e5a      	subs	r2, r3, #1
 800a91c:	4193      	sbcs	r3, r2
 800a91e:	1afc      	subs	r4, r7, r3
 800a920:	42a7      	cmp	r7, r4
 800a922:	41bf      	sbcs	r7, r7
 800a924:	427f      	negs	r7, r7
 800a926:	1bcb      	subs	r3, r1, r7
 800a928:	4699      	mov	r9, r3
 800a92a:	465d      	mov	r5, fp
 800a92c:	4680      	mov	r8, r0
 800a92e:	e608      	b.n	800a542 <__aeabi_dsub+0xa2>
 800a930:	4666      	mov	r6, ip
 800a932:	431e      	orrs	r6, r3
 800a934:	d100      	bne.n	800a938 <__aeabi_dsub+0x498>
 800a936:	e0be      	b.n	800aab6 <__aeabi_dsub+0x616>
 800a938:	1e56      	subs	r6, r2, #1
 800a93a:	2a01      	cmp	r2, #1
 800a93c:	d100      	bne.n	800a940 <__aeabi_dsub+0x4a0>
 800a93e:	e109      	b.n	800ab54 <__aeabi_dsub+0x6b4>
 800a940:	4c8c      	ldr	r4, [pc, #560]	; (800ab74 <__aeabi_dsub+0x6d4>)
 800a942:	42a2      	cmp	r2, r4
 800a944:	d100      	bne.n	800a948 <__aeabi_dsub+0x4a8>
 800a946:	e119      	b.n	800ab7c <__aeabi_dsub+0x6dc>
 800a948:	0032      	movs	r2, r6
 800a94a:	e6c1      	b.n	800a6d0 <__aeabi_dsub+0x230>
 800a94c:	4642      	mov	r2, r8
 800a94e:	2400      	movs	r4, #0
 800a950:	2300      	movs	r3, #0
 800a952:	e648      	b.n	800a5e6 <__aeabi_dsub+0x146>
 800a954:	2020      	movs	r0, #32
 800a956:	000c      	movs	r4, r1
 800a958:	1a80      	subs	r0, r0, r2
 800a95a:	003e      	movs	r6, r7
 800a95c:	4087      	lsls	r7, r0
 800a95e:	4084      	lsls	r4, r0
 800a960:	40d6      	lsrs	r6, r2
 800a962:	1e78      	subs	r0, r7, #1
 800a964:	4187      	sbcs	r7, r0
 800a966:	40d1      	lsrs	r1, r2
 800a968:	4334      	orrs	r4, r6
 800a96a:	433c      	orrs	r4, r7
 800a96c:	448c      	add	ip, r1
 800a96e:	e7a4      	b.n	800a8ba <__aeabi_dsub+0x41a>
 800a970:	4a80      	ldr	r2, [pc, #512]	; (800ab74 <__aeabi_dsub+0x6d4>)
 800a972:	4290      	cmp	r0, r2
 800a974:	d100      	bne.n	800a978 <__aeabi_dsub+0x4d8>
 800a976:	e0e9      	b.n	800ab4c <__aeabi_dsub+0x6ac>
 800a978:	19df      	adds	r7, r3, r7
 800a97a:	429f      	cmp	r7, r3
 800a97c:	419b      	sbcs	r3, r3
 800a97e:	4461      	add	r1, ip
 800a980:	425b      	negs	r3, r3
 800a982:	18c9      	adds	r1, r1, r3
 800a984:	07cc      	lsls	r4, r1, #31
 800a986:	087f      	lsrs	r7, r7, #1
 800a988:	084b      	lsrs	r3, r1, #1
 800a98a:	4699      	mov	r9, r3
 800a98c:	4680      	mov	r8, r0
 800a98e:	433c      	orrs	r4, r7
 800a990:	e6f4      	b.n	800a77c <__aeabi_dsub+0x2dc>
 800a992:	1afc      	subs	r4, r7, r3
 800a994:	42a7      	cmp	r7, r4
 800a996:	41bf      	sbcs	r7, r7
 800a998:	4663      	mov	r3, ip
 800a99a:	427f      	negs	r7, r7
 800a99c:	1ac9      	subs	r1, r1, r3
 800a99e:	1bcb      	subs	r3, r1, r7
 800a9a0:	4699      	mov	r9, r3
 800a9a2:	465d      	mov	r5, fp
 800a9a4:	e5d5      	b.n	800a552 <__aeabi_dsub+0xb2>
 800a9a6:	08ff      	lsrs	r7, r7, #3
 800a9a8:	074b      	lsls	r3, r1, #29
 800a9aa:	465d      	mov	r5, fp
 800a9ac:	433b      	orrs	r3, r7
 800a9ae:	08cc      	lsrs	r4, r1, #3
 800a9b0:	e6ee      	b.n	800a790 <__aeabi_dsub+0x2f0>
 800a9b2:	4662      	mov	r2, ip
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	d000      	beq.n	800a9ba <__aeabi_dsub+0x51a>
 800a9b8:	e082      	b.n	800aac0 <__aeabi_dsub+0x620>
 800a9ba:	000b      	movs	r3, r1
 800a9bc:	433b      	orrs	r3, r7
 800a9be:	d11b      	bne.n	800a9f8 <__aeabi_dsub+0x558>
 800a9c0:	2480      	movs	r4, #128	; 0x80
 800a9c2:	2500      	movs	r5, #0
 800a9c4:	0324      	lsls	r4, r4, #12
 800a9c6:	e6f9      	b.n	800a7bc <__aeabi_dsub+0x31c>
 800a9c8:	19dc      	adds	r4, r3, r7
 800a9ca:	429c      	cmp	r4, r3
 800a9cc:	419b      	sbcs	r3, r3
 800a9ce:	4461      	add	r1, ip
 800a9d0:	4689      	mov	r9, r1
 800a9d2:	425b      	negs	r3, r3
 800a9d4:	4499      	add	r9, r3
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	021b      	lsls	r3, r3, #8
 800a9da:	d444      	bmi.n	800aa66 <__aeabi_dsub+0x5c6>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	4698      	mov	r8, r3
 800a9e0:	e6cc      	b.n	800a77c <__aeabi_dsub+0x2dc>
 800a9e2:	1bdc      	subs	r4, r3, r7
 800a9e4:	4662      	mov	r2, ip
 800a9e6:	42a3      	cmp	r3, r4
 800a9e8:	419b      	sbcs	r3, r3
 800a9ea:	1a51      	subs	r1, r2, r1
 800a9ec:	425b      	negs	r3, r3
 800a9ee:	1acb      	subs	r3, r1, r3
 800a9f0:	4699      	mov	r9, r3
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	4698      	mov	r8, r3
 800a9f6:	e5a4      	b.n	800a542 <__aeabi_dsub+0xa2>
 800a9f8:	08ff      	lsrs	r7, r7, #3
 800a9fa:	074b      	lsls	r3, r1, #29
 800a9fc:	465d      	mov	r5, fp
 800a9fe:	433b      	orrs	r3, r7
 800aa00:	08cc      	lsrs	r4, r1, #3
 800aa02:	e6d7      	b.n	800a7b4 <__aeabi_dsub+0x314>
 800aa04:	4662      	mov	r2, ip
 800aa06:	431a      	orrs	r2, r3
 800aa08:	0014      	movs	r4, r2
 800aa0a:	1e63      	subs	r3, r4, #1
 800aa0c:	419c      	sbcs	r4, r3
 800aa0e:	e679      	b.n	800a704 <__aeabi_dsub+0x264>
 800aa10:	0015      	movs	r5, r2
 800aa12:	4664      	mov	r4, ip
 800aa14:	3d20      	subs	r5, #32
 800aa16:	40ec      	lsrs	r4, r5
 800aa18:	46a0      	mov	r8, r4
 800aa1a:	2a20      	cmp	r2, #32
 800aa1c:	d005      	beq.n	800aa2a <__aeabi_dsub+0x58a>
 800aa1e:	2540      	movs	r5, #64	; 0x40
 800aa20:	4664      	mov	r4, ip
 800aa22:	1aaa      	subs	r2, r5, r2
 800aa24:	4094      	lsls	r4, r2
 800aa26:	4323      	orrs	r3, r4
 800aa28:	469a      	mov	sl, r3
 800aa2a:	4654      	mov	r4, sl
 800aa2c:	1e63      	subs	r3, r4, #1
 800aa2e:	419c      	sbcs	r4, r3
 800aa30:	4643      	mov	r3, r8
 800aa32:	4323      	orrs	r3, r4
 800aa34:	e773      	b.n	800a91e <__aeabi_dsub+0x47e>
 800aa36:	4662      	mov	r2, ip
 800aa38:	431a      	orrs	r2, r3
 800aa3a:	d023      	beq.n	800aa84 <__aeabi_dsub+0x5e4>
 800aa3c:	000a      	movs	r2, r1
 800aa3e:	433a      	orrs	r2, r7
 800aa40:	d000      	beq.n	800aa44 <__aeabi_dsub+0x5a4>
 800aa42:	e0a0      	b.n	800ab86 <__aeabi_dsub+0x6e6>
 800aa44:	4662      	mov	r2, ip
 800aa46:	08db      	lsrs	r3, r3, #3
 800aa48:	0752      	lsls	r2, r2, #29
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	4662      	mov	r2, ip
 800aa4e:	08d4      	lsrs	r4, r2, #3
 800aa50:	e6b0      	b.n	800a7b4 <__aeabi_dsub+0x314>
 800aa52:	000b      	movs	r3, r1
 800aa54:	433b      	orrs	r3, r7
 800aa56:	d100      	bne.n	800aa5a <__aeabi_dsub+0x5ba>
 800aa58:	e728      	b.n	800a8ac <__aeabi_dsub+0x40c>
 800aa5a:	08ff      	lsrs	r7, r7, #3
 800aa5c:	074b      	lsls	r3, r1, #29
 800aa5e:	465d      	mov	r5, fp
 800aa60:	433b      	orrs	r3, r7
 800aa62:	08cc      	lsrs	r4, r1, #3
 800aa64:	e697      	b.n	800a796 <__aeabi_dsub+0x2f6>
 800aa66:	2302      	movs	r3, #2
 800aa68:	4698      	mov	r8, r3
 800aa6a:	e736      	b.n	800a8da <__aeabi_dsub+0x43a>
 800aa6c:	1afc      	subs	r4, r7, r3
 800aa6e:	42a7      	cmp	r7, r4
 800aa70:	41bf      	sbcs	r7, r7
 800aa72:	4663      	mov	r3, ip
 800aa74:	427f      	negs	r7, r7
 800aa76:	1ac9      	subs	r1, r1, r3
 800aa78:	1bcb      	subs	r3, r1, r7
 800aa7a:	4699      	mov	r9, r3
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	465d      	mov	r5, fp
 800aa80:	4698      	mov	r8, r3
 800aa82:	e55e      	b.n	800a542 <__aeabi_dsub+0xa2>
 800aa84:	074b      	lsls	r3, r1, #29
 800aa86:	08ff      	lsrs	r7, r7, #3
 800aa88:	433b      	orrs	r3, r7
 800aa8a:	08cc      	lsrs	r4, r1, #3
 800aa8c:	e692      	b.n	800a7b4 <__aeabi_dsub+0x314>
 800aa8e:	1bdc      	subs	r4, r3, r7
 800aa90:	4660      	mov	r0, ip
 800aa92:	42a3      	cmp	r3, r4
 800aa94:	41b6      	sbcs	r6, r6
 800aa96:	1a40      	subs	r0, r0, r1
 800aa98:	4276      	negs	r6, r6
 800aa9a:	1b80      	subs	r0, r0, r6
 800aa9c:	4681      	mov	r9, r0
 800aa9e:	0200      	lsls	r0, r0, #8
 800aaa0:	d560      	bpl.n	800ab64 <__aeabi_dsub+0x6c4>
 800aaa2:	1afc      	subs	r4, r7, r3
 800aaa4:	42a7      	cmp	r7, r4
 800aaa6:	41bf      	sbcs	r7, r7
 800aaa8:	4663      	mov	r3, ip
 800aaaa:	427f      	negs	r7, r7
 800aaac:	1ac9      	subs	r1, r1, r3
 800aaae:	1bcb      	subs	r3, r1, r7
 800aab0:	4699      	mov	r9, r3
 800aab2:	465d      	mov	r5, fp
 800aab4:	e576      	b.n	800a5a4 <__aeabi_dsub+0x104>
 800aab6:	08ff      	lsrs	r7, r7, #3
 800aab8:	074b      	lsls	r3, r1, #29
 800aaba:	433b      	orrs	r3, r7
 800aabc:	08cc      	lsrs	r4, r1, #3
 800aabe:	e667      	b.n	800a790 <__aeabi_dsub+0x2f0>
 800aac0:	000a      	movs	r2, r1
 800aac2:	08db      	lsrs	r3, r3, #3
 800aac4:	433a      	orrs	r2, r7
 800aac6:	d100      	bne.n	800aaca <__aeabi_dsub+0x62a>
 800aac8:	e66f      	b.n	800a7aa <__aeabi_dsub+0x30a>
 800aaca:	4662      	mov	r2, ip
 800aacc:	0752      	lsls	r2, r2, #29
 800aace:	4313      	orrs	r3, r2
 800aad0:	4662      	mov	r2, ip
 800aad2:	08d4      	lsrs	r4, r2, #3
 800aad4:	2280      	movs	r2, #128	; 0x80
 800aad6:	0312      	lsls	r2, r2, #12
 800aad8:	4214      	tst	r4, r2
 800aada:	d007      	beq.n	800aaec <__aeabi_dsub+0x64c>
 800aadc:	08c8      	lsrs	r0, r1, #3
 800aade:	4210      	tst	r0, r2
 800aae0:	d104      	bne.n	800aaec <__aeabi_dsub+0x64c>
 800aae2:	465d      	mov	r5, fp
 800aae4:	0004      	movs	r4, r0
 800aae6:	08fb      	lsrs	r3, r7, #3
 800aae8:	0749      	lsls	r1, r1, #29
 800aaea:	430b      	orrs	r3, r1
 800aaec:	0f5a      	lsrs	r2, r3, #29
 800aaee:	00db      	lsls	r3, r3, #3
 800aaf0:	08db      	lsrs	r3, r3, #3
 800aaf2:	0752      	lsls	r2, r2, #29
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	e65d      	b.n	800a7b4 <__aeabi_dsub+0x314>
 800aaf8:	074b      	lsls	r3, r1, #29
 800aafa:	08ff      	lsrs	r7, r7, #3
 800aafc:	433b      	orrs	r3, r7
 800aafe:	08cc      	lsrs	r4, r1, #3
 800ab00:	e649      	b.n	800a796 <__aeabi_dsub+0x2f6>
 800ab02:	19dc      	adds	r4, r3, r7
 800ab04:	429c      	cmp	r4, r3
 800ab06:	419b      	sbcs	r3, r3
 800ab08:	4461      	add	r1, ip
 800ab0a:	4689      	mov	r9, r1
 800ab0c:	425b      	negs	r3, r3
 800ab0e:	4499      	add	r9, r3
 800ab10:	464b      	mov	r3, r9
 800ab12:	021b      	lsls	r3, r3, #8
 800ab14:	d400      	bmi.n	800ab18 <__aeabi_dsub+0x678>
 800ab16:	e631      	b.n	800a77c <__aeabi_dsub+0x2dc>
 800ab18:	464a      	mov	r2, r9
 800ab1a:	4b17      	ldr	r3, [pc, #92]	; (800ab78 <__aeabi_dsub+0x6d8>)
 800ab1c:	401a      	ands	r2, r3
 800ab1e:	2301      	movs	r3, #1
 800ab20:	4691      	mov	r9, r2
 800ab22:	4698      	mov	r8, r3
 800ab24:	e62a      	b.n	800a77c <__aeabi_dsub+0x2dc>
 800ab26:	0016      	movs	r6, r2
 800ab28:	4664      	mov	r4, ip
 800ab2a:	3e20      	subs	r6, #32
 800ab2c:	40f4      	lsrs	r4, r6
 800ab2e:	46a0      	mov	r8, r4
 800ab30:	2a20      	cmp	r2, #32
 800ab32:	d005      	beq.n	800ab40 <__aeabi_dsub+0x6a0>
 800ab34:	2640      	movs	r6, #64	; 0x40
 800ab36:	4664      	mov	r4, ip
 800ab38:	1ab2      	subs	r2, r6, r2
 800ab3a:	4094      	lsls	r4, r2
 800ab3c:	4323      	orrs	r3, r4
 800ab3e:	469a      	mov	sl, r3
 800ab40:	4654      	mov	r4, sl
 800ab42:	1e63      	subs	r3, r4, #1
 800ab44:	419c      	sbcs	r4, r3
 800ab46:	4643      	mov	r3, r8
 800ab48:	431c      	orrs	r4, r3
 800ab4a:	e5db      	b.n	800a704 <__aeabi_dsub+0x264>
 800ab4c:	0002      	movs	r2, r0
 800ab4e:	2400      	movs	r4, #0
 800ab50:	2300      	movs	r3, #0
 800ab52:	e548      	b.n	800a5e6 <__aeabi_dsub+0x146>
 800ab54:	19dc      	adds	r4, r3, r7
 800ab56:	42bc      	cmp	r4, r7
 800ab58:	41bf      	sbcs	r7, r7
 800ab5a:	4461      	add	r1, ip
 800ab5c:	4689      	mov	r9, r1
 800ab5e:	427f      	negs	r7, r7
 800ab60:	44b9      	add	r9, r7
 800ab62:	e738      	b.n	800a9d6 <__aeabi_dsub+0x536>
 800ab64:	464b      	mov	r3, r9
 800ab66:	4323      	orrs	r3, r4
 800ab68:	d100      	bne.n	800ab6c <__aeabi_dsub+0x6cc>
 800ab6a:	e69f      	b.n	800a8ac <__aeabi_dsub+0x40c>
 800ab6c:	e606      	b.n	800a77c <__aeabi_dsub+0x2dc>
 800ab6e:	46c0      	nop			; (mov r8, r8)
 800ab70:	000007fe 	.word	0x000007fe
 800ab74:	000007ff 	.word	0x000007ff
 800ab78:	ff7fffff 	.word	0xff7fffff
 800ab7c:	08ff      	lsrs	r7, r7, #3
 800ab7e:	074b      	lsls	r3, r1, #29
 800ab80:	433b      	orrs	r3, r7
 800ab82:	08cc      	lsrs	r4, r1, #3
 800ab84:	e616      	b.n	800a7b4 <__aeabi_dsub+0x314>
 800ab86:	4662      	mov	r2, ip
 800ab88:	08db      	lsrs	r3, r3, #3
 800ab8a:	0752      	lsls	r2, r2, #29
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	4662      	mov	r2, ip
 800ab90:	08d4      	lsrs	r4, r2, #3
 800ab92:	2280      	movs	r2, #128	; 0x80
 800ab94:	0312      	lsls	r2, r2, #12
 800ab96:	4214      	tst	r4, r2
 800ab98:	d007      	beq.n	800abaa <__aeabi_dsub+0x70a>
 800ab9a:	08c8      	lsrs	r0, r1, #3
 800ab9c:	4210      	tst	r0, r2
 800ab9e:	d104      	bne.n	800abaa <__aeabi_dsub+0x70a>
 800aba0:	465d      	mov	r5, fp
 800aba2:	0004      	movs	r4, r0
 800aba4:	08fb      	lsrs	r3, r7, #3
 800aba6:	0749      	lsls	r1, r1, #29
 800aba8:	430b      	orrs	r3, r1
 800abaa:	0f5a      	lsrs	r2, r3, #29
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	0752      	lsls	r2, r2, #29
 800abb0:	08db      	lsrs	r3, r3, #3
 800abb2:	4313      	orrs	r3, r2
 800abb4:	e5fe      	b.n	800a7b4 <__aeabi_dsub+0x314>
 800abb6:	2300      	movs	r3, #0
 800abb8:	4a01      	ldr	r2, [pc, #4]	; (800abc0 <__aeabi_dsub+0x720>)
 800abba:	001c      	movs	r4, r3
 800abbc:	e513      	b.n	800a5e6 <__aeabi_dsub+0x146>
 800abbe:	46c0      	nop			; (mov r8, r8)
 800abc0:	000007ff 	.word	0x000007ff

0800abc4 <__aeabi_dcmpun>:
 800abc4:	b570      	push	{r4, r5, r6, lr}
 800abc6:	0005      	movs	r5, r0
 800abc8:	480c      	ldr	r0, [pc, #48]	; (800abfc <__aeabi_dcmpun+0x38>)
 800abca:	031c      	lsls	r4, r3, #12
 800abcc:	0016      	movs	r6, r2
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	030a      	lsls	r2, r1, #12
 800abd2:	0049      	lsls	r1, r1, #1
 800abd4:	0b12      	lsrs	r2, r2, #12
 800abd6:	0d49      	lsrs	r1, r1, #21
 800abd8:	0b24      	lsrs	r4, r4, #12
 800abda:	0d5b      	lsrs	r3, r3, #21
 800abdc:	4281      	cmp	r1, r0
 800abde:	d008      	beq.n	800abf2 <__aeabi_dcmpun+0x2e>
 800abe0:	4a06      	ldr	r2, [pc, #24]	; (800abfc <__aeabi_dcmpun+0x38>)
 800abe2:	2000      	movs	r0, #0
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d103      	bne.n	800abf0 <__aeabi_dcmpun+0x2c>
 800abe8:	0020      	movs	r0, r4
 800abea:	4330      	orrs	r0, r6
 800abec:	1e43      	subs	r3, r0, #1
 800abee:	4198      	sbcs	r0, r3
 800abf0:	bd70      	pop	{r4, r5, r6, pc}
 800abf2:	2001      	movs	r0, #1
 800abf4:	432a      	orrs	r2, r5
 800abf6:	d1fb      	bne.n	800abf0 <__aeabi_dcmpun+0x2c>
 800abf8:	e7f2      	b.n	800abe0 <__aeabi_dcmpun+0x1c>
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	000007ff 	.word	0x000007ff

0800ac00 <__aeabi_d2iz>:
 800ac00:	000a      	movs	r2, r1
 800ac02:	b530      	push	{r4, r5, lr}
 800ac04:	4c13      	ldr	r4, [pc, #76]	; (800ac54 <__aeabi_d2iz+0x54>)
 800ac06:	0053      	lsls	r3, r2, #1
 800ac08:	0309      	lsls	r1, r1, #12
 800ac0a:	0005      	movs	r5, r0
 800ac0c:	0b09      	lsrs	r1, r1, #12
 800ac0e:	2000      	movs	r0, #0
 800ac10:	0d5b      	lsrs	r3, r3, #21
 800ac12:	0fd2      	lsrs	r2, r2, #31
 800ac14:	42a3      	cmp	r3, r4
 800ac16:	dd04      	ble.n	800ac22 <__aeabi_d2iz+0x22>
 800ac18:	480f      	ldr	r0, [pc, #60]	; (800ac58 <__aeabi_d2iz+0x58>)
 800ac1a:	4283      	cmp	r3, r0
 800ac1c:	dd02      	ble.n	800ac24 <__aeabi_d2iz+0x24>
 800ac1e:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <__aeabi_d2iz+0x5c>)
 800ac20:	18d0      	adds	r0, r2, r3
 800ac22:	bd30      	pop	{r4, r5, pc}
 800ac24:	2080      	movs	r0, #128	; 0x80
 800ac26:	0340      	lsls	r0, r0, #13
 800ac28:	4301      	orrs	r1, r0
 800ac2a:	480d      	ldr	r0, [pc, #52]	; (800ac60 <__aeabi_d2iz+0x60>)
 800ac2c:	1ac0      	subs	r0, r0, r3
 800ac2e:	281f      	cmp	r0, #31
 800ac30:	dd08      	ble.n	800ac44 <__aeabi_d2iz+0x44>
 800ac32:	480c      	ldr	r0, [pc, #48]	; (800ac64 <__aeabi_d2iz+0x64>)
 800ac34:	1ac3      	subs	r3, r0, r3
 800ac36:	40d9      	lsrs	r1, r3
 800ac38:	000b      	movs	r3, r1
 800ac3a:	4258      	negs	r0, r3
 800ac3c:	2a00      	cmp	r2, #0
 800ac3e:	d1f0      	bne.n	800ac22 <__aeabi_d2iz+0x22>
 800ac40:	0018      	movs	r0, r3
 800ac42:	e7ee      	b.n	800ac22 <__aeabi_d2iz+0x22>
 800ac44:	4c08      	ldr	r4, [pc, #32]	; (800ac68 <__aeabi_d2iz+0x68>)
 800ac46:	40c5      	lsrs	r5, r0
 800ac48:	46a4      	mov	ip, r4
 800ac4a:	4463      	add	r3, ip
 800ac4c:	4099      	lsls	r1, r3
 800ac4e:	000b      	movs	r3, r1
 800ac50:	432b      	orrs	r3, r5
 800ac52:	e7f2      	b.n	800ac3a <__aeabi_d2iz+0x3a>
 800ac54:	000003fe 	.word	0x000003fe
 800ac58:	0000041d 	.word	0x0000041d
 800ac5c:	7fffffff 	.word	0x7fffffff
 800ac60:	00000433 	.word	0x00000433
 800ac64:	00000413 	.word	0x00000413
 800ac68:	fffffbed 	.word	0xfffffbed

0800ac6c <__aeabi_i2d>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d016      	beq.n	800aca0 <__aeabi_i2d+0x34>
 800ac72:	17c3      	asrs	r3, r0, #31
 800ac74:	18c5      	adds	r5, r0, r3
 800ac76:	405d      	eors	r5, r3
 800ac78:	0fc4      	lsrs	r4, r0, #31
 800ac7a:	0028      	movs	r0, r5
 800ac7c:	f000 f8d4 	bl	800ae28 <__clzsi2>
 800ac80:	4a11      	ldr	r2, [pc, #68]	; (800acc8 <__aeabi_i2d+0x5c>)
 800ac82:	1a12      	subs	r2, r2, r0
 800ac84:	280a      	cmp	r0, #10
 800ac86:	dc16      	bgt.n	800acb6 <__aeabi_i2d+0x4a>
 800ac88:	0003      	movs	r3, r0
 800ac8a:	002e      	movs	r6, r5
 800ac8c:	3315      	adds	r3, #21
 800ac8e:	409e      	lsls	r6, r3
 800ac90:	230b      	movs	r3, #11
 800ac92:	1a18      	subs	r0, r3, r0
 800ac94:	40c5      	lsrs	r5, r0
 800ac96:	0552      	lsls	r2, r2, #21
 800ac98:	032d      	lsls	r5, r5, #12
 800ac9a:	0b2d      	lsrs	r5, r5, #12
 800ac9c:	0d53      	lsrs	r3, r2, #21
 800ac9e:	e003      	b.n	800aca8 <__aeabi_i2d+0x3c>
 800aca0:	2400      	movs	r4, #0
 800aca2:	2300      	movs	r3, #0
 800aca4:	2500      	movs	r5, #0
 800aca6:	2600      	movs	r6, #0
 800aca8:	051b      	lsls	r3, r3, #20
 800acaa:	432b      	orrs	r3, r5
 800acac:	07e4      	lsls	r4, r4, #31
 800acae:	4323      	orrs	r3, r4
 800acb0:	0030      	movs	r0, r6
 800acb2:	0019      	movs	r1, r3
 800acb4:	bd70      	pop	{r4, r5, r6, pc}
 800acb6:	380b      	subs	r0, #11
 800acb8:	4085      	lsls	r5, r0
 800acba:	0552      	lsls	r2, r2, #21
 800acbc:	032d      	lsls	r5, r5, #12
 800acbe:	2600      	movs	r6, #0
 800acc0:	0b2d      	lsrs	r5, r5, #12
 800acc2:	0d53      	lsrs	r3, r2, #21
 800acc4:	e7f0      	b.n	800aca8 <__aeabi_i2d+0x3c>
 800acc6:	46c0      	nop			; (mov r8, r8)
 800acc8:	0000041e 	.word	0x0000041e

0800accc <__aeabi_ui2d>:
 800accc:	b510      	push	{r4, lr}
 800acce:	1e04      	subs	r4, r0, #0
 800acd0:	d010      	beq.n	800acf4 <__aeabi_ui2d+0x28>
 800acd2:	f000 f8a9 	bl	800ae28 <__clzsi2>
 800acd6:	4b0f      	ldr	r3, [pc, #60]	; (800ad14 <__aeabi_ui2d+0x48>)
 800acd8:	1a1b      	subs	r3, r3, r0
 800acda:	280a      	cmp	r0, #10
 800acdc:	dc11      	bgt.n	800ad02 <__aeabi_ui2d+0x36>
 800acde:	220b      	movs	r2, #11
 800ace0:	0021      	movs	r1, r4
 800ace2:	1a12      	subs	r2, r2, r0
 800ace4:	40d1      	lsrs	r1, r2
 800ace6:	3015      	adds	r0, #21
 800ace8:	030a      	lsls	r2, r1, #12
 800acea:	055b      	lsls	r3, r3, #21
 800acec:	4084      	lsls	r4, r0
 800acee:	0b12      	lsrs	r2, r2, #12
 800acf0:	0d5b      	lsrs	r3, r3, #21
 800acf2:	e001      	b.n	800acf8 <__aeabi_ui2d+0x2c>
 800acf4:	2300      	movs	r3, #0
 800acf6:	2200      	movs	r2, #0
 800acf8:	051b      	lsls	r3, r3, #20
 800acfa:	4313      	orrs	r3, r2
 800acfc:	0020      	movs	r0, r4
 800acfe:	0019      	movs	r1, r3
 800ad00:	bd10      	pop	{r4, pc}
 800ad02:	0022      	movs	r2, r4
 800ad04:	380b      	subs	r0, #11
 800ad06:	4082      	lsls	r2, r0
 800ad08:	055b      	lsls	r3, r3, #21
 800ad0a:	0312      	lsls	r2, r2, #12
 800ad0c:	2400      	movs	r4, #0
 800ad0e:	0b12      	lsrs	r2, r2, #12
 800ad10:	0d5b      	lsrs	r3, r3, #21
 800ad12:	e7f1      	b.n	800acf8 <__aeabi_ui2d+0x2c>
 800ad14:	0000041e 	.word	0x0000041e

0800ad18 <__aeabi_d2f>:
 800ad18:	0002      	movs	r2, r0
 800ad1a:	004b      	lsls	r3, r1, #1
 800ad1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad1e:	0d5b      	lsrs	r3, r3, #21
 800ad20:	030c      	lsls	r4, r1, #12
 800ad22:	4e3d      	ldr	r6, [pc, #244]	; (800ae18 <__aeabi_d2f+0x100>)
 800ad24:	0a64      	lsrs	r4, r4, #9
 800ad26:	0f40      	lsrs	r0, r0, #29
 800ad28:	1c5f      	adds	r7, r3, #1
 800ad2a:	0fc9      	lsrs	r1, r1, #31
 800ad2c:	4304      	orrs	r4, r0
 800ad2e:	00d5      	lsls	r5, r2, #3
 800ad30:	4237      	tst	r7, r6
 800ad32:	d00a      	beq.n	800ad4a <__aeabi_d2f+0x32>
 800ad34:	4839      	ldr	r0, [pc, #228]	; (800ae1c <__aeabi_d2f+0x104>)
 800ad36:	181e      	adds	r6, r3, r0
 800ad38:	2efe      	cmp	r6, #254	; 0xfe
 800ad3a:	dd16      	ble.n	800ad6a <__aeabi_d2f+0x52>
 800ad3c:	20ff      	movs	r0, #255	; 0xff
 800ad3e:	2400      	movs	r4, #0
 800ad40:	05c0      	lsls	r0, r0, #23
 800ad42:	4320      	orrs	r0, r4
 800ad44:	07c9      	lsls	r1, r1, #31
 800ad46:	4308      	orrs	r0, r1
 800ad48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <__aeabi_d2f+0x44>
 800ad4e:	432c      	orrs	r4, r5
 800ad50:	d026      	beq.n	800ada0 <__aeabi_d2f+0x88>
 800ad52:	2205      	movs	r2, #5
 800ad54:	0192      	lsls	r2, r2, #6
 800ad56:	0a54      	lsrs	r4, r2, #9
 800ad58:	b2d8      	uxtb	r0, r3
 800ad5a:	e7f1      	b.n	800ad40 <__aeabi_d2f+0x28>
 800ad5c:	4325      	orrs	r5, r4
 800ad5e:	d0ed      	beq.n	800ad3c <__aeabi_d2f+0x24>
 800ad60:	2080      	movs	r0, #128	; 0x80
 800ad62:	03c0      	lsls	r0, r0, #15
 800ad64:	4304      	orrs	r4, r0
 800ad66:	20ff      	movs	r0, #255	; 0xff
 800ad68:	e7ea      	b.n	800ad40 <__aeabi_d2f+0x28>
 800ad6a:	2e00      	cmp	r6, #0
 800ad6c:	dd1b      	ble.n	800ada6 <__aeabi_d2f+0x8e>
 800ad6e:	0192      	lsls	r2, r2, #6
 800ad70:	1e53      	subs	r3, r2, #1
 800ad72:	419a      	sbcs	r2, r3
 800ad74:	00e4      	lsls	r4, r4, #3
 800ad76:	0f6d      	lsrs	r5, r5, #29
 800ad78:	4322      	orrs	r2, r4
 800ad7a:	432a      	orrs	r2, r5
 800ad7c:	0753      	lsls	r3, r2, #29
 800ad7e:	d048      	beq.n	800ae12 <__aeabi_d2f+0xfa>
 800ad80:	230f      	movs	r3, #15
 800ad82:	4013      	ands	r3, r2
 800ad84:	2b04      	cmp	r3, #4
 800ad86:	d000      	beq.n	800ad8a <__aeabi_d2f+0x72>
 800ad88:	3204      	adds	r2, #4
 800ad8a:	2380      	movs	r3, #128	; 0x80
 800ad8c:	04db      	lsls	r3, r3, #19
 800ad8e:	4013      	ands	r3, r2
 800ad90:	d03f      	beq.n	800ae12 <__aeabi_d2f+0xfa>
 800ad92:	1c70      	adds	r0, r6, #1
 800ad94:	2efe      	cmp	r6, #254	; 0xfe
 800ad96:	d0d1      	beq.n	800ad3c <__aeabi_d2f+0x24>
 800ad98:	0192      	lsls	r2, r2, #6
 800ad9a:	0a54      	lsrs	r4, r2, #9
 800ad9c:	b2c0      	uxtb	r0, r0
 800ad9e:	e7cf      	b.n	800ad40 <__aeabi_d2f+0x28>
 800ada0:	2000      	movs	r0, #0
 800ada2:	2400      	movs	r4, #0
 800ada4:	e7cc      	b.n	800ad40 <__aeabi_d2f+0x28>
 800ada6:	0032      	movs	r2, r6
 800ada8:	3217      	adds	r2, #23
 800adaa:	db22      	blt.n	800adf2 <__aeabi_d2f+0xda>
 800adac:	2080      	movs	r0, #128	; 0x80
 800adae:	0400      	lsls	r0, r0, #16
 800adb0:	4320      	orrs	r0, r4
 800adb2:	241e      	movs	r4, #30
 800adb4:	1ba4      	subs	r4, r4, r6
 800adb6:	2c1f      	cmp	r4, #31
 800adb8:	dd1d      	ble.n	800adf6 <__aeabi_d2f+0xde>
 800adba:	2202      	movs	r2, #2
 800adbc:	4252      	negs	r2, r2
 800adbe:	1b96      	subs	r6, r2, r6
 800adc0:	0002      	movs	r2, r0
 800adc2:	40f2      	lsrs	r2, r6
 800adc4:	0016      	movs	r6, r2
 800adc6:	2c20      	cmp	r4, #32
 800adc8:	d004      	beq.n	800add4 <__aeabi_d2f+0xbc>
 800adca:	4a15      	ldr	r2, [pc, #84]	; (800ae20 <__aeabi_d2f+0x108>)
 800adcc:	4694      	mov	ip, r2
 800adce:	4463      	add	r3, ip
 800add0:	4098      	lsls	r0, r3
 800add2:	4305      	orrs	r5, r0
 800add4:	002a      	movs	r2, r5
 800add6:	1e53      	subs	r3, r2, #1
 800add8:	419a      	sbcs	r2, r3
 800adda:	4332      	orrs	r2, r6
 800addc:	2600      	movs	r6, #0
 800adde:	0753      	lsls	r3, r2, #29
 800ade0:	d1ce      	bne.n	800ad80 <__aeabi_d2f+0x68>
 800ade2:	2480      	movs	r4, #128	; 0x80
 800ade4:	0013      	movs	r3, r2
 800ade6:	04e4      	lsls	r4, r4, #19
 800ade8:	2001      	movs	r0, #1
 800adea:	4023      	ands	r3, r4
 800adec:	4222      	tst	r2, r4
 800adee:	d1d3      	bne.n	800ad98 <__aeabi_d2f+0x80>
 800adf0:	e7b0      	b.n	800ad54 <__aeabi_d2f+0x3c>
 800adf2:	2300      	movs	r3, #0
 800adf4:	e7ad      	b.n	800ad52 <__aeabi_d2f+0x3a>
 800adf6:	4a0b      	ldr	r2, [pc, #44]	; (800ae24 <__aeabi_d2f+0x10c>)
 800adf8:	4694      	mov	ip, r2
 800adfa:	002a      	movs	r2, r5
 800adfc:	40e2      	lsrs	r2, r4
 800adfe:	0014      	movs	r4, r2
 800ae00:	002a      	movs	r2, r5
 800ae02:	4463      	add	r3, ip
 800ae04:	409a      	lsls	r2, r3
 800ae06:	4098      	lsls	r0, r3
 800ae08:	1e55      	subs	r5, r2, #1
 800ae0a:	41aa      	sbcs	r2, r5
 800ae0c:	4302      	orrs	r2, r0
 800ae0e:	4322      	orrs	r2, r4
 800ae10:	e7e4      	b.n	800addc <__aeabi_d2f+0xc4>
 800ae12:	0033      	movs	r3, r6
 800ae14:	e79e      	b.n	800ad54 <__aeabi_d2f+0x3c>
 800ae16:	46c0      	nop			; (mov r8, r8)
 800ae18:	000007fe 	.word	0x000007fe
 800ae1c:	fffffc80 	.word	0xfffffc80
 800ae20:	fffffca2 	.word	0xfffffca2
 800ae24:	fffffc82 	.word	0xfffffc82

0800ae28 <__clzsi2>:
 800ae28:	211c      	movs	r1, #28
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	041b      	lsls	r3, r3, #16
 800ae2e:	4298      	cmp	r0, r3
 800ae30:	d301      	bcc.n	800ae36 <__clzsi2+0xe>
 800ae32:	0c00      	lsrs	r0, r0, #16
 800ae34:	3910      	subs	r1, #16
 800ae36:	0a1b      	lsrs	r3, r3, #8
 800ae38:	4298      	cmp	r0, r3
 800ae3a:	d301      	bcc.n	800ae40 <__clzsi2+0x18>
 800ae3c:	0a00      	lsrs	r0, r0, #8
 800ae3e:	3908      	subs	r1, #8
 800ae40:	091b      	lsrs	r3, r3, #4
 800ae42:	4298      	cmp	r0, r3
 800ae44:	d301      	bcc.n	800ae4a <__clzsi2+0x22>
 800ae46:	0900      	lsrs	r0, r0, #4
 800ae48:	3904      	subs	r1, #4
 800ae4a:	a202      	add	r2, pc, #8	; (adr r2, 800ae54 <__clzsi2+0x2c>)
 800ae4c:	5c10      	ldrb	r0, [r2, r0]
 800ae4e:	1840      	adds	r0, r0, r1
 800ae50:	4770      	bx	lr
 800ae52:	46c0      	nop			; (mov r8, r8)
 800ae54:	02020304 	.word	0x02020304
 800ae58:	01010101 	.word	0x01010101
	...

0800ae64 <can1_mcu_set_ccu_cooling_points_decode>:
__weak void can1_ccu_status_2_transmit_callback(can1_ccu_status_2_t* can1_ccu_status_2){
   return; 
}
 
 
uint8_t can1_mcu_set_ccu_cooling_points_decode(can1_mcu_set_ccu_cooling_points_t* can1_mcu_set_ccu_cooling_points, uint8_t data[8]){
 800ae64:	b590      	push	{r4, r7, lr}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
    int8_t mux_ID = 0;
 800ae6e:	240f      	movs	r4, #15
 800ae70:	193b      	adds	r3, r7, r4
 800ae72:	2200      	movs	r2, #0
 800ae74:	701a      	strb	r2, [r3, #0]
    mux_ID |= ((uint8_t)(data[0] & 0xff));
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	b259      	sxtb	r1, r3
 800ae7c:	193b      	adds	r3, r7, r4
 800ae7e:	193a      	adds	r2, r7, r4
 800ae80:	7812      	ldrb	r2, [r2, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	701a      	strb	r2, [r3, #0]
    can1_mcu_set_ccu_cooling_points->mux_ID = (1.0 * (double)mux_ID) + 0.0;
 800ae86:	193b      	adds	r3, r7, r4
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	b25b      	sxtb	r3, r3
 800ae8c:	0018      	movs	r0, r3
 800ae8e:	f7ff feed 	bl	800ac6c <__aeabi_i2d>
 800ae92:	2200      	movs	r2, #0
 800ae94:	2300      	movs	r3, #0
 800ae96:	f7fe f959 	bl	800914c <__aeabi_dadd>
 800ae9a:	0002      	movs	r2, r0
 800ae9c:	000b      	movs	r3, r1
 800ae9e:	0010      	movs	r0, r2
 800aea0:	0019      	movs	r1, r3
 800aea2:	f7ff fead 	bl	800ac00 <__aeabi_d2iz>
 800aea6:	0003      	movs	r3, r0
 800aea8:	b25a      	sxtb	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	701a      	strb	r2, [r3, #0]

    switch(mux_ID) {
 800aeae:	193b      	adds	r3, r7, r4
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	b25b      	sxtb	r3, r3
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d100      	bne.n	800aeba <can1_mcu_set_ccu_cooling_points_decode+0x56>
 800aeb8:	e0d0      	b.n	800b05c <can1_mcu_set_ccu_cooling_points_decode+0x1f8>
 800aeba:	dd00      	ble.n	800aebe <can1_mcu_set_ccu_cooling_points_decode+0x5a>
 800aebc:	e133      	b.n	800b126 <can1_mcu_set_ccu_cooling_points_decode+0x2c2>
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d002      	beq.n	800aec8 <can1_mcu_set_ccu_cooling_points_decode+0x64>
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d065      	beq.n	800af92 <can1_mcu_set_ccu_cooling_points_decode+0x12e>
 800aec6:	e12e      	b.n	800b126 <can1_mcu_set_ccu_cooling_points_decode+0x2c2>
        case 0x00: {
            int8_t fan1_speed = 0;
 800aec8:	200a      	movs	r0, #10
 800aeca:	183b      	adds	r3, r7, r0
 800aecc:	2200      	movs	r2, #0
 800aece:	701a      	strb	r2, [r3, #0]
            fan1_speed |= ((uint8_t)(data[1] & 0xff));
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	3301      	adds	r3, #1
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	b259      	sxtb	r1, r3
 800aed8:	183b      	adds	r3, r7, r0
 800aeda:	183a      	adds	r2, r7, r0
 800aedc:	7812      	ldrb	r2, [r2, #0]
 800aede:	430a      	orrs	r2, r1
 800aee0:	701a      	strb	r2, [r3, #0]
            can1_mcu_set_ccu_cooling_points->fan1_speed = (1.0 * (double)fan1_speed) + 0.0;
 800aee2:	183b      	adds	r3, r7, r0
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	b25b      	sxtb	r3, r3
 800aee8:	0018      	movs	r0, r3
 800aeea:	f7ff febf 	bl	800ac6c <__aeabi_i2d>
 800aeee:	2200      	movs	r2, #0
 800aef0:	2300      	movs	r3, #0
 800aef2:	f7fe f92b 	bl	800914c <__aeabi_dadd>
 800aef6:	0002      	movs	r2, r0
 800aef8:	000b      	movs	r3, r1
 800aefa:	0010      	movs	r0, r2
 800aefc:	0019      	movs	r1, r3
 800aefe:	f7ff ff0b 	bl	800ad18 <__aeabi_d2f>
 800af02:	1c02      	adds	r2, r0, #0
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	605a      	str	r2, [r3, #4]

            int8_t fron_pump_speed = 0;
 800af08:	2009      	movs	r0, #9
 800af0a:	183b      	adds	r3, r7, r0
 800af0c:	2200      	movs	r2, #0
 800af0e:	701a      	strb	r2, [r3, #0]
            fron_pump_speed |= ((uint8_t)(data[2] & 0xff));
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	3302      	adds	r3, #2
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	b259      	sxtb	r1, r3
 800af18:	183b      	adds	r3, r7, r0
 800af1a:	183a      	adds	r2, r7, r0
 800af1c:	7812      	ldrb	r2, [r2, #0]
 800af1e:	430a      	orrs	r2, r1
 800af20:	701a      	strb	r2, [r3, #0]
            can1_mcu_set_ccu_cooling_points->fron_pump_speed = (1.0 * (double)fron_pump_speed) + 0.0;
 800af22:	183b      	adds	r3, r7, r0
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	b25b      	sxtb	r3, r3
 800af28:	0018      	movs	r0, r3
 800af2a:	f7ff fe9f 	bl	800ac6c <__aeabi_i2d>
 800af2e:	2200      	movs	r2, #0
 800af30:	2300      	movs	r3, #0
 800af32:	f7fe f90b 	bl	800914c <__aeabi_dadd>
 800af36:	0002      	movs	r2, r0
 800af38:	000b      	movs	r3, r1
 800af3a:	0010      	movs	r0, r2
 800af3c:	0019      	movs	r1, r3
 800af3e:	f7ff feeb 	bl	800ad18 <__aeabi_d2f>
 800af42:	1c02      	adds	r2, r0, #0
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	611a      	str	r2, [r3, #16]

            if((can1_mcu_set_ccu_cooling_points->fan1_speed < 0) || (100 < can1_mcu_set_ccu_cooling_points->fan1_speed)) return 0;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	2100      	movs	r1, #0
 800af4e:	1c18      	adds	r0, r3, #0
 800af50:	f7fd f9b4 	bl	80082bc <__aeabi_fcmplt>
 800af54:	1e03      	subs	r3, r0, #0
 800af56:	d107      	bne.n	800af68 <can1_mcu_set_ccu_cooling_points_decode+0x104>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	4974      	ldr	r1, [pc, #464]	; (800b130 <can1_mcu_set_ccu_cooling_points_decode+0x2cc>)
 800af5e:	1c18      	adds	r0, r3, #0
 800af60:	f7fd f9c0 	bl	80082e4 <__aeabi_fcmpgt>
 800af64:	1e03      	subs	r3, r0, #0
 800af66:	d001      	beq.n	800af6c <can1_mcu_set_ccu_cooling_points_decode+0x108>
 800af68:	2300      	movs	r3, #0
 800af6a:	e0dd      	b.n	800b128 <can1_mcu_set_ccu_cooling_points_decode+0x2c4>
            if((can1_mcu_set_ccu_cooling_points->fron_pump_speed < 0) || (100 < can1_mcu_set_ccu_cooling_points->fron_pump_speed)) return 0;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	2100      	movs	r1, #0
 800af72:	1c18      	adds	r0, r3, #0
 800af74:	f7fd f9a2 	bl	80082bc <__aeabi_fcmplt>
 800af78:	1e03      	subs	r3, r0, #0
 800af7a:	d108      	bne.n	800af8e <can1_mcu_set_ccu_cooling_points_decode+0x12a>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	496b      	ldr	r1, [pc, #428]	; (800b130 <can1_mcu_set_ccu_cooling_points_decode+0x2cc>)
 800af82:	1c18      	adds	r0, r3, #0
 800af84:	f7fd f9ae 	bl	80082e4 <__aeabi_fcmpgt>
 800af88:	1e03      	subs	r3, r0, #0
 800af8a:	d100      	bne.n	800af8e <can1_mcu_set_ccu_cooling_points_decode+0x12a>
        }
        break;
 800af8c:	e0cb      	b.n	800b126 <can1_mcu_set_ccu_cooling_points_decode+0x2c2>
            if((can1_mcu_set_ccu_cooling_points->fron_pump_speed < 0) || (100 < can1_mcu_set_ccu_cooling_points->fron_pump_speed)) return 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	e0ca      	b.n	800b128 <can1_mcu_set_ccu_cooling_points_decode+0x2c4>
        case 0x01: {
            int8_t fan2_speed = 0;
 800af92:	200c      	movs	r0, #12
 800af94:	183b      	adds	r3, r7, r0
 800af96:	2200      	movs	r2, #0
 800af98:	701a      	strb	r2, [r3, #0]
            fan2_speed |= ((uint8_t)(data[1] & 0xff));
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	3301      	adds	r3, #1
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	b259      	sxtb	r1, r3
 800afa2:	183b      	adds	r3, r7, r0
 800afa4:	183a      	adds	r2, r7, r0
 800afa6:	7812      	ldrb	r2, [r2, #0]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	701a      	strb	r2, [r3, #0]
            can1_mcu_set_ccu_cooling_points->fan2_speed = (1.0 * (double)fan2_speed) + 0.0;
 800afac:	183b      	adds	r3, r7, r0
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	b25b      	sxtb	r3, r3
 800afb2:	0018      	movs	r0, r3
 800afb4:	f7ff fe5a 	bl	800ac6c <__aeabi_i2d>
 800afb8:	2200      	movs	r2, #0
 800afba:	2300      	movs	r3, #0
 800afbc:	f7fe f8c6 	bl	800914c <__aeabi_dadd>
 800afc0:	0002      	movs	r2, r0
 800afc2:	000b      	movs	r3, r1
 800afc4:	0010      	movs	r0, r2
 800afc6:	0019      	movs	r1, r3
 800afc8:	f7ff fea6 	bl	800ad18 <__aeabi_d2f>
 800afcc:	1c02      	adds	r2, r0, #0
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	609a      	str	r2, [r3, #8]

            int8_t rear_pump_speed = 0;
 800afd2:	200b      	movs	r0, #11
 800afd4:	183b      	adds	r3, r7, r0
 800afd6:	2200      	movs	r2, #0
 800afd8:	701a      	strb	r2, [r3, #0]
            rear_pump_speed |= ((uint8_t)(data[2] & 0xff));
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	3302      	adds	r3, #2
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	b259      	sxtb	r1, r3
 800afe2:	183b      	adds	r3, r7, r0
 800afe4:	183a      	adds	r2, r7, r0
 800afe6:	7812      	ldrb	r2, [r2, #0]
 800afe8:	430a      	orrs	r2, r1
 800afea:	701a      	strb	r2, [r3, #0]
            can1_mcu_set_ccu_cooling_points->rear_pump_speed = (1.0 * (double)rear_pump_speed) + 0.0;
 800afec:	183b      	adds	r3, r7, r0
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	b25b      	sxtb	r3, r3
 800aff2:	0018      	movs	r0, r3
 800aff4:	f7ff fe3a 	bl	800ac6c <__aeabi_i2d>
 800aff8:	2200      	movs	r2, #0
 800affa:	2300      	movs	r3, #0
 800affc:	f7fe f8a6 	bl	800914c <__aeabi_dadd>
 800b000:	0002      	movs	r2, r0
 800b002:	000b      	movs	r3, r1
 800b004:	0010      	movs	r0, r2
 800b006:	0019      	movs	r1, r3
 800b008:	f7ff fe86 	bl	800ad18 <__aeabi_d2f>
 800b00c:	1c02      	adds	r2, r0, #0
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	615a      	str	r2, [r3, #20]

            if((can1_mcu_set_ccu_cooling_points->fan2_speed < 0) || (100 < can1_mcu_set_ccu_cooling_points->fan2_speed)) return 0;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	2100      	movs	r1, #0
 800b018:	1c18      	adds	r0, r3, #0
 800b01a:	f7fd f94f 	bl	80082bc <__aeabi_fcmplt>
 800b01e:	1e03      	subs	r3, r0, #0
 800b020:	d107      	bne.n	800b032 <can1_mcu_set_ccu_cooling_points_decode+0x1ce>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	4942      	ldr	r1, [pc, #264]	; (800b130 <can1_mcu_set_ccu_cooling_points_decode+0x2cc>)
 800b028:	1c18      	adds	r0, r3, #0
 800b02a:	f7fd f95b 	bl	80082e4 <__aeabi_fcmpgt>
 800b02e:	1e03      	subs	r3, r0, #0
 800b030:	d001      	beq.n	800b036 <can1_mcu_set_ccu_cooling_points_decode+0x1d2>
 800b032:	2300      	movs	r3, #0
 800b034:	e078      	b.n	800b128 <can1_mcu_set_ccu_cooling_points_decode+0x2c4>
            if((can1_mcu_set_ccu_cooling_points->rear_pump_speed < 0) || (100 < can1_mcu_set_ccu_cooling_points->rear_pump_speed)) return 0;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	2100      	movs	r1, #0
 800b03c:	1c18      	adds	r0, r3, #0
 800b03e:	f7fd f93d 	bl	80082bc <__aeabi_fcmplt>
 800b042:	1e03      	subs	r3, r0, #0
 800b044:	d108      	bne.n	800b058 <can1_mcu_set_ccu_cooling_points_decode+0x1f4>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	4939      	ldr	r1, [pc, #228]	; (800b130 <can1_mcu_set_ccu_cooling_points_decode+0x2cc>)
 800b04c:	1c18      	adds	r0, r3, #0
 800b04e:	f7fd f949 	bl	80082e4 <__aeabi_fcmpgt>
 800b052:	1e03      	subs	r3, r0, #0
 800b054:	d100      	bne.n	800b058 <can1_mcu_set_ccu_cooling_points_decode+0x1f4>
        }
        break;
 800b056:	e066      	b.n	800b126 <can1_mcu_set_ccu_cooling_points_decode+0x2c2>
            if((can1_mcu_set_ccu_cooling_points->rear_pump_speed < 0) || (100 < can1_mcu_set_ccu_cooling_points->rear_pump_speed)) return 0;
 800b058:	2300      	movs	r3, #0
 800b05a:	e065      	b.n	800b128 <can1_mcu_set_ccu_cooling_points_decode+0x2c4>
        case 0x02: {
            int8_t fan3_speed = 0;
 800b05c:	200e      	movs	r0, #14
 800b05e:	183b      	adds	r3, r7, r0
 800b060:	2200      	movs	r2, #0
 800b062:	701a      	strb	r2, [r3, #0]
            fan3_speed |= ((uint8_t)(data[1] & 0xff));
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	3301      	adds	r3, #1
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	b259      	sxtb	r1, r3
 800b06c:	183b      	adds	r3, r7, r0
 800b06e:	183a      	adds	r2, r7, r0
 800b070:	7812      	ldrb	r2, [r2, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	701a      	strb	r2, [r3, #0]
            can1_mcu_set_ccu_cooling_points->fan3_speed = (1.0 * (double)fan3_speed) + 0.0;
 800b076:	183b      	adds	r3, r7, r0
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	b25b      	sxtb	r3, r3
 800b07c:	0018      	movs	r0, r3
 800b07e:	f7ff fdf5 	bl	800ac6c <__aeabi_i2d>
 800b082:	2200      	movs	r2, #0
 800b084:	2300      	movs	r3, #0
 800b086:	f7fe f861 	bl	800914c <__aeabi_dadd>
 800b08a:	0002      	movs	r2, r0
 800b08c:	000b      	movs	r3, r1
 800b08e:	0010      	movs	r0, r2
 800b090:	0019      	movs	r1, r3
 800b092:	f7ff fe41 	bl	800ad18 <__aeabi_d2f>
 800b096:	1c02      	adds	r2, r0, #0
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	60da      	str	r2, [r3, #12]

            int8_t inverter_pump_speed = 0;
 800b09c:	200d      	movs	r0, #13
 800b09e:	183b      	adds	r3, r7, r0
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	701a      	strb	r2, [r3, #0]
            inverter_pump_speed |= ((uint8_t)(data[2] & 0xff));
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	3302      	adds	r3, #2
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	b259      	sxtb	r1, r3
 800b0ac:	183b      	adds	r3, r7, r0
 800b0ae:	183a      	adds	r2, r7, r0
 800b0b0:	7812      	ldrb	r2, [r2, #0]
 800b0b2:	430a      	orrs	r2, r1
 800b0b4:	701a      	strb	r2, [r3, #0]
            can1_mcu_set_ccu_cooling_points->inverter_pump_speed = (1.0 * (double)inverter_pump_speed) + 0.0;
 800b0b6:	183b      	adds	r3, r7, r0
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	b25b      	sxtb	r3, r3
 800b0bc:	0018      	movs	r0, r3
 800b0be:	f7ff fdd5 	bl	800ac6c <__aeabi_i2d>
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f7fe f841 	bl	800914c <__aeabi_dadd>
 800b0ca:	0002      	movs	r2, r0
 800b0cc:	000b      	movs	r3, r1
 800b0ce:	0010      	movs	r0, r2
 800b0d0:	0019      	movs	r1, r3
 800b0d2:	f7ff fe21 	bl	800ad18 <__aeabi_d2f>
 800b0d6:	1c02      	adds	r2, r0, #0
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	619a      	str	r2, [r3, #24]

            if((can1_mcu_set_ccu_cooling_points->fan3_speed < 0) || (100 < can1_mcu_set_ccu_cooling_points->fan3_speed)) return 0;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	1c18      	adds	r0, r3, #0
 800b0e4:	f7fd f8ea 	bl	80082bc <__aeabi_fcmplt>
 800b0e8:	1e03      	subs	r3, r0, #0
 800b0ea:	d107      	bne.n	800b0fc <can1_mcu_set_ccu_cooling_points_decode+0x298>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	490f      	ldr	r1, [pc, #60]	; (800b130 <can1_mcu_set_ccu_cooling_points_decode+0x2cc>)
 800b0f2:	1c18      	adds	r0, r3, #0
 800b0f4:	f7fd f8f6 	bl	80082e4 <__aeabi_fcmpgt>
 800b0f8:	1e03      	subs	r3, r0, #0
 800b0fa:	d001      	beq.n	800b100 <can1_mcu_set_ccu_cooling_points_decode+0x29c>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	e013      	b.n	800b128 <can1_mcu_set_ccu_cooling_points_decode+0x2c4>
            if((can1_mcu_set_ccu_cooling_points->inverter_pump_speed < 0) || (100 < can1_mcu_set_ccu_cooling_points->inverter_pump_speed)) return 0;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	2100      	movs	r1, #0
 800b106:	1c18      	adds	r0, r3, #0
 800b108:	f7fd f8d8 	bl	80082bc <__aeabi_fcmplt>
 800b10c:	1e03      	subs	r3, r0, #0
 800b10e:	d108      	bne.n	800b122 <can1_mcu_set_ccu_cooling_points_decode+0x2be>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	699b      	ldr	r3, [r3, #24]
 800b114:	4906      	ldr	r1, [pc, #24]	; (800b130 <can1_mcu_set_ccu_cooling_points_decode+0x2cc>)
 800b116:	1c18      	adds	r0, r3, #0
 800b118:	f7fd f8e4 	bl	80082e4 <__aeabi_fcmpgt>
 800b11c:	1e03      	subs	r3, r0, #0
 800b11e:	d100      	bne.n	800b122 <can1_mcu_set_ccu_cooling_points_decode+0x2be>
        }
        break;
 800b120:	e001      	b.n	800b126 <can1_mcu_set_ccu_cooling_points_decode+0x2c2>
            if((can1_mcu_set_ccu_cooling_points->inverter_pump_speed < 0) || (100 < can1_mcu_set_ccu_cooling_points->inverter_pump_speed)) return 0;
 800b122:	2300      	movs	r3, #0
 800b124:	e000      	b.n	800b128 <can1_mcu_set_ccu_cooling_points_decode+0x2c4>
    }
    return 1;
 800b126:	2301      	movs	r3, #1
}
 800b128:	0018      	movs	r0, r3
 800b12a:	46bd      	mov	sp, r7
 800b12c:	b005      	add	sp, #20
 800b12e:	bd90      	pop	{r4, r7, pc}
 800b130:	42c80000 	.word	0x42c80000

0800b134 <can1_ccu_status_1_encode>:

 
 
uint8_t can1_ccu_status_1_encode(can1_ccu_status_1_t* can1_ccu_status_1, uint8_t data[8]) {
 800b134:	b5b0      	push	{r4, r5, r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
    memset(data, 0, 8);
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2208      	movs	r2, #8
 800b142:	2100      	movs	r1, #0
 800b144:	0018      	movs	r0, r3
 800b146:	f005 fb37 	bl	80107b8 <memset>
    int8_t mux_ID = 1.0 * ((double)can1_ccu_status_1->mux_ID - 0.0);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	b25b      	sxtb	r3, r3
 800b150:	0018      	movs	r0, r3
 800b152:	f7ff fd8b 	bl	800ac6c <__aeabi_i2d>
 800b156:	0002      	movs	r2, r0
 800b158:	000b      	movs	r3, r1
 800b15a:	250f      	movs	r5, #15
 800b15c:	197c      	adds	r4, r7, r5
 800b15e:	0010      	movs	r0, r2
 800b160:	0019      	movs	r1, r3
 800b162:	f7ff fd4d 	bl	800ac00 <__aeabi_d2iz>
 800b166:	0003      	movs	r3, r0
 800b168:	7023      	strb	r3, [r4, #0]
    data[0] |= (uint8_t)mux_ID & 0xff;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	781a      	ldrb	r2, [r3, #0]
 800b16e:	0029      	movs	r1, r5
 800b170:	187b      	adds	r3, r7, r1
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	4313      	orrs	r3, r2
 800b176:	b2da      	uxtb	r2, r3
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	701a      	strb	r2, [r3, #0]

    switch(mux_ID) {
 800b17c:	187b      	adds	r3, r7, r1
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	b25b      	sxtb	r3, r3
 800b182:	2b02      	cmp	r3, #2
 800b184:	d100      	bne.n	800b188 <can1_ccu_status_1_encode+0x54>
 800b186:	e09c      	b.n	800b2c2 <can1_ccu_status_1_encode+0x18e>
 800b188:	dd00      	ble.n	800b18c <can1_ccu_status_1_encode+0x58>
 800b18a:	e0e5      	b.n	800b358 <can1_ccu_status_1_encode+0x224>
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <can1_ccu_status_1_encode+0x62>
 800b190:	2b01      	cmp	r3, #1
 800b192:	d04b      	beq.n	800b22c <can1_ccu_status_1_encode+0xf8>
 800b194:	e0e0      	b.n	800b358 <can1_ccu_status_1_encode+0x224>
        case 0x00: {
            int8_t fan1_temperature = 1.0 * ((double)can1_ccu_status_1->fan1_temperature - 0.0);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	250a      	movs	r5, #10
 800b19c:	197c      	adds	r4, r7, r5
 800b19e:	1c18      	adds	r0, r3, #0
 800b1a0:	f7fd ff24 	bl	8008fec <__aeabi_f2iz>
 800b1a4:	0003      	movs	r3, r0
 800b1a6:	7023      	strb	r3, [r4, #0]
            data[1] |= (uint8_t)fan1_temperature & 0xff;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	7819      	ldrb	r1, [r3, #0]
 800b1ae:	197b      	adds	r3, r7, r5
 800b1b0:	781a      	ldrb	r2, [r3, #0]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	b2d2      	uxtb	r2, r2
 800b1ba:	701a      	strb	r2, [r3, #0]

            int8_t fron_pump_temperature = 1.0 * ((double)can1_ccu_status_1->fron_pump_temperature - 0.0);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	2509      	movs	r5, #9
 800b1c2:	197c      	adds	r4, r7, r5
 800b1c4:	1c18      	adds	r0, r3, #0
 800b1c6:	f7fd ff11 	bl	8008fec <__aeabi_f2iz>
 800b1ca:	0003      	movs	r3, r0
 800b1cc:	7023      	strb	r3, [r4, #0]
            data[2] |= (uint8_t)fron_pump_temperature & 0xff;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	3302      	adds	r3, #2
 800b1d2:	7819      	ldrb	r1, [r3, #0]
 800b1d4:	197b      	adds	r3, r7, r5
 800b1d6:	781a      	ldrb	r2, [r3, #0]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	3302      	adds	r3, #2
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	b2d2      	uxtb	r2, r2
 800b1e0:	701a      	strb	r2, [r3, #0]

            if((can1_ccu_status_1->fan1_temperature < 0) || (100 < can1_ccu_status_1->fan1_temperature)) return 0;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	2100      	movs	r1, #0
 800b1e8:	1c18      	adds	r0, r3, #0
 800b1ea:	f7fd f867 	bl	80082bc <__aeabi_fcmplt>
 800b1ee:	1e03      	subs	r3, r0, #0
 800b1f0:	d107      	bne.n	800b202 <can1_ccu_status_1_encode+0xce>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	495b      	ldr	r1, [pc, #364]	; (800b364 <can1_ccu_status_1_encode+0x230>)
 800b1f8:	1c18      	adds	r0, r3, #0
 800b1fa:	f7fd f873 	bl	80082e4 <__aeabi_fcmpgt>
 800b1fe:	1e03      	subs	r3, r0, #0
 800b200:	d001      	beq.n	800b206 <can1_ccu_status_1_encode+0xd2>
 800b202:	2300      	movs	r3, #0
 800b204:	e0a9      	b.n	800b35a <can1_ccu_status_1_encode+0x226>
            if((can1_ccu_status_1->fron_pump_temperature < 0) || (100 < can1_ccu_status_1->fron_pump_temperature)) return 0;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	2100      	movs	r1, #0
 800b20c:	1c18      	adds	r0, r3, #0
 800b20e:	f7fd f855 	bl	80082bc <__aeabi_fcmplt>
 800b212:	1e03      	subs	r3, r0, #0
 800b214:	d108      	bne.n	800b228 <can1_ccu_status_1_encode+0xf4>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	4952      	ldr	r1, [pc, #328]	; (800b364 <can1_ccu_status_1_encode+0x230>)
 800b21c:	1c18      	adds	r0, r3, #0
 800b21e:	f7fd f861 	bl	80082e4 <__aeabi_fcmpgt>
 800b222:	1e03      	subs	r3, r0, #0
 800b224:	d100      	bne.n	800b228 <can1_ccu_status_1_encode+0xf4>
        }
        break;
 800b226:	e097      	b.n	800b358 <can1_ccu_status_1_encode+0x224>
            if((can1_ccu_status_1->fron_pump_temperature < 0) || (100 < can1_ccu_status_1->fron_pump_temperature)) return 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	e096      	b.n	800b35a <can1_ccu_status_1_encode+0x226>
        case 0x01: {
            int8_t fan2_temperature = 1.0 * ((double)can1_ccu_status_1->fan2_temperature - 0.0);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	250c      	movs	r5, #12
 800b232:	197c      	adds	r4, r7, r5
 800b234:	1c18      	adds	r0, r3, #0
 800b236:	f7fd fed9 	bl	8008fec <__aeabi_f2iz>
 800b23a:	0003      	movs	r3, r0
 800b23c:	7023      	strb	r3, [r4, #0]
            data[1] |= (uint8_t)fan2_temperature & 0xff;
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	3301      	adds	r3, #1
 800b242:	7819      	ldrb	r1, [r3, #0]
 800b244:	197b      	adds	r3, r7, r5
 800b246:	781a      	ldrb	r2, [r3, #0]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	3301      	adds	r3, #1
 800b24c:	430a      	orrs	r2, r1
 800b24e:	b2d2      	uxtb	r2, r2
 800b250:	701a      	strb	r2, [r3, #0]

            int8_t rear_pump_temperature = 1.0 * ((double)can1_ccu_status_1->rear_pump_temperature - 0.0);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	250b      	movs	r5, #11
 800b258:	197c      	adds	r4, r7, r5
 800b25a:	1c18      	adds	r0, r3, #0
 800b25c:	f7fd fec6 	bl	8008fec <__aeabi_f2iz>
 800b260:	0003      	movs	r3, r0
 800b262:	7023      	strb	r3, [r4, #0]
            data[2] |= (uint8_t)rear_pump_temperature & 0xff;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	3302      	adds	r3, #2
 800b268:	7819      	ldrb	r1, [r3, #0]
 800b26a:	197b      	adds	r3, r7, r5
 800b26c:	781a      	ldrb	r2, [r3, #0]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	3302      	adds	r3, #2
 800b272:	430a      	orrs	r2, r1
 800b274:	b2d2      	uxtb	r2, r2
 800b276:	701a      	strb	r2, [r3, #0]

            if((can1_ccu_status_1->fan2_temperature < 0) || (100 < can1_ccu_status_1->fan2_temperature)) return 0;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	2100      	movs	r1, #0
 800b27e:	1c18      	adds	r0, r3, #0
 800b280:	f7fd f81c 	bl	80082bc <__aeabi_fcmplt>
 800b284:	1e03      	subs	r3, r0, #0
 800b286:	d107      	bne.n	800b298 <can1_ccu_status_1_encode+0x164>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	4935      	ldr	r1, [pc, #212]	; (800b364 <can1_ccu_status_1_encode+0x230>)
 800b28e:	1c18      	adds	r0, r3, #0
 800b290:	f7fd f828 	bl	80082e4 <__aeabi_fcmpgt>
 800b294:	1e03      	subs	r3, r0, #0
 800b296:	d001      	beq.n	800b29c <can1_ccu_status_1_encode+0x168>
 800b298:	2300      	movs	r3, #0
 800b29a:	e05e      	b.n	800b35a <can1_ccu_status_1_encode+0x226>
            if((can1_ccu_status_1->rear_pump_temperature < 0) || (100 < can1_ccu_status_1->rear_pump_temperature)) return 0;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	1c18      	adds	r0, r3, #0
 800b2a4:	f7fd f80a 	bl	80082bc <__aeabi_fcmplt>
 800b2a8:	1e03      	subs	r3, r0, #0
 800b2aa:	d108      	bne.n	800b2be <can1_ccu_status_1_encode+0x18a>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	492c      	ldr	r1, [pc, #176]	; (800b364 <can1_ccu_status_1_encode+0x230>)
 800b2b2:	1c18      	adds	r0, r3, #0
 800b2b4:	f7fd f816 	bl	80082e4 <__aeabi_fcmpgt>
 800b2b8:	1e03      	subs	r3, r0, #0
 800b2ba:	d100      	bne.n	800b2be <can1_ccu_status_1_encode+0x18a>
        }
        break;
 800b2bc:	e04c      	b.n	800b358 <can1_ccu_status_1_encode+0x224>
            if((can1_ccu_status_1->rear_pump_temperature < 0) || (100 < can1_ccu_status_1->rear_pump_temperature)) return 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	e04b      	b.n	800b35a <can1_ccu_status_1_encode+0x226>
        case 0x02: {
            int8_t fan3_temperature = 1.0 * ((double)can1_ccu_status_1->fan3_temperature - 0.0);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	250e      	movs	r5, #14
 800b2c8:	197c      	adds	r4, r7, r5
 800b2ca:	1c18      	adds	r0, r3, #0
 800b2cc:	f7fd fe8e 	bl	8008fec <__aeabi_f2iz>
 800b2d0:	0003      	movs	r3, r0
 800b2d2:	7023      	strb	r3, [r4, #0]
            data[1] |= (uint8_t)fan3_temperature & 0xff;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	7819      	ldrb	r1, [r3, #0]
 800b2da:	197b      	adds	r3, r7, r5
 800b2dc:	781a      	ldrb	r2, [r3, #0]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	430a      	orrs	r2, r1
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	701a      	strb	r2, [r3, #0]

            int8_t inverter_pump_temperature = 1.0 * ((double)can1_ccu_status_1->inverter_pump_temperature - 0.0);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	699b      	ldr	r3, [r3, #24]
 800b2ec:	250d      	movs	r5, #13
 800b2ee:	197c      	adds	r4, r7, r5
 800b2f0:	1c18      	adds	r0, r3, #0
 800b2f2:	f7fd fe7b 	bl	8008fec <__aeabi_f2iz>
 800b2f6:	0003      	movs	r3, r0
 800b2f8:	7023      	strb	r3, [r4, #0]
            data[2] |= (uint8_t)inverter_pump_temperature & 0xff;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	3302      	adds	r3, #2
 800b2fe:	7819      	ldrb	r1, [r3, #0]
 800b300:	197b      	adds	r3, r7, r5
 800b302:	781a      	ldrb	r2, [r3, #0]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	3302      	adds	r3, #2
 800b308:	430a      	orrs	r2, r1
 800b30a:	b2d2      	uxtb	r2, r2
 800b30c:	701a      	strb	r2, [r3, #0]

            if((can1_ccu_status_1->fan3_temperature < 0) || (100 < can1_ccu_status_1->fan3_temperature)) return 0;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	2100      	movs	r1, #0
 800b314:	1c18      	adds	r0, r3, #0
 800b316:	f7fc ffd1 	bl	80082bc <__aeabi_fcmplt>
 800b31a:	1e03      	subs	r3, r0, #0
 800b31c:	d107      	bne.n	800b32e <can1_ccu_status_1_encode+0x1fa>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	4910      	ldr	r1, [pc, #64]	; (800b364 <can1_ccu_status_1_encode+0x230>)
 800b324:	1c18      	adds	r0, r3, #0
 800b326:	f7fc ffdd 	bl	80082e4 <__aeabi_fcmpgt>
 800b32a:	1e03      	subs	r3, r0, #0
 800b32c:	d001      	beq.n	800b332 <can1_ccu_status_1_encode+0x1fe>
 800b32e:	2300      	movs	r3, #0
 800b330:	e013      	b.n	800b35a <can1_ccu_status_1_encode+0x226>
            if((can1_ccu_status_1->inverter_pump_temperature < 0) || (100 < can1_ccu_status_1->inverter_pump_temperature)) return 0;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	2100      	movs	r1, #0
 800b338:	1c18      	adds	r0, r3, #0
 800b33a:	f7fc ffbf 	bl	80082bc <__aeabi_fcmplt>
 800b33e:	1e03      	subs	r3, r0, #0
 800b340:	d108      	bne.n	800b354 <can1_ccu_status_1_encode+0x220>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	4907      	ldr	r1, [pc, #28]	; (800b364 <can1_ccu_status_1_encode+0x230>)
 800b348:	1c18      	adds	r0, r3, #0
 800b34a:	f7fc ffcb 	bl	80082e4 <__aeabi_fcmpgt>
 800b34e:	1e03      	subs	r3, r0, #0
 800b350:	d100      	bne.n	800b354 <can1_ccu_status_1_encode+0x220>
        }
        break;
 800b352:	e001      	b.n	800b358 <can1_ccu_status_1_encode+0x224>
            if((can1_ccu_status_1->inverter_pump_temperature < 0) || (100 < can1_ccu_status_1->inverter_pump_temperature)) return 0;
 800b354:	2300      	movs	r3, #0
 800b356:	e000      	b.n	800b35a <can1_ccu_status_1_encode+0x226>
    }
    return 1;
 800b358:	2301      	movs	r3, #1
}
 800b35a:	0018      	movs	r0, r3
 800b35c:	46bd      	mov	sp, r7
 800b35e:	b004      	add	sp, #16
 800b360:	bdb0      	pop	{r4, r5, r7, pc}
 800b362:	46c0      	nop			; (mov r8, r8)
 800b364:	42c80000 	.word	0x42c80000

0800b368 <can1_ccu_status_2_encode>:

 
uint8_t can1_ccu_status_2_encode(can1_ccu_status_2_t* can1_ccu_status_2, uint8_t data[8]) {
 800b368:	b5b0      	push	{r4, r5, r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
    memset(data, 0, 8);
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2208      	movs	r2, #8
 800b376:	2100      	movs	r1, #0
 800b378:	0018      	movs	r0, r3
 800b37a:	f005 fa1d 	bl	80107b8 <memset>
    int8_t digital_input = 1.0 * ((double)can1_ccu_status_2->digital_input - 0.0);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	b25b      	sxtb	r3, r3
 800b384:	0018      	movs	r0, r3
 800b386:	f7ff fc71 	bl	800ac6c <__aeabi_i2d>
 800b38a:	0002      	movs	r2, r0
 800b38c:	000b      	movs	r3, r1
 800b38e:	250f      	movs	r5, #15
 800b390:	197c      	adds	r4, r7, r5
 800b392:	0010      	movs	r0, r2
 800b394:	0019      	movs	r1, r3
 800b396:	f7ff fc33 	bl	800ac00 <__aeabi_d2iz>
 800b39a:	0003      	movs	r3, r0
 800b39c:	7023      	strb	r3, [r4, #0]
    data[0] |= (uint8_t)digital_input & 0x01;
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	b25a      	sxtb	r2, r3
 800b3a4:	197b      	adds	r3, r7, r5
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	400b      	ands	r3, r1
 800b3ac:	b25b      	sxtb	r3, r3
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	b25b      	sxtb	r3, r3
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	701a      	strb	r2, [r3, #0]

    int8_t discharge_relay_open = 1.0 * ((double)can1_ccu_status_2->discharge_relay_open - 0.0);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	785b      	ldrb	r3, [r3, #1]
 800b3bc:	b25b      	sxtb	r3, r3
 800b3be:	0018      	movs	r0, r3
 800b3c0:	f7ff fc54 	bl	800ac6c <__aeabi_i2d>
 800b3c4:	0002      	movs	r2, r0
 800b3c6:	000b      	movs	r3, r1
 800b3c8:	250e      	movs	r5, #14
 800b3ca:	197c      	adds	r4, r7, r5
 800b3cc:	0010      	movs	r0, r2
 800b3ce:	0019      	movs	r1, r3
 800b3d0:	f7ff fc16 	bl	800ac00 <__aeabi_d2iz>
 800b3d4:	0003      	movs	r3, r0
 800b3d6:	7023      	strb	r3, [r4, #0]
    data[0] |= (uint8_t)((uint8_t)discharge_relay_open << (uint8_t)1) & 0x02;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	b25a      	sxtb	r2, r3
 800b3de:	197b      	adds	r3, r7, r5
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	18db      	adds	r3, r3, r3
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	b25b      	sxtb	r3, r3
 800b3e8:	2102      	movs	r1, #2
 800b3ea:	400b      	ands	r3, r1
 800b3ec:	b25b      	sxtb	r3, r3
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	b25b      	sxtb	r3, r3
 800b3f2:	b2da      	uxtb	r2, r3
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	701a      	strb	r2, [r3, #0]

    int16_t discharge_resistor_temperature = 1.0 * ((double)can1_ccu_status_2->discharge_resistor_temperature - 0.0);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	250c      	movs	r5, #12
 800b3fe:	197c      	adds	r4, r7, r5
 800b400:	1c18      	adds	r0, r3, #0
 800b402:	f7fd fdf3 	bl	8008fec <__aeabi_f2iz>
 800b406:	0003      	movs	r3, r0
 800b408:	8023      	strh	r3, [r4, #0]
    data[1] |= (uint8_t)discharge_resistor_temperature & 0xff;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	3301      	adds	r3, #1
 800b40e:	7819      	ldrb	r1, [r3, #0]
 800b410:	0028      	movs	r0, r5
 800b412:	183b      	adds	r3, r7, r0
 800b414:	881b      	ldrh	r3, [r3, #0]
 800b416:	b2da      	uxtb	r2, r3
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	3301      	adds	r3, #1
 800b41c:	430a      	orrs	r2, r1
 800b41e:	b2d2      	uxtb	r2, r2
 800b420:	701a      	strb	r2, [r3, #0]
    data[2] |= (uint8_t)((uint16_t)discharge_resistor_temperature >> (uint16_t)8) & 0x0f;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	3302      	adds	r3, #2
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	b25a      	sxtb	r2, r3
 800b42a:	183b      	adds	r3, r7, r0
 800b42c:	881b      	ldrh	r3, [r3, #0]
 800b42e:	0a1b      	lsrs	r3, r3, #8
 800b430:	b29b      	uxth	r3, r3
 800b432:	b25b      	sxtb	r3, r3
 800b434:	210f      	movs	r1, #15
 800b436:	400b      	ands	r3, r1
 800b438:	b25b      	sxtb	r3, r3
 800b43a:	4313      	orrs	r3, r2
 800b43c:	b25a      	sxtb	r2, r3
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	3302      	adds	r3, #2
 800b442:	b2d2      	uxtb	r2, r2
 800b444:	701a      	strb	r2, [r3, #0]

    int16_t extra_temperature = 1.0 * ((double)can1_ccu_status_2->extra_temperature - 0.0);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	250a      	movs	r5, #10
 800b44c:	197c      	adds	r4, r7, r5
 800b44e:	1c18      	adds	r0, r3, #0
 800b450:	f7fd fdcc 	bl	8008fec <__aeabi_f2iz>
 800b454:	0003      	movs	r3, r0
 800b456:	8023      	strh	r3, [r4, #0]
    data[2] |= (uint8_t)((uint16_t)extra_temperature << (uint16_t)4) & 0xf0;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	3302      	adds	r3, #2
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	b25a      	sxtb	r2, r3
 800b460:	0028      	movs	r0, r5
 800b462:	183b      	adds	r3, r7, r0
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	b2db      	uxtb	r3, r3
 800b468:	011b      	lsls	r3, r3, #4
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	b25b      	sxtb	r3, r3
 800b46e:	4313      	orrs	r3, r2
 800b470:	b25a      	sxtb	r2, r3
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	3302      	adds	r3, #2
 800b476:	b2d2      	uxtb	r2, r2
 800b478:	701a      	strb	r2, [r3, #0]
    data[3] |= (uint8_t)((uint16_t)extra_temperature >> (uint16_t)4) & 0xff;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	3303      	adds	r3, #3
 800b47e:	7819      	ldrb	r1, [r3, #0]
 800b480:	183b      	adds	r3, r7, r0
 800b482:	881b      	ldrh	r3, [r3, #0]
 800b484:	091b      	lsrs	r3, r3, #4
 800b486:	b29b      	uxth	r3, r3
 800b488:	b2da      	uxtb	r2, r3
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	3303      	adds	r3, #3
 800b48e:	430a      	orrs	r2, r1
 800b490:	b2d2      	uxtb	r2, r2
 800b492:	701a      	strb	r2, [r3, #0]

    if((can1_ccu_status_2->discharge_resistor_temperature < -10) || (190 < can1_ccu_status_2->discharge_resistor_temperature)) return 0;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	4913      	ldr	r1, [pc, #76]	; (800b4e8 <can1_ccu_status_2_encode+0x180>)
 800b49a:	1c18      	adds	r0, r3, #0
 800b49c:	f7fc ff0e 	bl	80082bc <__aeabi_fcmplt>
 800b4a0:	1e03      	subs	r3, r0, #0
 800b4a2:	d107      	bne.n	800b4b4 <can1_ccu_status_2_encode+0x14c>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	4910      	ldr	r1, [pc, #64]	; (800b4ec <can1_ccu_status_2_encode+0x184>)
 800b4aa:	1c18      	adds	r0, r3, #0
 800b4ac:	f7fc ff1a 	bl	80082e4 <__aeabi_fcmpgt>
 800b4b0:	1e03      	subs	r3, r0, #0
 800b4b2:	d001      	beq.n	800b4b8 <can1_ccu_status_2_encode+0x150>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	e012      	b.n	800b4de <can1_ccu_status_2_encode+0x176>
    if((can1_ccu_status_2->extra_temperature < -10) || (190 < can1_ccu_status_2->extra_temperature)) return 0;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	490a      	ldr	r1, [pc, #40]	; (800b4e8 <can1_ccu_status_2_encode+0x180>)
 800b4be:	1c18      	adds	r0, r3, #0
 800b4c0:	f7fc fefc 	bl	80082bc <__aeabi_fcmplt>
 800b4c4:	1e03      	subs	r3, r0, #0
 800b4c6:	d107      	bne.n	800b4d8 <can1_ccu_status_2_encode+0x170>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	4907      	ldr	r1, [pc, #28]	; (800b4ec <can1_ccu_status_2_encode+0x184>)
 800b4ce:	1c18      	adds	r0, r3, #0
 800b4d0:	f7fc ff08 	bl	80082e4 <__aeabi_fcmpgt>
 800b4d4:	1e03      	subs	r3, r0, #0
 800b4d6:	d001      	beq.n	800b4dc <can1_ccu_status_2_encode+0x174>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	e000      	b.n	800b4de <can1_ccu_status_2_encode+0x176>
    return 1;
 800b4dc:	2301      	movs	r3, #1
}
 800b4de:	0018      	movs	r0, r3
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	b004      	add	sp, #16
 800b4e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b4e6:	46c0      	nop			; (mov r8, r8)
 800b4e8:	c1200000 	.word	0xc1200000
 800b4ec:	433e0000 	.word	0x433e0000

0800b4f0 <HAL_CAN_RxFifo0MsgPendingCallback>:
#include "kthfspe_can.h"
 
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
   if(hcan == _can1) {
 800b4f8:	4b05      	ldr	r3, [pc, #20]	; (800b510 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d102      	bne.n	800b508 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>
       receive_callback_can_hal_can1(CAN_RX_FIFO0);
 800b502:	2000      	movs	r0, #0
 800b504:	f000 f818 	bl	800b538 <receive_callback_can_hal_can1>
   }
 
}
 800b508:	46c0      	nop			; (mov r8, r8)
 800b50a:	46bd      	mov	sp, r7
 800b50c:	b002      	add	sp, #8
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	20000494 	.word	0x20000494

0800b514 <HAL_CAN_RxFifo1MsgPendingCallback>:
 
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
   if(hcan == _can1) {
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	429a      	cmp	r2, r3
 800b524:	d102      	bne.n	800b52c <HAL_CAN_RxFifo1MsgPendingCallback+0x18>
       receive_callback_can_hal_can1(CAN_RX_FIFO1);
 800b526:	2001      	movs	r0, #1
 800b528:	f000 f806 	bl	800b538 <receive_callback_can_hal_can1>
   }
 
}
 800b52c:	46c0      	nop			; (mov r8, r8)
 800b52e:	46bd      	mov	sp, r7
 800b530:	b002      	add	sp, #8
 800b532:	bd80      	pop	{r7, pc}
 800b534:	20000494 	.word	0x20000494

0800b538 <receive_callback_can_hal_can1>:
can1_mcu_set_ccu_cooling_points_t rx_can1_mcu_set_ccu_cooling_points;
 
can1_ccu_status_1_t tx_can1_ccu_status_1;
can1_ccu_status_2_t tx_can1_ccu_status_2;
 
void receive_callback_can_hal_can1(uint32_t FIFO) {
 800b538:	b5b0      	push	{r4, r5, r7, lr}
 800b53a:	b08c      	sub	sp, #48	; 0x30
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
   CAN_RxHeaderTypeDef header;
   uint8_t data[8]; 
 
   if (HAL_OK == HAL_CAN_GetRxMessage(_can1, FIFO, &header, data)) {
 800b540:	4b0f      	ldr	r3, [pc, #60]	; (800b580 <receive_callback_can_hal_can1+0x48>)
 800b542:	6818      	ldr	r0, [r3, #0]
 800b544:	240c      	movs	r4, #12
 800b546:	193b      	adds	r3, r7, r4
 800b548:	2514      	movs	r5, #20
 800b54a:	197a      	adds	r2, r7, r5
 800b54c:	6879      	ldr	r1, [r7, #4]
 800b54e:	f002 fc0b 	bl	800dd68 <HAL_CAN_GetRxMessage>
 800b552:	1e03      	subs	r3, r0, #0
 800b554:	d10e      	bne.n	800b574 <receive_callback_can_hal_can1+0x3c>
       switch(header.StdId) {
 800b556:	197b      	adds	r3, r7, r5
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b5a      	cmp	r3, #90	; 0x5a
 800b55c:	d10b      	bne.n	800b576 <receive_callback_can_hal_can1+0x3e>
           case 90: {
               if(can1_mcu_set_ccu_cooling_points_decode(&rx_can1_mcu_set_ccu_cooling_points, data) || !CAN_VALID) {
 800b55e:	193a      	adds	r2, r7, r4
 800b560:	4b08      	ldr	r3, [pc, #32]	; (800b584 <receive_callback_can_hal_can1+0x4c>)
 800b562:	0011      	movs	r1, r2
 800b564:	0018      	movs	r0, r3
 800b566:	f7ff fc7d 	bl	800ae64 <can1_mcu_set_ccu_cooling_points_decode>
                   if(CAN_PARTIAL || can1_mcu_set_ccu_cooling_points_counter()) {
                       can1_mcu_set_ccu_cooling_points_receive_callback(&rx_can1_mcu_set_ccu_cooling_points);
 800b56a:	4b06      	ldr	r3, [pc, #24]	; (800b584 <receive_callback_can_hal_can1+0x4c>)
 800b56c:	0018      	movs	r0, r3
 800b56e:	f000 fc7b 	bl	800be68 <can1_mcu_set_ccu_cooling_points_receive_callback>
                   }
               }
           }
           break;
 800b572:	e000      	b.n	800b576 <receive_callback_can_hal_can1+0x3e>
        }
    }
 800b574:	46c0      	nop			; (mov r8, r8)
}
 800b576:	46c0      	nop			; (mov r8, r8)
 800b578:	46bd      	mov	sp, r7
 800b57a:	b00c      	add	sp, #48	; 0x30
 800b57c:	bdb0      	pop	{r4, r5, r7, pc}
 800b57e:	46c0      	nop			; (mov r8, r8)
 800b580:	20000494 	.word	0x20000494
 800b584:	200004a0 	.word	0x200004a0

0800b588 <can1_ccu_status_1_transmit>:
 
void can1_ccu_status_1_transmit() {
 800b588:	b590      	push	{r4, r7, lr}
 800b58a:	b089      	sub	sp, #36	; 0x24
 800b58c:	af00      	add	r7, sp, #0
    uint8_t data[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
 800b58e:	2418      	movs	r4, #24
 800b590:	193b      	adds	r3, r7, r4
 800b592:	4a38      	ldr	r2, [pc, #224]	; (800b674 <can1_ccu_status_1_transmit+0xec>)
 800b594:	ca03      	ldmia	r2!, {r0, r1}
 800b596:	c303      	stmia	r3!, {r0, r1}
    CAN_TxHeaderTypeDef header = {
 800b598:	003b      	movs	r3, r7
 800b59a:	0018      	movs	r0, r3
 800b59c:	2318      	movs	r3, #24
 800b59e:	001a      	movs	r2, r3
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	f005 f909 	bl	80107b8 <memset>
 800b5a6:	003b      	movs	r3, r7
 800b5a8:	2259      	movs	r2, #89	; 0x59
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	003b      	movs	r3, r7
 800b5ae:	2208      	movs	r2, #8
 800b5b0:	611a      	str	r2, [r3, #16]
        .StdId = 89,
        .RTR = CAN_RTR_DATA,
        .TransmitGlobalTime = DISABLE,
    };
 
   can1_ccu_status_1_transmit_callback(&tx_can1_ccu_status_1);
 800b5b2:	4b31      	ldr	r3, [pc, #196]	; (800b678 <can1_ccu_status_1_transmit+0xf0>)
 800b5b4:	0018      	movs	r0, r3
 800b5b6:	f000 fb57 	bl	800bc68 <can1_ccu_status_1_transmit_callback>
 
    tx_can1_ccu_status_1.mux_ID = 0;
 800b5ba:	4b2f      	ldr	r3, [pc, #188]	; (800b678 <can1_ccu_status_1_transmit+0xf0>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	701a      	strb	r2, [r3, #0]
    can1_ccu_status_1_encode(&tx_can1_ccu_status_1, data);
 800b5c0:	193a      	adds	r2, r7, r4
 800b5c2:	4b2d      	ldr	r3, [pc, #180]	; (800b678 <can1_ccu_status_1_transmit+0xf0>)
 800b5c4:	0011      	movs	r1, r2
 800b5c6:	0018      	movs	r0, r3
 800b5c8:	f7ff fdb4 	bl	800b134 <can1_ccu_status_1_encode>
    while(!HAL_CAN_GetTxMailboxesFreeLevel(_can1));
 800b5cc:	46c0      	nop			; (mov r8, r8)
 800b5ce:	4b2b      	ldr	r3, [pc, #172]	; (800b67c <can1_ccu_status_1_transmit+0xf4>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	0018      	movs	r0, r3
 800b5d4:	f002 fb90 	bl	800dcf8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800b5d8:	1e03      	subs	r3, r0, #0
 800b5da:	d0f8      	beq.n	800b5ce <can1_ccu_status_1_transmit+0x46>
    if (HAL_CAN_AddTxMessage(_can1, &header, data, &mailbox) != HAL_OK) {
 800b5dc:	4b27      	ldr	r3, [pc, #156]	; (800b67c <can1_ccu_status_1_transmit+0xf4>)
 800b5de:	6818      	ldr	r0, [r3, #0]
 800b5e0:	4b27      	ldr	r3, [pc, #156]	; (800b680 <can1_ccu_status_1_transmit+0xf8>)
 800b5e2:	2218      	movs	r2, #24
 800b5e4:	18ba      	adds	r2, r7, r2
 800b5e6:	0039      	movs	r1, r7
 800b5e8:	f002 faa8 	bl	800db3c <HAL_CAN_AddTxMessage>
 800b5ec:	1e03      	subs	r3, r0, #0
 800b5ee:	d001      	beq.n	800b5f4 <can1_ccu_status_1_transmit+0x6c>
        Error_Handler();
 800b5f0:	f000 feba 	bl	800c368 <Error_Handler>
    }
    tx_can1_ccu_status_1.mux_ID = 1;
 800b5f4:	4b20      	ldr	r3, [pc, #128]	; (800b678 <can1_ccu_status_1_transmit+0xf0>)
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	701a      	strb	r2, [r3, #0]
    can1_ccu_status_1_encode(&tx_can1_ccu_status_1, data);
 800b5fa:	2318      	movs	r3, #24
 800b5fc:	18fa      	adds	r2, r7, r3
 800b5fe:	4b1e      	ldr	r3, [pc, #120]	; (800b678 <can1_ccu_status_1_transmit+0xf0>)
 800b600:	0011      	movs	r1, r2
 800b602:	0018      	movs	r0, r3
 800b604:	f7ff fd96 	bl	800b134 <can1_ccu_status_1_encode>
    while(!HAL_CAN_GetTxMailboxesFreeLevel(_can1));
 800b608:	46c0      	nop			; (mov r8, r8)
 800b60a:	4b1c      	ldr	r3, [pc, #112]	; (800b67c <can1_ccu_status_1_transmit+0xf4>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	0018      	movs	r0, r3
 800b610:	f002 fb72 	bl	800dcf8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800b614:	1e03      	subs	r3, r0, #0
 800b616:	d0f8      	beq.n	800b60a <can1_ccu_status_1_transmit+0x82>
    if (HAL_CAN_AddTxMessage(_can1, &header, data, &mailbox) != HAL_OK) {
 800b618:	4b18      	ldr	r3, [pc, #96]	; (800b67c <can1_ccu_status_1_transmit+0xf4>)
 800b61a:	6818      	ldr	r0, [r3, #0]
 800b61c:	4b18      	ldr	r3, [pc, #96]	; (800b680 <can1_ccu_status_1_transmit+0xf8>)
 800b61e:	2218      	movs	r2, #24
 800b620:	18ba      	adds	r2, r7, r2
 800b622:	0039      	movs	r1, r7
 800b624:	f002 fa8a 	bl	800db3c <HAL_CAN_AddTxMessage>
 800b628:	1e03      	subs	r3, r0, #0
 800b62a:	d001      	beq.n	800b630 <can1_ccu_status_1_transmit+0xa8>
        Error_Handler();
 800b62c:	f000 fe9c 	bl	800c368 <Error_Handler>
    }
    tx_can1_ccu_status_1.mux_ID = 2;
 800b630:	4b11      	ldr	r3, [pc, #68]	; (800b678 <can1_ccu_status_1_transmit+0xf0>)
 800b632:	2202      	movs	r2, #2
 800b634:	701a      	strb	r2, [r3, #0]
    can1_ccu_status_1_encode(&tx_can1_ccu_status_1, data);
 800b636:	2318      	movs	r3, #24
 800b638:	18fa      	adds	r2, r7, r3
 800b63a:	4b0f      	ldr	r3, [pc, #60]	; (800b678 <can1_ccu_status_1_transmit+0xf0>)
 800b63c:	0011      	movs	r1, r2
 800b63e:	0018      	movs	r0, r3
 800b640:	f7ff fd78 	bl	800b134 <can1_ccu_status_1_encode>
    while(!HAL_CAN_GetTxMailboxesFreeLevel(_can1));
 800b644:	46c0      	nop			; (mov r8, r8)
 800b646:	4b0d      	ldr	r3, [pc, #52]	; (800b67c <can1_ccu_status_1_transmit+0xf4>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	0018      	movs	r0, r3
 800b64c:	f002 fb54 	bl	800dcf8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800b650:	1e03      	subs	r3, r0, #0
 800b652:	d0f8      	beq.n	800b646 <can1_ccu_status_1_transmit+0xbe>
    if (HAL_CAN_AddTxMessage(_can1, &header, data, &mailbox) != HAL_OK) {
 800b654:	4b09      	ldr	r3, [pc, #36]	; (800b67c <can1_ccu_status_1_transmit+0xf4>)
 800b656:	6818      	ldr	r0, [r3, #0]
 800b658:	4b09      	ldr	r3, [pc, #36]	; (800b680 <can1_ccu_status_1_transmit+0xf8>)
 800b65a:	2218      	movs	r2, #24
 800b65c:	18ba      	adds	r2, r7, r2
 800b65e:	0039      	movs	r1, r7
 800b660:	f002 fa6c 	bl	800db3c <HAL_CAN_AddTxMessage>
 800b664:	1e03      	subs	r3, r0, #0
 800b666:	d001      	beq.n	800b66c <can1_ccu_status_1_transmit+0xe4>
        Error_Handler();
 800b668:	f000 fe7e 	bl	800c368 <Error_Handler>
    }
}
 800b66c:	46c0      	nop			; (mov r8, r8)
 800b66e:	46bd      	mov	sp, r7
 800b670:	b009      	add	sp, #36	; 0x24
 800b672:	bd90      	pop	{r4, r7, pc}
 800b674:	08010d70 	.word	0x08010d70
 800b678:	200004bc 	.word	0x200004bc
 800b67c:	20000494 	.word	0x20000494
 800b680:	20000498 	.word	0x20000498

0800b684 <can1_ccu_status_2_transmit>:
void can1_ccu_status_2_transmit() {
 800b684:	b590      	push	{r4, r7, lr}
 800b686:	b089      	sub	sp, #36	; 0x24
 800b688:	af00      	add	r7, sp, #0
    uint8_t data[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
 800b68a:	2418      	movs	r4, #24
 800b68c:	193b      	adds	r3, r7, r4
 800b68e:	4a19      	ldr	r2, [pc, #100]	; (800b6f4 <can1_ccu_status_2_transmit+0x70>)
 800b690:	ca03      	ldmia	r2!, {r0, r1}
 800b692:	c303      	stmia	r3!, {r0, r1}
    CAN_TxHeaderTypeDef header = {
 800b694:	003b      	movs	r3, r7
 800b696:	0018      	movs	r0, r3
 800b698:	2318      	movs	r3, #24
 800b69a:	001a      	movs	r2, r3
 800b69c:	2100      	movs	r1, #0
 800b69e:	f005 f88b 	bl	80107b8 <memset>
 800b6a2:	003b      	movs	r3, r7
 800b6a4:	2258      	movs	r2, #88	; 0x58
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	003b      	movs	r3, r7
 800b6aa:	2208      	movs	r2, #8
 800b6ac:	611a      	str	r2, [r3, #16]
        .StdId = 88,
        .RTR = CAN_RTR_DATA,
        .TransmitGlobalTime = DISABLE,
    };
 
   can1_ccu_status_2_transmit_callback(&tx_can1_ccu_status_2);
 800b6ae:	4b12      	ldr	r3, [pc, #72]	; (800b6f8 <can1_ccu_status_2_transmit+0x74>)
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	f000 fafb 	bl	800bcac <can1_ccu_status_2_transmit_callback>
 
    can1_ccu_status_2_encode(&tx_can1_ccu_status_2, data);
 800b6b6:	193a      	adds	r2, r7, r4
 800b6b8:	4b0f      	ldr	r3, [pc, #60]	; (800b6f8 <can1_ccu_status_2_transmit+0x74>)
 800b6ba:	0011      	movs	r1, r2
 800b6bc:	0018      	movs	r0, r3
 800b6be:	f7ff fe53 	bl	800b368 <can1_ccu_status_2_encode>
    while(!HAL_CAN_GetTxMailboxesFreeLevel(_can1));
 800b6c2:	46c0      	nop			; (mov r8, r8)
 800b6c4:	4b0d      	ldr	r3, [pc, #52]	; (800b6fc <can1_ccu_status_2_transmit+0x78>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	0018      	movs	r0, r3
 800b6ca:	f002 fb15 	bl	800dcf8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800b6ce:	1e03      	subs	r3, r0, #0
 800b6d0:	d0f8      	beq.n	800b6c4 <can1_ccu_status_2_transmit+0x40>
    if (HAL_CAN_AddTxMessage(_can1, &header, data, &mailbox) != HAL_OK) {
 800b6d2:	4b0a      	ldr	r3, [pc, #40]	; (800b6fc <can1_ccu_status_2_transmit+0x78>)
 800b6d4:	6818      	ldr	r0, [r3, #0]
 800b6d6:	4b0a      	ldr	r3, [pc, #40]	; (800b700 <can1_ccu_status_2_transmit+0x7c>)
 800b6d8:	2218      	movs	r2, #24
 800b6da:	18ba      	adds	r2, r7, r2
 800b6dc:	0039      	movs	r1, r7
 800b6de:	f002 fa2d 	bl	800db3c <HAL_CAN_AddTxMessage>
 800b6e2:	1e03      	subs	r3, r0, #0
 800b6e4:	d001      	beq.n	800b6ea <can1_ccu_status_2_transmit+0x66>
        Error_Handler();
 800b6e6:	f000 fe3f 	bl	800c368 <Error_Handler>
    }
}
 800b6ea:	46c0      	nop			; (mov r8, r8)
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	b009      	add	sp, #36	; 0x24
 800b6f0:	bd90      	pop	{r4, r7, pc}
 800b6f2:	46c0      	nop			; (mov r8, r8)
 800b6f4:	08010d70 	.word	0x08010d70
 800b6f8:	200004d8 	.word	0x200004d8
 800b6fc:	20000494 	.word	0x20000494
 800b700:	20000498 	.word	0x20000498

0800b704 <init_peripheral_can_hal_can1>:
 
uint8_t init_peripheral_can_hal_can1(CAN_HandleTypeDef* __can1){
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
   _can1 = __can1;
 800b70c:	4b12      	ldr	r3, [pc, #72]	; (800b758 <init_peripheral_can_hal_can1+0x54>)
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	601a      	str	r2, [r3, #0]
 
   if (HAL_CAN_Start(_can1) != HAL_OK) {
 800b712:	4b11      	ldr	r3, [pc, #68]	; (800b758 <init_peripheral_can_hal_can1+0x54>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	0018      	movs	r0, r3
 800b718:	f002 f984 	bl	800da24 <HAL_CAN_Start>
 800b71c:	1e03      	subs	r3, r0, #0
 800b71e:	d001      	beq.n	800b724 <init_peripheral_can_hal_can1+0x20>
       return 0;
 800b720:	2300      	movs	r3, #0
 800b722:	e015      	b.n	800b750 <init_peripheral_can_hal_can1+0x4c>
   }
   if (HAL_CAN_WakeUp(_can1) != HAL_OK) {
 800b724:	4b0c      	ldr	r3, [pc, #48]	; (800b758 <init_peripheral_can_hal_can1+0x54>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	0018      	movs	r0, r3
 800b72a:	f002 f9c1 	bl	800dab0 <HAL_CAN_WakeUp>
 800b72e:	1e03      	subs	r3, r0, #0
 800b730:	d001      	beq.n	800b736 <init_peripheral_can_hal_can1+0x32>
       return 0;
 800b732:	2300      	movs	r3, #0
 800b734:	e00c      	b.n	800b750 <init_peripheral_can_hal_can1+0x4c>
   }
   if (HAL_CAN_ActivateNotification(_can1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 800b736:	4b08      	ldr	r3, [pc, #32]	; (800b758 <init_peripheral_can_hal_can1+0x54>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2112      	movs	r1, #18
 800b73c:	0018      	movs	r0, r3
 800b73e:	f002 fc2f 	bl	800dfa0 <HAL_CAN_ActivateNotification>
 800b742:	1e03      	subs	r3, r0, #0
 800b744:	d001      	beq.n	800b74a <init_peripheral_can_hal_can1+0x46>
       return 0;
 800b746:	2300      	movs	r3, #0
 800b748:	e002      	b.n	800b750 <init_peripheral_can_hal_can1+0x4c>
   }
 
   return init_filter_can_hal_can1();
 800b74a:	f000 f807 	bl	800b75c <init_filter_can_hal_can1>
 800b74e:	0003      	movs	r3, r0
}
 800b750:	0018      	movs	r0, r3
 800b752:	46bd      	mov	sp, r7
 800b754:	b002      	add	sp, #8
 800b756:	bd80      	pop	{r7, pc}
 800b758:	20000494 	.word	0x20000494

0800b75c <init_filter_can_hal_can1>:
 
uint8_t init_filter_can_hal_can1(){
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b08a      	sub	sp, #40	; 0x28
 800b760:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef filter_config;
   filter_config.FilterActivation = ENABLE;
 800b762:	003b      	movs	r3, r7
 800b764:	2201      	movs	r2, #1
 800b766:	621a      	str	r2, [r3, #32]
   filter_config.FilterScale = CAN_FILTERSCALE_16BIT;
 800b768:	003b      	movs	r3, r7
 800b76a:	2200      	movs	r2, #0
 800b76c:	61da      	str	r2, [r3, #28]
 
   filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 800b76e:	003b      	movs	r3, r7
 800b770:	2200      	movs	r2, #0
 800b772:	619a      	str	r2, [r3, #24]
   filter_config.FilterBank = filter_counter++;
 800b774:	4b1b      	ldr	r3, [pc, #108]	; (800b7e4 <init_filter_can_hal_can1+0x88>)
 800b776:	881b      	ldrh	r3, [r3, #0]
 800b778:	1c5a      	adds	r2, r3, #1
 800b77a:	b291      	uxth	r1, r2
 800b77c:	4a19      	ldr	r2, [pc, #100]	; (800b7e4 <init_filter_can_hal_can1+0x88>)
 800b77e:	8011      	strh	r1, [r2, #0]
 800b780:	001a      	movs	r2, r3
 800b782:	003b      	movs	r3, r7
 800b784:	615a      	str	r2, [r3, #20]
   filter_config.FilterMaskIdHigh = (0xffff << 5) & 0xffff;
 800b786:	003b      	movs	r3, r7
 800b788:	4a17      	ldr	r2, [pc, #92]	; (800b7e8 <init_filter_can_hal_can1+0x8c>)
 800b78a:	609a      	str	r2, [r3, #8]
   filter_config.FilterIdHigh = (0x005a << 5) & 0xffff;
 800b78c:	003b      	movs	r3, r7
 800b78e:	22b4      	movs	r2, #180	; 0xb4
 800b790:	0112      	lsls	r2, r2, #4
 800b792:	601a      	str	r2, [r3, #0]
   filter_config.FilterMaskIdLow = (0xffff << 5) & 0xffff;
 800b794:	003b      	movs	r3, r7
 800b796:	4a14      	ldr	r2, [pc, #80]	; (800b7e8 <init_filter_can_hal_can1+0x8c>)
 800b798:	60da      	str	r2, [r3, #12]
   filter_config.FilterIdLow = (0x0000 << 5) & 0xffff;
 800b79a:	003b      	movs	r3, r7
 800b79c:	2200      	movs	r2, #0
 800b79e:	605a      	str	r2, [r3, #4]
 
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800b7a0:	003b      	movs	r3, r7
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	611a      	str	r2, [r3, #16]
   if (HAL_CAN_ConfigFilter(_can1, &filter_config) != HAL_OK) return 0;
 800b7a6:	4b11      	ldr	r3, [pc, #68]	; (800b7ec <init_filter_can_hal_can1+0x90>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	003a      	movs	r2, r7
 800b7ac:	0011      	movs	r1, r2
 800b7ae:	0018      	movs	r0, r3
 800b7b0:	f002 f846 	bl	800d840 <HAL_CAN_ConfigFilter>
 800b7b4:	1e03      	subs	r3, r0, #0
 800b7b6:	d001      	beq.n	800b7bc <init_filter_can_hal_can1+0x60>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	e00e      	b.n	800b7da <init_filter_can_hal_can1+0x7e>
   filter_config.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800b7bc:	003b      	movs	r3, r7
 800b7be:	2201      	movs	r2, #1
 800b7c0:	611a      	str	r2, [r3, #16]
   if (HAL_CAN_ConfigFilter(_can1, &filter_config) != HAL_OK) return 0;
 800b7c2:	4b0a      	ldr	r3, [pc, #40]	; (800b7ec <init_filter_can_hal_can1+0x90>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	003a      	movs	r2, r7
 800b7c8:	0011      	movs	r1, r2
 800b7ca:	0018      	movs	r0, r3
 800b7cc:	f002 f838 	bl	800d840 <HAL_CAN_ConfigFilter>
 800b7d0:	1e03      	subs	r3, r0, #0
 800b7d2:	d001      	beq.n	800b7d8 <init_filter_can_hal_can1+0x7c>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	e000      	b.n	800b7da <init_filter_can_hal_can1+0x7e>
 
   return 1;
 800b7d8:	2301      	movs	r3, #1
}
 800b7da:	0018      	movs	r0, r3
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	b00a      	add	sp, #40	; 0x28
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	46c0      	nop			; (mov r8, r8)
 800b7e4:	2000049c 	.word	0x2000049c
 800b7e8:	0000ffe0 	.word	0x0000ffe0
 800b7ec:	20000494 	.word	0x20000494

0800b7f0 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800b7f6:	1d3b      	adds	r3, r7, #4
 800b7f8:	0018      	movs	r0, r3
 800b7fa:	230c      	movs	r3, #12
 800b7fc:	001a      	movs	r2, r3
 800b7fe:	2100      	movs	r1, #0
 800b800:	f004 ffda 	bl	80107b8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800b804:	4b3f      	ldr	r3, [pc, #252]	; (800b904 <MX_ADC_Init+0x114>)
 800b806:	4a40      	ldr	r2, [pc, #256]	; (800b908 <MX_ADC_Init+0x118>)
 800b808:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800b80a:	4b3e      	ldr	r3, [pc, #248]	; (800b904 <MX_ADC_Init+0x114>)
 800b80c:	2200      	movs	r2, #0
 800b80e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800b810:	4b3c      	ldr	r3, [pc, #240]	; (800b904 <MX_ADC_Init+0x114>)
 800b812:	2200      	movs	r2, #0
 800b814:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800b816:	4b3b      	ldr	r3, [pc, #236]	; (800b904 <MX_ADC_Init+0x114>)
 800b818:	2200      	movs	r2, #0
 800b81a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800b81c:	4b39      	ldr	r3, [pc, #228]	; (800b904 <MX_ADC_Init+0x114>)
 800b81e:	2201      	movs	r2, #1
 800b820:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800b822:	4b38      	ldr	r3, [pc, #224]	; (800b904 <MX_ADC_Init+0x114>)
 800b824:	2204      	movs	r2, #4
 800b826:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800b828:	4b36      	ldr	r3, [pc, #216]	; (800b904 <MX_ADC_Init+0x114>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800b82e:	4b35      	ldr	r3, [pc, #212]	; (800b904 <MX_ADC_Init+0x114>)
 800b830:	2200      	movs	r2, #0
 800b832:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800b834:	4b33      	ldr	r3, [pc, #204]	; (800b904 <MX_ADC_Init+0x114>)
 800b836:	2200      	movs	r2, #0
 800b838:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800b83a:	4b32      	ldr	r3, [pc, #200]	; (800b904 <MX_ADC_Init+0x114>)
 800b83c:	2200      	movs	r2, #0
 800b83e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800b840:	4b30      	ldr	r3, [pc, #192]	; (800b904 <MX_ADC_Init+0x114>)
 800b842:	2280      	movs	r2, #128	; 0x80
 800b844:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800b846:	4b2f      	ldr	r3, [pc, #188]	; (800b904 <MX_ADC_Init+0x114>)
 800b848:	2280      	movs	r2, #128	; 0x80
 800b84a:	00d2      	lsls	r2, r2, #3
 800b84c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800b84e:	4b2d      	ldr	r3, [pc, #180]	; (800b904 <MX_ADC_Init+0x114>)
 800b850:	2224      	movs	r2, #36	; 0x24
 800b852:	2100      	movs	r1, #0
 800b854:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800b856:	4b2b      	ldr	r3, [pc, #172]	; (800b904 <MX_ADC_Init+0x114>)
 800b858:	2201      	movs	r2, #1
 800b85a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800b85c:	4b29      	ldr	r3, [pc, #164]	; (800b904 <MX_ADC_Init+0x114>)
 800b85e:	0018      	movs	r0, r3
 800b860:	f001 fa48 	bl	800ccf4 <HAL_ADC_Init>
 800b864:	1e03      	subs	r3, r0, #0
 800b866:	d001      	beq.n	800b86c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800b868:	f000 fd7e 	bl	800c368 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800b86c:	1d3b      	adds	r3, r7, #4
 800b86e:	2204      	movs	r2, #4
 800b870:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800b872:	1d3b      	adds	r3, r7, #4
 800b874:	2280      	movs	r2, #128	; 0x80
 800b876:	0152      	lsls	r2, r2, #5
 800b878:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800b87a:	1d3b      	adds	r3, r7, #4
 800b87c:	2204      	movs	r2, #4
 800b87e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800b880:	1d3a      	adds	r2, r7, #4
 800b882:	4b20      	ldr	r3, [pc, #128]	; (800b904 <MX_ADC_Init+0x114>)
 800b884:	0011      	movs	r1, r2
 800b886:	0018      	movs	r0, r3
 800b888:	f001 fcc6 	bl	800d218 <HAL_ADC_ConfigChannel>
 800b88c:	1e03      	subs	r3, r0, #0
 800b88e:	d001      	beq.n	800b894 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800b890:	f000 fd6a 	bl	800c368 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800b894:	1d3b      	adds	r3, r7, #4
 800b896:	2205      	movs	r2, #5
 800b898:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800b89a:	1d3a      	adds	r2, r7, #4
 800b89c:	4b19      	ldr	r3, [pc, #100]	; (800b904 <MX_ADC_Init+0x114>)
 800b89e:	0011      	movs	r1, r2
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	f001 fcb9 	bl	800d218 <HAL_ADC_ConfigChannel>
 800b8a6:	1e03      	subs	r3, r0, #0
 800b8a8:	d001      	beq.n	800b8ae <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800b8aa:	f000 fd5d 	bl	800c368 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800b8ae:	1d3b      	adds	r3, r7, #4
 800b8b0:	2206      	movs	r2, #6
 800b8b2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800b8b4:	1d3a      	adds	r2, r7, #4
 800b8b6:	4b13      	ldr	r3, [pc, #76]	; (800b904 <MX_ADC_Init+0x114>)
 800b8b8:	0011      	movs	r1, r2
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f001 fcac 	bl	800d218 <HAL_ADC_ConfigChannel>
 800b8c0:	1e03      	subs	r3, r0, #0
 800b8c2:	d001      	beq.n	800b8c8 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 800b8c4:	f000 fd50 	bl	800c368 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800b8c8:	1d3b      	adds	r3, r7, #4
 800b8ca:	2207      	movs	r2, #7
 800b8cc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800b8ce:	1d3a      	adds	r2, r7, #4
 800b8d0:	4b0c      	ldr	r3, [pc, #48]	; (800b904 <MX_ADC_Init+0x114>)
 800b8d2:	0011      	movs	r1, r2
 800b8d4:	0018      	movs	r0, r3
 800b8d6:	f001 fc9f 	bl	800d218 <HAL_ADC_ConfigChannel>
 800b8da:	1e03      	subs	r3, r0, #0
 800b8dc:	d001      	beq.n	800b8e2 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800b8de:	f000 fd43 	bl	800c368 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800b8e2:	1d3b      	adds	r3, r7, #4
 800b8e4:	220e      	movs	r2, #14
 800b8e6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800b8e8:	1d3a      	adds	r2, r7, #4
 800b8ea:	4b06      	ldr	r3, [pc, #24]	; (800b904 <MX_ADC_Init+0x114>)
 800b8ec:	0011      	movs	r1, r2
 800b8ee:	0018      	movs	r0, r3
 800b8f0:	f001 fc92 	bl	800d218 <HAL_ADC_ConfigChannel>
 800b8f4:	1e03      	subs	r3, r0, #0
 800b8f6:	d001      	beq.n	800b8fc <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 800b8f8:	f000 fd36 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800b8fc:	46c0      	nop			; (mov r8, r8)
 800b8fe:	46bd      	mov	sp, r7
 800b900:	b004      	add	sp, #16
 800b902:	bd80      	pop	{r7, pc}
 800b904:	200004e4 	.word	0x200004e4
 800b908:	40012400 	.word	0x40012400

0800b90c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800b90c:	b590      	push	{r4, r7, lr}
 800b90e:	b08b      	sub	sp, #44	; 0x2c
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b914:	2414      	movs	r4, #20
 800b916:	193b      	adds	r3, r7, r4
 800b918:	0018      	movs	r0, r3
 800b91a:	2314      	movs	r3, #20
 800b91c:	001a      	movs	r2, r3
 800b91e:	2100      	movs	r1, #0
 800b920:	f004 ff4a 	bl	80107b8 <memset>
  if(adcHandle->Instance==ADC1)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a48      	ldr	r2, [pc, #288]	; (800ba4c <HAL_ADC_MspInit+0x140>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d000      	beq.n	800b930 <HAL_ADC_MspInit+0x24>
 800b92e:	e088      	b.n	800ba42 <HAL_ADC_MspInit+0x136>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800b930:	4b47      	ldr	r3, [pc, #284]	; (800ba50 <HAL_ADC_MspInit+0x144>)
 800b932:	699a      	ldr	r2, [r3, #24]
 800b934:	4b46      	ldr	r3, [pc, #280]	; (800ba50 <HAL_ADC_MspInit+0x144>)
 800b936:	2180      	movs	r1, #128	; 0x80
 800b938:	0089      	lsls	r1, r1, #2
 800b93a:	430a      	orrs	r2, r1
 800b93c:	619a      	str	r2, [r3, #24]
 800b93e:	4b44      	ldr	r3, [pc, #272]	; (800ba50 <HAL_ADC_MspInit+0x144>)
 800b940:	699a      	ldr	r2, [r3, #24]
 800b942:	2380      	movs	r3, #128	; 0x80
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4013      	ands	r3, r2
 800b948:	613b      	str	r3, [r7, #16]
 800b94a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b94c:	4b40      	ldr	r3, [pc, #256]	; (800ba50 <HAL_ADC_MspInit+0x144>)
 800b94e:	695a      	ldr	r2, [r3, #20]
 800b950:	4b3f      	ldr	r3, [pc, #252]	; (800ba50 <HAL_ADC_MspInit+0x144>)
 800b952:	2180      	movs	r1, #128	; 0x80
 800b954:	0289      	lsls	r1, r1, #10
 800b956:	430a      	orrs	r2, r1
 800b958:	615a      	str	r2, [r3, #20]
 800b95a:	4b3d      	ldr	r3, [pc, #244]	; (800ba50 <HAL_ADC_MspInit+0x144>)
 800b95c:	695a      	ldr	r2, [r3, #20]
 800b95e:	2380      	movs	r3, #128	; 0x80
 800b960:	029b      	lsls	r3, r3, #10
 800b962:	4013      	ands	r3, r2
 800b964:	60fb      	str	r3, [r7, #12]
 800b966:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b968:	4b39      	ldr	r3, [pc, #228]	; (800ba50 <HAL_ADC_MspInit+0x144>)
 800b96a:	695a      	ldr	r2, [r3, #20]
 800b96c:	4b38      	ldr	r3, [pc, #224]	; (800ba50 <HAL_ADC_MspInit+0x144>)
 800b96e:	2180      	movs	r1, #128	; 0x80
 800b970:	0309      	lsls	r1, r1, #12
 800b972:	430a      	orrs	r2, r1
 800b974:	615a      	str	r2, [r3, #20]
 800b976:	4b36      	ldr	r3, [pc, #216]	; (800ba50 <HAL_ADC_MspInit+0x144>)
 800b978:	695a      	ldr	r2, [r3, #20]
 800b97a:	2380      	movs	r3, #128	; 0x80
 800b97c:	031b      	lsls	r3, r3, #12
 800b97e:	4013      	ands	r3, r2
 800b980:	60bb      	str	r3, [r7, #8]
 800b982:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PC4     ------> ADC_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800b984:	193b      	adds	r3, r7, r4
 800b986:	22f0      	movs	r2, #240	; 0xf0
 800b988:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b98a:	193b      	adds	r3, r7, r4
 800b98c:	2203      	movs	r2, #3
 800b98e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b990:	193b      	adds	r3, r7, r4
 800b992:	2200      	movs	r2, #0
 800b994:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b996:	193a      	adds	r2, r7, r4
 800b998:	2390      	movs	r3, #144	; 0x90
 800b99a:	05db      	lsls	r3, r3, #23
 800b99c:	0011      	movs	r1, r2
 800b99e:	0018      	movs	r0, r3
 800b9a0:	f002 ffc8 	bl	800e934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800b9a4:	193b      	adds	r3, r7, r4
 800b9a6:	2210      	movs	r2, #16
 800b9a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b9aa:	193b      	adds	r3, r7, r4
 800b9ac:	2203      	movs	r2, #3
 800b9ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9b0:	193b      	adds	r3, r7, r4
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b9b6:	193b      	adds	r3, r7, r4
 800b9b8:	4a26      	ldr	r2, [pc, #152]	; (800ba54 <HAL_ADC_MspInit+0x148>)
 800b9ba:	0019      	movs	r1, r3
 800b9bc:	0010      	movs	r0, r2
 800b9be:	f002 ffb9 	bl	800e934 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800b9c2:	4b25      	ldr	r3, [pc, #148]	; (800ba58 <HAL_ADC_MspInit+0x14c>)
 800b9c4:	4a25      	ldr	r2, [pc, #148]	; (800ba5c <HAL_ADC_MspInit+0x150>)
 800b9c6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b9c8:	4b23      	ldr	r3, [pc, #140]	; (800ba58 <HAL_ADC_MspInit+0x14c>)
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800b9ce:	4b22      	ldr	r3, [pc, #136]	; (800ba58 <HAL_ADC_MspInit+0x14c>)
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800b9d4:	4b20      	ldr	r3, [pc, #128]	; (800ba58 <HAL_ADC_MspInit+0x14c>)
 800b9d6:	2280      	movs	r2, #128	; 0x80
 800b9d8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800b9da:	4b1f      	ldr	r3, [pc, #124]	; (800ba58 <HAL_ADC_MspInit+0x14c>)
 800b9dc:	2280      	movs	r2, #128	; 0x80
 800b9de:	0052      	lsls	r2, r2, #1
 800b9e0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800b9e2:	4b1d      	ldr	r3, [pc, #116]	; (800ba58 <HAL_ADC_MspInit+0x14c>)
 800b9e4:	2280      	movs	r2, #128	; 0x80
 800b9e6:	00d2      	lsls	r2, r2, #3
 800b9e8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800b9ea:	4b1b      	ldr	r3, [pc, #108]	; (800ba58 <HAL_ADC_MspInit+0x14c>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800b9f0:	4b19      	ldr	r3, [pc, #100]	; (800ba58 <HAL_ADC_MspInit+0x14c>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800b9f6:	4b18      	ldr	r3, [pc, #96]	; (800ba58 <HAL_ADC_MspInit+0x14c>)
 800b9f8:	0018      	movs	r0, r3
 800b9fa:	f002 fde5 	bl	800e5c8 <HAL_DMA_Init>
 800b9fe:	1e03      	subs	r3, r0, #0
 800ba00:	d001      	beq.n	800ba06 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800ba02:	f000 fcb1 	bl	800c368 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 800ba06:	4a16      	ldr	r2, [pc, #88]	; (800ba60 <HAL_ADC_MspInit+0x154>)
 800ba08:	23a8      	movs	r3, #168	; 0xa8
 800ba0a:	58d3      	ldr	r3, [r2, r3]
 800ba0c:	4914      	ldr	r1, [pc, #80]	; (800ba60 <HAL_ADC_MspInit+0x154>)
 800ba0e:	220f      	movs	r2, #15
 800ba10:	4393      	bics	r3, r2
 800ba12:	22a8      	movs	r2, #168	; 0xa8
 800ba14:	508b      	str	r3, [r1, r2]
 800ba16:	4a12      	ldr	r2, [pc, #72]	; (800ba60 <HAL_ADC_MspInit+0x154>)
 800ba18:	23a8      	movs	r3, #168	; 0xa8
 800ba1a:	58d3      	ldr	r3, [r2, r3]
 800ba1c:	4910      	ldr	r1, [pc, #64]	; (800ba60 <HAL_ADC_MspInit+0x154>)
 800ba1e:	2201      	movs	r2, #1
 800ba20:	4313      	orrs	r3, r2
 800ba22:	22a8      	movs	r2, #168	; 0xa8
 800ba24:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a0b      	ldr	r2, [pc, #44]	; (800ba58 <HAL_ADC_MspInit+0x14c>)
 800ba2a:	631a      	str	r2, [r3, #48]	; 0x30
 800ba2c:	4b0a      	ldr	r3, [pc, #40]	; (800ba58 <HAL_ADC_MspInit+0x14c>)
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800ba32:	2200      	movs	r2, #0
 800ba34:	2100      	movs	r1, #0
 800ba36:	200c      	movs	r0, #12
 800ba38:	f002 fd94 	bl	800e564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800ba3c:	200c      	movs	r0, #12
 800ba3e:	f002 fda6 	bl	800e58e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800ba42:	46c0      	nop			; (mov r8, r8)
 800ba44:	46bd      	mov	sp, r7
 800ba46:	b00b      	add	sp, #44	; 0x2c
 800ba48:	bd90      	pop	{r4, r7, pc}
 800ba4a:	46c0      	nop			; (mov r8, r8)
 800ba4c:	40012400 	.word	0x40012400
 800ba50:	40021000 	.word	0x40021000
 800ba54:	48000800 	.word	0x48000800
 800ba58:	20000524 	.word	0x20000524
 800ba5c:	40020008 	.word	0x40020008
 800ba60:	40020000 	.word	0x40020000

0800ba64 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800ba68:	4b17      	ldr	r3, [pc, #92]	; (800bac8 <MX_CAN_Init+0x64>)
 800ba6a:	4a18      	ldr	r2, [pc, #96]	; (800bacc <MX_CAN_Init+0x68>)
 800ba6c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 800ba6e:	4b16      	ldr	r3, [pc, #88]	; (800bac8 <MX_CAN_Init+0x64>)
 800ba70:	2201      	movs	r2, #1
 800ba72:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800ba74:	4b14      	ldr	r3, [pc, #80]	; (800bac8 <MX_CAN_Init+0x64>)
 800ba76:	2200      	movs	r2, #0
 800ba78:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800ba7a:	4b13      	ldr	r3, [pc, #76]	; (800bac8 <MX_CAN_Init+0x64>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800ba80:	4b11      	ldr	r3, [pc, #68]	; (800bac8 <MX_CAN_Init+0x64>)
 800ba82:	22a0      	movs	r2, #160	; 0xa0
 800ba84:	02d2      	lsls	r2, r2, #11
 800ba86:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800ba88:	4b0f      	ldr	r3, [pc, #60]	; (800bac8 <MX_CAN_Init+0x64>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800ba8e:	4b0e      	ldr	r3, [pc, #56]	; (800bac8 <MX_CAN_Init+0x64>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800ba94:	4b0c      	ldr	r3, [pc, #48]	; (800bac8 <MX_CAN_Init+0x64>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800ba9a:	4b0b      	ldr	r3, [pc, #44]	; (800bac8 <MX_CAN_Init+0x64>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800baa0:	4b09      	ldr	r3, [pc, #36]	; (800bac8 <MX_CAN_Init+0x64>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800baa6:	4b08      	ldr	r3, [pc, #32]	; (800bac8 <MX_CAN_Init+0x64>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800baac:	4b06      	ldr	r3, [pc, #24]	; (800bac8 <MX_CAN_Init+0x64>)
 800baae:	2200      	movs	r2, #0
 800bab0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800bab2:	4b05      	ldr	r3, [pc, #20]	; (800bac8 <MX_CAN_Init+0x64>)
 800bab4:	0018      	movs	r0, r3
 800bab6:	f001 fdc5 	bl	800d644 <HAL_CAN_Init>
 800baba:	1e03      	subs	r3, r0, #0
 800babc:	d001      	beq.n	800bac2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800babe:	f000 fc53 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800bac2:	46c0      	nop			; (mov r8, r8)
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	20000568 	.word	0x20000568
 800bacc:	40006400 	.word	0x40006400

0800bad0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800bad0:	b590      	push	{r4, r7, lr}
 800bad2:	b08b      	sub	sp, #44	; 0x2c
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bad8:	2414      	movs	r4, #20
 800bada:	193b      	adds	r3, r7, r4
 800badc:	0018      	movs	r0, r3
 800bade:	2314      	movs	r3, #20
 800bae0:	001a      	movs	r2, r3
 800bae2:	2100      	movs	r1, #0
 800bae4:	f004 fe68 	bl	80107b8 <memset>
  if(canHandle->Instance==CAN)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a20      	ldr	r2, [pc, #128]	; (800bb70 <HAL_CAN_MspInit+0xa0>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d13a      	bne.n	800bb68 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800baf2:	4b20      	ldr	r3, [pc, #128]	; (800bb74 <HAL_CAN_MspInit+0xa4>)
 800baf4:	69da      	ldr	r2, [r3, #28]
 800baf6:	4b1f      	ldr	r3, [pc, #124]	; (800bb74 <HAL_CAN_MspInit+0xa4>)
 800baf8:	2180      	movs	r1, #128	; 0x80
 800bafa:	0489      	lsls	r1, r1, #18
 800bafc:	430a      	orrs	r2, r1
 800bafe:	61da      	str	r2, [r3, #28]
 800bb00:	4b1c      	ldr	r3, [pc, #112]	; (800bb74 <HAL_CAN_MspInit+0xa4>)
 800bb02:	69da      	ldr	r2, [r3, #28]
 800bb04:	2380      	movs	r3, #128	; 0x80
 800bb06:	049b      	lsls	r3, r3, #18
 800bb08:	4013      	ands	r3, r2
 800bb0a:	613b      	str	r3, [r7, #16]
 800bb0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb0e:	4b19      	ldr	r3, [pc, #100]	; (800bb74 <HAL_CAN_MspInit+0xa4>)
 800bb10:	695a      	ldr	r2, [r3, #20]
 800bb12:	4b18      	ldr	r3, [pc, #96]	; (800bb74 <HAL_CAN_MspInit+0xa4>)
 800bb14:	2180      	movs	r1, #128	; 0x80
 800bb16:	02c9      	lsls	r1, r1, #11
 800bb18:	430a      	orrs	r2, r1
 800bb1a:	615a      	str	r2, [r3, #20]
 800bb1c:	4b15      	ldr	r3, [pc, #84]	; (800bb74 <HAL_CAN_MspInit+0xa4>)
 800bb1e:	695a      	ldr	r2, [r3, #20]
 800bb20:	2380      	movs	r3, #128	; 0x80
 800bb22:	02db      	lsls	r3, r3, #11
 800bb24:	4013      	ands	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800bb2a:	193b      	adds	r3, r7, r4
 800bb2c:	22c0      	movs	r2, #192	; 0xc0
 800bb2e:	0092      	lsls	r2, r2, #2
 800bb30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb32:	0021      	movs	r1, r4
 800bb34:	187b      	adds	r3, r7, r1
 800bb36:	2202      	movs	r2, #2
 800bb38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb3a:	187b      	adds	r3, r7, r1
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800bb40:	187b      	adds	r3, r7, r1
 800bb42:	2203      	movs	r2, #3
 800bb44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800bb46:	187b      	adds	r3, r7, r1
 800bb48:	2204      	movs	r2, #4
 800bb4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb4c:	187b      	adds	r3, r7, r1
 800bb4e:	4a0a      	ldr	r2, [pc, #40]	; (800bb78 <HAL_CAN_MspInit+0xa8>)
 800bb50:	0019      	movs	r1, r3
 800bb52:	0010      	movs	r0, r2
 800bb54:	f002 feee 	bl	800e934 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 800bb58:	2200      	movs	r2, #0
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	201e      	movs	r0, #30
 800bb5e:	f002 fd01 	bl	800e564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800bb62:	201e      	movs	r0, #30
 800bb64:	f002 fd13 	bl	800e58e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800bb68:	46c0      	nop			; (mov r8, r8)
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	b00b      	add	sp, #44	; 0x2c
 800bb6e:	bd90      	pop	{r4, r7, pc}
 800bb70:	40006400 	.word	0x40006400
 800bb74:	40021000 	.word	0x40021000
 800bb78:	48000400 	.word	0x48000400

0800bb7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800bb82:	4b0c      	ldr	r3, [pc, #48]	; (800bbb4 <MX_DMA_Init+0x38>)
 800bb84:	695a      	ldr	r2, [r3, #20]
 800bb86:	4b0b      	ldr	r3, [pc, #44]	; (800bbb4 <MX_DMA_Init+0x38>)
 800bb88:	2101      	movs	r1, #1
 800bb8a:	430a      	orrs	r2, r1
 800bb8c:	615a      	str	r2, [r3, #20]
 800bb8e:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <MX_DMA_Init+0x38>)
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	2201      	movs	r2, #1
 800bb94:	4013      	ands	r3, r2
 800bb96:	607b      	str	r3, [r7, #4]
 800bb98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	2009      	movs	r0, #9
 800bba0:	f002 fce0 	bl	800e564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 800bba4:	2009      	movs	r0, #9
 800bba6:	f002 fcf2 	bl	800e58e <HAL_NVIC_EnableIRQ>

}
 800bbaa:	46c0      	nop			; (mov r8, r8)
 800bbac:	46bd      	mov	sp, r7
 800bbae:	b002      	add	sp, #8
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	46c0      	nop			; (mov r8, r8)
 800bbb4:	40021000 	.word	0x40021000

0800bbb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800bbb8:	b590      	push	{r4, r7, lr}
 800bbba:	b089      	sub	sp, #36	; 0x24
 800bbbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbbe:	240c      	movs	r4, #12
 800bbc0:	193b      	adds	r3, r7, r4
 800bbc2:	0018      	movs	r0, r3
 800bbc4:	2314      	movs	r3, #20
 800bbc6:	001a      	movs	r2, r3
 800bbc8:	2100      	movs	r1, #0
 800bbca:	f004 fdf5 	bl	80107b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbce:	4b25      	ldr	r3, [pc, #148]	; (800bc64 <MX_GPIO_Init+0xac>)
 800bbd0:	695a      	ldr	r2, [r3, #20]
 800bbd2:	4b24      	ldr	r3, [pc, #144]	; (800bc64 <MX_GPIO_Init+0xac>)
 800bbd4:	2180      	movs	r1, #128	; 0x80
 800bbd6:	0289      	lsls	r1, r1, #10
 800bbd8:	430a      	orrs	r2, r1
 800bbda:	615a      	str	r2, [r3, #20]
 800bbdc:	4b21      	ldr	r3, [pc, #132]	; (800bc64 <MX_GPIO_Init+0xac>)
 800bbde:	695a      	ldr	r2, [r3, #20]
 800bbe0:	2380      	movs	r3, #128	; 0x80
 800bbe2:	029b      	lsls	r3, r3, #10
 800bbe4:	4013      	ands	r3, r2
 800bbe6:	60bb      	str	r3, [r7, #8]
 800bbe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bbea:	4b1e      	ldr	r3, [pc, #120]	; (800bc64 <MX_GPIO_Init+0xac>)
 800bbec:	695a      	ldr	r2, [r3, #20]
 800bbee:	4b1d      	ldr	r3, [pc, #116]	; (800bc64 <MX_GPIO_Init+0xac>)
 800bbf0:	2180      	movs	r1, #128	; 0x80
 800bbf2:	0309      	lsls	r1, r1, #12
 800bbf4:	430a      	orrs	r2, r1
 800bbf6:	615a      	str	r2, [r3, #20]
 800bbf8:	4b1a      	ldr	r3, [pc, #104]	; (800bc64 <MX_GPIO_Init+0xac>)
 800bbfa:	695a      	ldr	r2, [r3, #20]
 800bbfc:	2380      	movs	r3, #128	; 0x80
 800bbfe:	031b      	lsls	r3, r3, #12
 800bc00:	4013      	ands	r3, r2
 800bc02:	607b      	str	r3, [r7, #4]
 800bc04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bc06:	4b17      	ldr	r3, [pc, #92]	; (800bc64 <MX_GPIO_Init+0xac>)
 800bc08:	695a      	ldr	r2, [r3, #20]
 800bc0a:	4b16      	ldr	r3, [pc, #88]	; (800bc64 <MX_GPIO_Init+0xac>)
 800bc0c:	2180      	movs	r1, #128	; 0x80
 800bc0e:	02c9      	lsls	r1, r1, #11
 800bc10:	430a      	orrs	r2, r1
 800bc12:	615a      	str	r2, [r3, #20]
 800bc14:	4b13      	ldr	r3, [pc, #76]	; (800bc64 <MX_GPIO_Init+0xac>)
 800bc16:	695a      	ldr	r2, [r3, #20]
 800bc18:	2380      	movs	r3, #128	; 0x80
 800bc1a:	02db      	lsls	r3, r3, #11
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	603b      	str	r3, [r7, #0]
 800bc20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_HRBT_Pin|LED_WRNG_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 800bc22:	23e0      	movs	r3, #224	; 0xe0
 800bc24:	0119      	lsls	r1, r3, #4
 800bc26:	2390      	movs	r3, #144	; 0x90
 800bc28:	05db      	lsls	r3, r3, #23
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	0018      	movs	r0, r3
 800bc2e:	f002 fff9 	bl	800ec24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_HRBT_Pin|LED_WRNG_Pin|LED_ERR_Pin;
 800bc32:	193b      	adds	r3, r7, r4
 800bc34:	22e0      	movs	r2, #224	; 0xe0
 800bc36:	0112      	lsls	r2, r2, #4
 800bc38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc3a:	193b      	adds	r3, r7, r4
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc40:	193b      	adds	r3, r7, r4
 800bc42:	2200      	movs	r2, #0
 800bc44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc46:	193b      	adds	r3, r7, r4
 800bc48:	2200      	movs	r2, #0
 800bc4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc4c:	193a      	adds	r2, r7, r4
 800bc4e:	2390      	movs	r3, #144	; 0x90
 800bc50:	05db      	lsls	r3, r3, #23
 800bc52:	0011      	movs	r1, r2
 800bc54:	0018      	movs	r0, r3
 800bc56:	f002 fe6d 	bl	800e934 <HAL_GPIO_Init>

}
 800bc5a:	46c0      	nop			; (mov r8, r8)
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	b009      	add	sp, #36	; 0x24
 800bc60:	bd90      	pop	{r4, r7, pc}
 800bc62:	46c0      	nop			; (mov r8, r8)
 800bc64:	40021000 	.word	0x40021000

0800bc68 <can1_ccu_status_1_transmit_callback>:
	FRONT_PUMP = 4,
	REAR_PUMP = 5,
	INVERTER_PUMP = 6
} cID;

void can1_ccu_status_1_transmit_callback(can1_ccu_status_1_t *ccu_status_1) {
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
	ccu_status_1->fan1_temperature = tData.front_temp;
 800bc70:	4b0d      	ldr	r3, [pc, #52]	; (800bca8 <can1_ccu_status_1_transmit_callback+0x40>)
 800bc72:	685a      	ldr	r2, [r3, #4]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	605a      	str	r2, [r3, #4]
	ccu_status_1->fan2_temperature = tData.rear_temp;
 800bc78:	4b0b      	ldr	r3, [pc, #44]	; (800bca8 <can1_ccu_status_1_transmit_callback+0x40>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	609a      	str	r2, [r3, #8]
	ccu_status_1->fan3_temperature = tData.inverter_temp;
 800bc80:	4b09      	ldr	r3, [pc, #36]	; (800bca8 <can1_ccu_status_1_transmit_callback+0x40>)
 800bc82:	691a      	ldr	r2, [r3, #16]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	60da      	str	r2, [r3, #12]
	ccu_status_1->fron_pump_temperature = tData.front_temp;
 800bc88:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <can1_ccu_status_1_transmit_callback+0x40>)
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	611a      	str	r2, [r3, #16]
	ccu_status_1->rear_pump_temperature = tData.rear_temp;
 800bc90:	4b05      	ldr	r3, [pc, #20]	; (800bca8 <can1_ccu_status_1_transmit_callback+0x40>)
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	615a      	str	r2, [r3, #20]
	ccu_status_1->inverter_pump_temperature = tData.inverter_temp;
 800bc98:	4b03      	ldr	r3, [pc, #12]	; (800bca8 <can1_ccu_status_1_transmit_callback+0x40>)
 800bc9a:	691a      	ldr	r2, [r3, #16]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	619a      	str	r2, [r3, #24]
	return;
 800bca0:	46c0      	nop			; (mov r8, r8)
}
 800bca2:	46bd      	mov	sp, r7
 800bca4:	b002      	add	sp, #8
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	20000590 	.word	0x20000590

0800bcac <can1_ccu_status_2_transmit_callback>:

void can1_ccu_status_2_transmit_callback(can1_ccu_status_2_t *can1_ccu_status_2) {
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	return;
 800bcb4:	46c0      	nop			; (mov r8, r8)
}
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	b002      	add	sp, #8
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <set_duty_cycle>:

void set_duty_cycle(cID id, float duty_cycle) {
 800bcbc:	b590      	push	{r4, r7, lr}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	0002      	movs	r2, r0
 800bcc4:	6039      	str	r1, [r7, #0]
 800bcc6:	1dfb      	adds	r3, r7, #7
 800bcc8:	701a      	strb	r2, [r3, #0]
	if (duty_cycle < 0)
 800bcca:	2100      	movs	r1, #0
 800bccc:	6838      	ldr	r0, [r7, #0]
 800bcce:	f7fc faf5 	bl	80082bc <__aeabi_fcmplt>
 800bcd2:	1e03      	subs	r3, r0, #0
 800bcd4:	d001      	beq.n	800bcda <set_duty_cycle+0x1e>
		duty_cycle = 0;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	603b      	str	r3, [r7, #0]
	if (100 < duty_cycle)
 800bcda:	495f      	ldr	r1, [pc, #380]	; (800be58 <set_duty_cycle+0x19c>)
 800bcdc:	6838      	ldr	r0, [r7, #0]
 800bcde:	f7fc fb01 	bl	80082e4 <__aeabi_fcmpgt>
 800bce2:	1e03      	subs	r3, r0, #0
 800bce4:	d001      	beq.n	800bcea <set_duty_cycle+0x2e>
		duty_cycle = 100;
 800bce6:	4b5c      	ldr	r3, [pc, #368]	; (800be58 <set_duty_cycle+0x19c>)
 800bce8:	603b      	str	r3, [r7, #0]

	switch (id) {
 800bcea:	1dfb      	adds	r3, r7, #7
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	2b06      	cmp	r3, #6
 800bcf0:	d900      	bls.n	800bcf4 <set_duty_cycle+0x38>
 800bcf2:	e0ac      	b.n	800be4e <set_duty_cycle+0x192>
 800bcf4:	009a      	lsls	r2, r3, #2
 800bcf6:	4b59      	ldr	r3, [pc, #356]	; (800be5c <set_duty_cycle+0x1a0>)
 800bcf8:	18d3      	adds	r3, r2, r3
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	469f      	mov	pc, r3
	case FAN_1:
		htim3.Instance->CCR1 = htim3.Instance->ARR * duty_cycle / 100;
 800bcfe:	4b58      	ldr	r3, [pc, #352]	; (800be60 <set_duty_cycle+0x1a4>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd04:	0018      	movs	r0, r3
 800bd06:	f7fd f9df 	bl	80090c8 <__aeabi_ui2f>
 800bd0a:	1c03      	adds	r3, r0, #0
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	1c18      	adds	r0, r3, #0
 800bd10:	f7fc fe98 	bl	8008a44 <__aeabi_fmul>
 800bd14:	1c03      	adds	r3, r0, #0
 800bd16:	4950      	ldr	r1, [pc, #320]	; (800be58 <set_duty_cycle+0x19c>)
 800bd18:	1c18      	adds	r0, r3, #0
 800bd1a:	f7fc fccb 	bl	80086b4 <__aeabi_fdiv>
 800bd1e:	1c03      	adds	r3, r0, #0
 800bd20:	1c1a      	adds	r2, r3, #0
 800bd22:	4b4f      	ldr	r3, [pc, #316]	; (800be60 <set_duty_cycle+0x1a4>)
 800bd24:	681c      	ldr	r4, [r3, #0]
 800bd26:	1c10      	adds	r0, r2, #0
 800bd28:	f7fc faf0 	bl	800830c <__aeabi_f2uiz>
 800bd2c:	0003      	movs	r3, r0
 800bd2e:	6363      	str	r3, [r4, #52]	; 0x34
		htim3.Instance->CCR1 = 1;
 800bd30:	4b4b      	ldr	r3, [pc, #300]	; (800be60 <set_duty_cycle+0x1a4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2201      	movs	r2, #1
 800bd36:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800bd38:	e089      	b.n	800be4e <set_duty_cycle+0x192>
	case FAN_2:
		htim15.Instance->CCR2 = htim15.Instance->ARR * duty_cycle / 100;
 800bd3a:	4b4a      	ldr	r3, [pc, #296]	; (800be64 <set_duty_cycle+0x1a8>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd40:	0018      	movs	r0, r3
 800bd42:	f7fd f9c1 	bl	80090c8 <__aeabi_ui2f>
 800bd46:	1c03      	adds	r3, r0, #0
 800bd48:	6839      	ldr	r1, [r7, #0]
 800bd4a:	1c18      	adds	r0, r3, #0
 800bd4c:	f7fc fe7a 	bl	8008a44 <__aeabi_fmul>
 800bd50:	1c03      	adds	r3, r0, #0
 800bd52:	4941      	ldr	r1, [pc, #260]	; (800be58 <set_duty_cycle+0x19c>)
 800bd54:	1c18      	adds	r0, r3, #0
 800bd56:	f7fc fcad 	bl	80086b4 <__aeabi_fdiv>
 800bd5a:	1c03      	adds	r3, r0, #0
 800bd5c:	1c1a      	adds	r2, r3, #0
 800bd5e:	4b41      	ldr	r3, [pc, #260]	; (800be64 <set_duty_cycle+0x1a8>)
 800bd60:	681c      	ldr	r4, [r3, #0]
 800bd62:	1c10      	adds	r0, r2, #0
 800bd64:	f7fc fad2 	bl	800830c <__aeabi_f2uiz>
 800bd68:	0003      	movs	r3, r0
 800bd6a:	63a3      	str	r3, [r4, #56]	; 0x38
		htim15.Instance->CCR2 = 1;
 800bd6c:	4b3d      	ldr	r3, [pc, #244]	; (800be64 <set_duty_cycle+0x1a8>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2201      	movs	r2, #1
 800bd72:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 800bd74:	e06b      	b.n	800be4e <set_duty_cycle+0x192>
	case FAN_3:
		htim15.Instance->CCR1 = htim15.Instance->ARR * duty_cycle / 100;
 800bd76:	4b3b      	ldr	r3, [pc, #236]	; (800be64 <set_duty_cycle+0x1a8>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f7fd f9a3 	bl	80090c8 <__aeabi_ui2f>
 800bd82:	1c03      	adds	r3, r0, #0
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	1c18      	adds	r0, r3, #0
 800bd88:	f7fc fe5c 	bl	8008a44 <__aeabi_fmul>
 800bd8c:	1c03      	adds	r3, r0, #0
 800bd8e:	4932      	ldr	r1, [pc, #200]	; (800be58 <set_duty_cycle+0x19c>)
 800bd90:	1c18      	adds	r0, r3, #0
 800bd92:	f7fc fc8f 	bl	80086b4 <__aeabi_fdiv>
 800bd96:	1c03      	adds	r3, r0, #0
 800bd98:	1c1a      	adds	r2, r3, #0
 800bd9a:	4b32      	ldr	r3, [pc, #200]	; (800be64 <set_duty_cycle+0x1a8>)
 800bd9c:	681c      	ldr	r4, [r3, #0]
 800bd9e:	1c10      	adds	r0, r2, #0
 800bda0:	f7fc fab4 	bl	800830c <__aeabi_f2uiz>
 800bda4:	0003      	movs	r3, r0
 800bda6:	6363      	str	r3, [r4, #52]	; 0x34
		htim15.Instance->CCR1 = 1;
 800bda8:	4b2e      	ldr	r3, [pc, #184]	; (800be64 <set_duty_cycle+0x1a8>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2201      	movs	r2, #1
 800bdae:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800bdb0:	e04d      	b.n	800be4e <set_duty_cycle+0x192>
	case FRONT_PUMP:
		htim3.Instance->CCR2 = htim3.Instance->ARR * duty_cycle / 100;
 800bdb2:	4b2b      	ldr	r3, [pc, #172]	; (800be60 <set_duty_cycle+0x1a4>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdb8:	0018      	movs	r0, r3
 800bdba:	f7fd f985 	bl	80090c8 <__aeabi_ui2f>
 800bdbe:	1c03      	adds	r3, r0, #0
 800bdc0:	6839      	ldr	r1, [r7, #0]
 800bdc2:	1c18      	adds	r0, r3, #0
 800bdc4:	f7fc fe3e 	bl	8008a44 <__aeabi_fmul>
 800bdc8:	1c03      	adds	r3, r0, #0
 800bdca:	4923      	ldr	r1, [pc, #140]	; (800be58 <set_duty_cycle+0x19c>)
 800bdcc:	1c18      	adds	r0, r3, #0
 800bdce:	f7fc fc71 	bl	80086b4 <__aeabi_fdiv>
 800bdd2:	1c03      	adds	r3, r0, #0
 800bdd4:	1c1a      	adds	r2, r3, #0
 800bdd6:	4b22      	ldr	r3, [pc, #136]	; (800be60 <set_duty_cycle+0x1a4>)
 800bdd8:	681c      	ldr	r4, [r3, #0]
 800bdda:	1c10      	adds	r0, r2, #0
 800bddc:	f7fc fa96 	bl	800830c <__aeabi_f2uiz>
 800bde0:	0003      	movs	r3, r0
 800bde2:	63a3      	str	r3, [r4, #56]	; 0x38
		break;
 800bde4:	e033      	b.n	800be4e <set_duty_cycle+0x192>
	case REAR_PUMP:
		htim3.Instance->CCR3 = htim3.Instance->ARR * duty_cycle / 100;
 800bde6:	4b1e      	ldr	r3, [pc, #120]	; (800be60 <set_duty_cycle+0x1a4>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdec:	0018      	movs	r0, r3
 800bdee:	f7fd f96b 	bl	80090c8 <__aeabi_ui2f>
 800bdf2:	1c03      	adds	r3, r0, #0
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	1c18      	adds	r0, r3, #0
 800bdf8:	f7fc fe24 	bl	8008a44 <__aeabi_fmul>
 800bdfc:	1c03      	adds	r3, r0, #0
 800bdfe:	4916      	ldr	r1, [pc, #88]	; (800be58 <set_duty_cycle+0x19c>)
 800be00:	1c18      	adds	r0, r3, #0
 800be02:	f7fc fc57 	bl	80086b4 <__aeabi_fdiv>
 800be06:	1c03      	adds	r3, r0, #0
 800be08:	1c1a      	adds	r2, r3, #0
 800be0a:	4b15      	ldr	r3, [pc, #84]	; (800be60 <set_duty_cycle+0x1a4>)
 800be0c:	681c      	ldr	r4, [r3, #0]
 800be0e:	1c10      	adds	r0, r2, #0
 800be10:	f7fc fa7c 	bl	800830c <__aeabi_f2uiz>
 800be14:	0003      	movs	r3, r0
 800be16:	63e3      	str	r3, [r4, #60]	; 0x3c
		break;
 800be18:	e019      	b.n	800be4e <set_duty_cycle+0x192>
	case INVERTER_PUMP:
		htim3.Instance->CCR4 = htim3.Instance->ARR * duty_cycle / 100;
 800be1a:	4b11      	ldr	r3, [pc, #68]	; (800be60 <set_duty_cycle+0x1a4>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be20:	0018      	movs	r0, r3
 800be22:	f7fd f951 	bl	80090c8 <__aeabi_ui2f>
 800be26:	1c03      	adds	r3, r0, #0
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	1c18      	adds	r0, r3, #0
 800be2c:	f7fc fe0a 	bl	8008a44 <__aeabi_fmul>
 800be30:	1c03      	adds	r3, r0, #0
 800be32:	4909      	ldr	r1, [pc, #36]	; (800be58 <set_duty_cycle+0x19c>)
 800be34:	1c18      	adds	r0, r3, #0
 800be36:	f7fc fc3d 	bl	80086b4 <__aeabi_fdiv>
 800be3a:	1c03      	adds	r3, r0, #0
 800be3c:	1c1a      	adds	r2, r3, #0
 800be3e:	4b08      	ldr	r3, [pc, #32]	; (800be60 <set_duty_cycle+0x1a4>)
 800be40:	681c      	ldr	r4, [r3, #0]
 800be42:	1c10      	adds	r0, r2, #0
 800be44:	f7fc fa62 	bl	800830c <__aeabi_f2uiz>
 800be48:	0003      	movs	r3, r0
 800be4a:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800be4c:	46c0      	nop			; (mov r8, r8)

	}
	//htim3.Instance->CCR1 = htim3.Instance->ARR * duty_cycle / 100;
	//htim15.Instance->CCR2 = htim15.Instance->ARR * duty_cycle / 100;
	//htim15.Instance->CCR1 = htim15.Instance->ARR * duty_cycle / 100;
}
 800be4e:	46c0      	nop			; (mov r8, r8)
 800be50:	46bd      	mov	sp, r7
 800be52:	b003      	add	sp, #12
 800be54:	bd90      	pop	{r4, r7, pc}
 800be56:	46c0      	nop			; (mov r8, r8)
 800be58:	42c80000 	.word	0x42c80000
 800be5c:	08010ed8 	.word	0x08010ed8
 800be60:	20000698 	.word	0x20000698
 800be64:	20000728 	.word	0x20000728

0800be68 <can1_mcu_set_ccu_cooling_points_receive_callback>:

void can1_mcu_set_ccu_cooling_points_receive_callback(
		can1_mcu_set_ccu_cooling_points_t *mcu_set_ccu_cooling_points) {
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
	set_duty_cycle(FAN_1, mcu_set_ccu_cooling_points->fan1_speed);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	1c19      	adds	r1, r3, #0
 800be76:	2001      	movs	r0, #1
 800be78:	f7ff ff20 	bl	800bcbc <set_duty_cycle>
	set_duty_cycle(FAN_2, mcu_set_ccu_cooling_points->fan2_speed);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	1c19      	adds	r1, r3, #0
 800be82:	2002      	movs	r0, #2
 800be84:	f7ff ff1a 	bl	800bcbc <set_duty_cycle>
	set_duty_cycle(FAN_3, mcu_set_ccu_cooling_points->fan3_speed);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	1c19      	adds	r1, r3, #0
 800be8e:	2003      	movs	r0, #3
 800be90:	f7ff ff14 	bl	800bcbc <set_duty_cycle>
	set_duty_cycle(FRONT_PUMP, mcu_set_ccu_cooling_points->fron_pump_speed);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	1c19      	adds	r1, r3, #0
 800be9a:	2004      	movs	r0, #4
 800be9c:	f7ff ff0e 	bl	800bcbc <set_duty_cycle>
	set_duty_cycle(REAR_PUMP, mcu_set_ccu_cooling_points->rear_pump_speed);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	1c19      	adds	r1, r3, #0
 800bea6:	2005      	movs	r0, #5
 800bea8:	f7ff ff08 	bl	800bcbc <set_duty_cycle>
	set_duty_cycle(INVERTER_PUMP, mcu_set_ccu_cooling_points->inverter_pump_speed);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	1c19      	adds	r1, r3, #0
 800beb2:	2006      	movs	r0, #6
 800beb4:	f7ff ff02 	bl	800bcbc <set_duty_cycle>
	return;
 800beb8:	46c0      	nop			; (mov r8, r8)
}
 800beba:	46bd      	mov	sp, r7
 800bebc:	b002      	add	sp, #8
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <temperature_from_thermistor>:

float temperature_from_thermistor(uint16_t bits) {
 800bec0:	b5b0      	push	{r4, r5, r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	0002      	movs	r2, r0
 800bec8:	1dbb      	adds	r3, r7, #6
 800beca:	801a      	strh	r2, [r3, #0]
#define THERMISTOR_BETA_VALUE 			3500.0
#define ADC_MAX_VALUE 					4095.0

	return (1
			/ ((log(
					((THERMISTOR_SERIES_RESISTANCE * (ADC_MAX_VALUE - bits))
 800becc:	1dbb      	adds	r3, r7, #6
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	0018      	movs	r0, r3
 800bed2:	f7fe fecb 	bl	800ac6c <__aeabi_i2d>
 800bed6:	0002      	movs	r2, r0
 800bed8:	000b      	movs	r3, r1
 800beda:	2000      	movs	r0, #0
 800bedc:	4926      	ldr	r1, [pc, #152]	; (800bf78 <temperature_from_thermistor+0xb8>)
 800bede:	f7fe fadf 	bl	800a4a0 <__aeabi_dsub>
 800bee2:	0002      	movs	r2, r0
 800bee4:	000b      	movs	r3, r1
 800bee6:	0010      	movs	r0, r2
 800bee8:	0019      	movs	r1, r3
 800beea:	2200      	movs	r2, #0
 800beec:	4b23      	ldr	r3, [pc, #140]	; (800bf7c <temperature_from_thermistor+0xbc>)
 800beee:	f7fe f86b 	bl	8009fc8 <__aeabi_dmul>
 800bef2:	0002      	movs	r2, r0
 800bef4:	000b      	movs	r3, r1
 800bef6:	0014      	movs	r4, r2
 800bef8:	001d      	movs	r5, r3
							/ bits) / THERMISTOR_NOMINAL_RESISTANCE)
 800befa:	1dbb      	adds	r3, r7, #6
 800befc:	881b      	ldrh	r3, [r3, #0]
 800befe:	0018      	movs	r0, r3
 800bf00:	f7fe feb4 	bl	800ac6c <__aeabi_i2d>
 800bf04:	0002      	movs	r2, r0
 800bf06:	000b      	movs	r3, r1
 800bf08:	0020      	movs	r0, r4
 800bf0a:	0029      	movs	r1, r5
 800bf0c:	f7fd fc5a 	bl	80097c4 <__aeabi_ddiv>
 800bf10:	0002      	movs	r2, r0
 800bf12:	000b      	movs	r3, r1
 800bf14:	0010      	movs	r0, r2
 800bf16:	0019      	movs	r1, r3
			/ ((log(
 800bf18:	2200      	movs	r2, #0
 800bf1a:	4b18      	ldr	r3, [pc, #96]	; (800bf7c <temperature_from_thermistor+0xbc>)
 800bf1c:	f7fd fc52 	bl	80097c4 <__aeabi_ddiv>
 800bf20:	0002      	movs	r2, r0
 800bf22:	000b      	movs	r3, r1
 800bf24:	0010      	movs	r0, r2
 800bf26:	0019      	movs	r1, r3
 800bf28:	f004 fc4e 	bl	80107c8 <log>
					/ THERMISTOR_BETA_VALUE)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	4b14      	ldr	r3, [pc, #80]	; (800bf80 <temperature_from_thermistor+0xc0>)
 800bf30:	f7fd fc48 	bl	80097c4 <__aeabi_ddiv>
 800bf34:	0002      	movs	r2, r0
 800bf36:	000b      	movs	r3, r1
 800bf38:	0010      	movs	r0, r2
 800bf3a:	0019      	movs	r1, r3
					+ (1 / (273.15 + THERMISTOR_NOMINAL_TEMPERATURE)))) - 273.15;
 800bf3c:	4a11      	ldr	r2, [pc, #68]	; (800bf84 <temperature_from_thermistor+0xc4>)
 800bf3e:	4b12      	ldr	r3, [pc, #72]	; (800bf88 <temperature_from_thermistor+0xc8>)
 800bf40:	f7fd f904 	bl	800914c <__aeabi_dadd>
 800bf44:	0002      	movs	r2, r0
 800bf46:	000b      	movs	r3, r1
			/ ((log(
 800bf48:	2000      	movs	r0, #0
 800bf4a:	4910      	ldr	r1, [pc, #64]	; (800bf8c <temperature_from_thermistor+0xcc>)
 800bf4c:	f7fd fc3a 	bl	80097c4 <__aeabi_ddiv>
 800bf50:	0002      	movs	r2, r0
 800bf52:	000b      	movs	r3, r1
 800bf54:	0010      	movs	r0, r2
 800bf56:	0019      	movs	r1, r3
					+ (1 / (273.15 + THERMISTOR_NOMINAL_TEMPERATURE)))) - 273.15;
 800bf58:	4a0d      	ldr	r2, [pc, #52]	; (800bf90 <temperature_from_thermistor+0xd0>)
 800bf5a:	4b0e      	ldr	r3, [pc, #56]	; (800bf94 <temperature_from_thermistor+0xd4>)
 800bf5c:	f7fe faa0 	bl	800a4a0 <__aeabi_dsub>
 800bf60:	0002      	movs	r2, r0
 800bf62:	000b      	movs	r3, r1
 800bf64:	0010      	movs	r0, r2
 800bf66:	0019      	movs	r1, r3
 800bf68:	f7fe fed6 	bl	800ad18 <__aeabi_d2f>
 800bf6c:	1c03      	adds	r3, r0, #0
}
 800bf6e:	1c18      	adds	r0, r3, #0
 800bf70:	46bd      	mov	sp, r7
 800bf72:	b002      	add	sp, #8
 800bf74:	bdb0      	pop	{r4, r5, r7, pc}
 800bf76:	46c0      	nop			; (mov r8, r8)
 800bf78:	40affe00 	.word	0x40affe00
 800bf7c:	40c38800 	.word	0x40c38800
 800bf80:	40ab5800 	.word	0x40ab5800
 800bf84:	dcb5db83 	.word	0xdcb5db83
 800bf88:	3f6b79e1 	.word	0x3f6b79e1
 800bf8c:	3ff00000 	.word	0x3ff00000
 800bf90:	66666666 	.word	0x66666666
 800bf94:	40711266 	.word	0x40711266

0800bf98 <HAL_ADC_ConvCpltCallback>:

int flag = 1;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
	flag = 1;
 800bfa0:	4b03      	ldr	r3, [pc, #12]	; (800bfb0 <HAL_ADC_ConvCpltCallback+0x18>)
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	601a      	str	r2, [r3, #0]
}
 800bfa6:	46c0      	nop			; (mov r8, r8)
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	b002      	add	sp, #8
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	46c0      	nop			; (mov r8, r8)
 800bfb0:	20000404 	.word	0x20000404

0800bfb4 <set_sample_frequency>:

void set_sample_frequency(double frequency) {
 800bfb4:	b590      	push	{r4, r7, lr}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6038      	str	r0, [r7, #0]
 800bfbc:	6079      	str	r1, [r7, #4]
	frequency *= ADC_ROWS;
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	4b19      	ldr	r3, [pc, #100]	; (800c028 <set_sample_frequency+0x74>)
 800bfc2:	6838      	ldr	r0, [r7, #0]
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	f7fd ffff 	bl	8009fc8 <__aeabi_dmul>
 800bfca:	0002      	movs	r2, r0
 800bfcc:	000b      	movs	r3, r1
 800bfce:	603a      	str	r2, [r7, #0]
 800bfd0:	607b      	str	r3, [r7, #4]
	double k = sqrt(SystemCoreClock / frequency);
 800bfd2:	4b16      	ldr	r3, [pc, #88]	; (800c02c <set_sample_frequency+0x78>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	f7fe fe78 	bl	800accc <__aeabi_ui2d>
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f7fd fbf0 	bl	80097c4 <__aeabi_ddiv>
 800bfe4:	0002      	movs	r2, r0
 800bfe6:	000b      	movs	r3, r1
 800bfe8:	0010      	movs	r0, r2
 800bfea:	0019      	movs	r1, r3
 800bfec:	f004 fc22 	bl	8010834 <sqrt>
 800bff0:	0002      	movs	r2, r0
 800bff2:	000b      	movs	r3, r1
 800bff4:	60ba      	str	r2, [r7, #8]
 800bff6:	60fb      	str	r3, [r7, #12]
	htim2.Instance->ARR = k;
 800bff8:	4b0d      	ldr	r3, [pc, #52]	; (800c030 <set_sample_frequency+0x7c>)
 800bffa:	681c      	ldr	r4, [r3, #0]
 800bffc:	68b8      	ldr	r0, [r7, #8]
 800bffe:	68f9      	ldr	r1, [r7, #12]
 800c000:	f7fc f99c 	bl	800833c <__aeabi_d2uiz>
 800c004:	0003      	movs	r3, r0
 800c006:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim2.Instance->PSC = k;
 800c008:	4b09      	ldr	r3, [pc, #36]	; (800c030 <set_sample_frequency+0x7c>)
 800c00a:	681c      	ldr	r4, [r3, #0]
 800c00c:	68b8      	ldr	r0, [r7, #8]
 800c00e:	68f9      	ldr	r1, [r7, #12]
 800c010:	f7fc f994 	bl	800833c <__aeabi_d2uiz>
 800c014:	0003      	movs	r3, r0
 800c016:	62a3      	str	r3, [r4, #40]	; 0x28
	htim2.Instance->CNT = 0;
 800c018:	4b05      	ldr	r3, [pc, #20]	; (800c030 <set_sample_frequency+0x7c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2200      	movs	r2, #0
 800c01e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c020:	46c0      	nop			; (mov r8, r8)
 800c022:	46bd      	mov	sp, r7
 800c024:	b005      	add	sp, #20
 800c026:	bd90      	pop	{r4, r7, pc}
 800c028:	40140000 	.word	0x40140000
 800c02c:	20000408 	.word	0x20000408
 800c030:	20000650 	.word	0x20000650

0800c034 <set_cooling_frequency>:

void set_cooling_frequency(double frequency) {
 800c034:	b590      	push	{r4, r7, lr}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6038      	str	r0, [r7, #0]
 800c03c:	6079      	str	r1, [r7, #4]
	double k = sqrt(SystemCoreClock / frequency);
 800c03e:	4b1f      	ldr	r3, [pc, #124]	; (800c0bc <set_cooling_frequency+0x88>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	0018      	movs	r0, r3
 800c044:	f7fe fe42 	bl	800accc <__aeabi_ui2d>
 800c048:	683a      	ldr	r2, [r7, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f7fd fbba 	bl	80097c4 <__aeabi_ddiv>
 800c050:	0002      	movs	r2, r0
 800c052:	000b      	movs	r3, r1
 800c054:	0010      	movs	r0, r2
 800c056:	0019      	movs	r1, r3
 800c058:	f004 fbec 	bl	8010834 <sqrt>
 800c05c:	0002      	movs	r2, r0
 800c05e:	000b      	movs	r3, r1
 800c060:	60ba      	str	r2, [r7, #8]
 800c062:	60fb      	str	r3, [r7, #12]
	htim3.Instance->ARR = k;
 800c064:	4b16      	ldr	r3, [pc, #88]	; (800c0c0 <set_cooling_frequency+0x8c>)
 800c066:	681c      	ldr	r4, [r3, #0]
 800c068:	68b8      	ldr	r0, [r7, #8]
 800c06a:	68f9      	ldr	r1, [r7, #12]
 800c06c:	f7fc f966 	bl	800833c <__aeabi_d2uiz>
 800c070:	0003      	movs	r3, r0
 800c072:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim3.Instance->PSC = k;
 800c074:	4b12      	ldr	r3, [pc, #72]	; (800c0c0 <set_cooling_frequency+0x8c>)
 800c076:	681c      	ldr	r4, [r3, #0]
 800c078:	68b8      	ldr	r0, [r7, #8]
 800c07a:	68f9      	ldr	r1, [r7, #12]
 800c07c:	f7fc f95e 	bl	800833c <__aeabi_d2uiz>
 800c080:	0003      	movs	r3, r0
 800c082:	62a3      	str	r3, [r4, #40]	; 0x28
	htim3.Instance->CNT = 0;
 800c084:	4b0e      	ldr	r3, [pc, #56]	; (800c0c0 <set_cooling_frequency+0x8c>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2200      	movs	r2, #0
 800c08a:	625a      	str	r2, [r3, #36]	; 0x24
	htim15.Instance->ARR = k;
 800c08c:	4b0d      	ldr	r3, [pc, #52]	; (800c0c4 <set_cooling_frequency+0x90>)
 800c08e:	681c      	ldr	r4, [r3, #0]
 800c090:	68b8      	ldr	r0, [r7, #8]
 800c092:	68f9      	ldr	r1, [r7, #12]
 800c094:	f7fc f952 	bl	800833c <__aeabi_d2uiz>
 800c098:	0003      	movs	r3, r0
 800c09a:	62e3      	str	r3, [r4, #44]	; 0x2c
	htim15.Instance->PSC = k;
 800c09c:	4b09      	ldr	r3, [pc, #36]	; (800c0c4 <set_cooling_frequency+0x90>)
 800c09e:	681c      	ldr	r4, [r3, #0]
 800c0a0:	68b8      	ldr	r0, [r7, #8]
 800c0a2:	68f9      	ldr	r1, [r7, #12]
 800c0a4:	f7fc f94a 	bl	800833c <__aeabi_d2uiz>
 800c0a8:	0003      	movs	r3, r0
 800c0aa:	62a3      	str	r3, [r4, #40]	; 0x28
	htim15.Instance->CNT = 0;
 800c0ac:	4b05      	ldr	r3, [pc, #20]	; (800c0c4 <set_cooling_frequency+0x90>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c0b4:	46c0      	nop			; (mov r8, r8)
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	b005      	add	sp, #20
 800c0ba:	bd90      	pop	{r4, r7, pc}
 800c0bc:	20000408 	.word	0x20000408
 800c0c0:	20000698 	.word	0x20000698
 800c0c4:	20000728 	.word	0x20000728

0800c0c8 <initialize_timers>:

void initialize_timers() {
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0

	/* Initialize ADC sampler */

	set_sample_frequency(2000);
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	4b26      	ldr	r3, [pc, #152]	; (800c168 <initialize_timers+0xa0>)
 800c0d0:	0010      	movs	r0, r2
 800c0d2:	0019      	movs	r1, r3
 800c0d4:	f7ff ff6e 	bl	800bfb4 <set_sample_frequency>

	if (HAL_TIM_Base_Start(&htim2) != HAL_OK) {
 800c0d8:	4b24      	ldr	r3, [pc, #144]	; (800c16c <initialize_timers+0xa4>)
 800c0da:	0018      	movs	r0, r3
 800c0dc:	f003 fb0a 	bl	800f6f4 <HAL_TIM_Base_Start>
 800c0e0:	1e03      	subs	r3, r0, #0
 800c0e2:	d001      	beq.n	800c0e8 <initialize_timers+0x20>
		Error_Handler();
 800c0e4:	f000 f940 	bl	800c368 <Error_Handler>
	}

	/* Initialize PWM peripherals */

	set_cooling_frequency(20000);
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	4b21      	ldr	r3, [pc, #132]	; (800c170 <initialize_timers+0xa8>)
 800c0ec:	0010      	movs	r0, r2
 800c0ee:	0019      	movs	r1, r3
 800c0f0:	f7ff ffa0 	bl	800c034 <set_cooling_frequency>

	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK) {
 800c0f4:	4b1f      	ldr	r3, [pc, #124]	; (800c174 <initialize_timers+0xac>)
 800c0f6:	2100      	movs	r1, #0
 800c0f8:	0018      	movs	r0, r3
 800c0fa:	f003 fb9d 	bl	800f838 <HAL_TIM_PWM_Start>
 800c0fe:	1e03      	subs	r3, r0, #0
 800c100:	d001      	beq.n	800c106 <initialize_timers+0x3e>
		Error_Handler();
 800c102:	f000 f931 	bl	800c368 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2) != HAL_OK) {
 800c106:	4b1b      	ldr	r3, [pc, #108]	; (800c174 <initialize_timers+0xac>)
 800c108:	2104      	movs	r1, #4
 800c10a:	0018      	movs	r0, r3
 800c10c:	f003 fb94 	bl	800f838 <HAL_TIM_PWM_Start>
 800c110:	1e03      	subs	r3, r0, #0
 800c112:	d001      	beq.n	800c118 <initialize_timers+0x50>
		Error_Handler();
 800c114:	f000 f928 	bl	800c368 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3) != HAL_OK) {
 800c118:	4b16      	ldr	r3, [pc, #88]	; (800c174 <initialize_timers+0xac>)
 800c11a:	2108      	movs	r1, #8
 800c11c:	0018      	movs	r0, r3
 800c11e:	f003 fb8b 	bl	800f838 <HAL_TIM_PWM_Start>
 800c122:	1e03      	subs	r3, r0, #0
 800c124:	d001      	beq.n	800c12a <initialize_timers+0x62>
		Error_Handler();
 800c126:	f000 f91f 	bl	800c368 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4) != HAL_OK) {
 800c12a:	4b12      	ldr	r3, [pc, #72]	; (800c174 <initialize_timers+0xac>)
 800c12c:	210c      	movs	r1, #12
 800c12e:	0018      	movs	r0, r3
 800c130:	f003 fb82 	bl	800f838 <HAL_TIM_PWM_Start>
 800c134:	1e03      	subs	r3, r0, #0
 800c136:	d001      	beq.n	800c13c <initialize_timers+0x74>
		Error_Handler();
 800c138:	f000 f916 	bl	800c368 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1) != HAL_OK) {
 800c13c:	4b0e      	ldr	r3, [pc, #56]	; (800c178 <initialize_timers+0xb0>)
 800c13e:	2100      	movs	r1, #0
 800c140:	0018      	movs	r0, r3
 800c142:	f003 fb79 	bl	800f838 <HAL_TIM_PWM_Start>
 800c146:	1e03      	subs	r3, r0, #0
 800c148:	d001      	beq.n	800c14e <initialize_timers+0x86>
		Error_Handler();
 800c14a:	f000 f90d 	bl	800c368 <Error_Handler>
	}

	if (HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2) != HAL_OK) {
 800c14e:	4b0a      	ldr	r3, [pc, #40]	; (800c178 <initialize_timers+0xb0>)
 800c150:	2104      	movs	r1, #4
 800c152:	0018      	movs	r0, r3
 800c154:	f003 fb70 	bl	800f838 <HAL_TIM_PWM_Start>
 800c158:	1e03      	subs	r3, r0, #0
 800c15a:	d001      	beq.n	800c160 <initialize_timers+0x98>
		Error_Handler();
 800c15c:	f000 f904 	bl	800c368 <Error_Handler>
	}
}
 800c160:	46c0      	nop			; (mov r8, r8)
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	46c0      	nop			; (mov r8, r8)
 800c168:	409f4000 	.word	0x409f4000
 800c16c:	20000650 	.word	0x20000650
 800c170:	40d38800 	.word	0x40d38800
 800c174:	20000698 	.word	0x20000698
 800c178:	20000728 	.word	0x20000728

0800c17c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800c17c:	b5b0      	push	{r4, r5, r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800c182:	f000 fd2f 	bl	800cbe4 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800c186:	f000 f8a9 	bl	800c2dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800c18a:	f7ff fd15 	bl	800bbb8 <MX_GPIO_Init>
	MX_ADC_Init();
 800c18e:	f7ff fb2f 	bl	800b7f0 <MX_ADC_Init>
	MX_CAN_Init();
 800c192:	f7ff fc67 	bl	800ba64 <MX_CAN_Init>
	MX_TIM2_Init();
 800c196:	f000 fa01 	bl	800c59c <MX_TIM2_Init>
	MX_TIM3_Init();
 800c19a:	f000 fa53 	bl	800c644 <MX_TIM3_Init>
	MX_TIM15_Init();
 800c19e:	f000 fb29 	bl	800c7f4 <MX_TIM15_Init>
	MX_DMA_Init();
 800c1a2:	f7ff fceb 	bl	800bb7c <MX_DMA_Init>
	MX_TIM1_Init();
 800c1a6:	f000 f9a1 	bl	800c4ec <MX_TIM1_Init>
	MX_TIM7_Init();
 800c1aa:	f000 fae7 	bl	800c77c <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	if (!init_peripheral_can_hal_can1(&hcan)) {
 800c1ae:	4b45      	ldr	r3, [pc, #276]	; (800c2c4 <main+0x148>)
 800c1b0:	0018      	movs	r0, r3
 800c1b2:	f7ff faa7 	bl	800b704 <init_peripheral_can_hal_can1>
 800c1b6:	1e03      	subs	r3, r0, #0
 800c1b8:	d101      	bne.n	800c1be <main+0x42>
		Error_Handler();
 800c1ba:	f000 f8d5 	bl	800c368 <Error_Handler>
	}

	initialize_timers();
 800c1be:	f7ff ff83 	bl	800c0c8 <initialize_timers>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int i, j;
	while (1) {
		if (flag) {
 800c1c2:	4b41      	ldr	r3, [pc, #260]	; (800c2c8 <main+0x14c>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d05c      	beq.n	800c284 <main+0x108>
			flag = 0;
 800c1ca:	4b3f      	ldr	r3, [pc, #252]	; (800c2c8 <main+0x14c>)
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	601a      	str	r2, [r3, #0]

			if (HAL_ADC_Start_DMA(&hadc, (uint32_t*) data_buffer,
 800c1d0:	493e      	ldr	r1, [pc, #248]	; (800c2cc <main+0x150>)
 800c1d2:	4b3f      	ldr	r3, [pc, #252]	; (800c2d0 <main+0x154>)
 800c1d4:	2232      	movs	r2, #50	; 0x32
 800c1d6:	0018      	movs	r0, r3
 800c1d8:	f000 fecc 	bl	800cf74 <HAL_ADC_Start_DMA>
 800c1dc:	1e03      	subs	r3, r0, #0
 800c1de:	d001      	beq.n	800c1e4 <main+0x68>
					sizeof(data_buffer) / 2) != HAL_OK) { // Start ADC in DMA mode and declare the buffer where store the results
				Error_Handler();
 800c1e0:	f000 f8c2 	bl	800c368 <Error_Handler>
			}

			for (i = 0; i < ADC_ROWS; i++) {
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	607b      	str	r3, [r7, #4]
 800c1e8:	e049      	b.n	800c27e <main+0x102>
				ptData[i] = 0;
 800c1ea:	4b3a      	ldr	r3, [pc, #232]	; (800c2d4 <main+0x158>)
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	18d3      	adds	r3, r2, r3
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	601a      	str	r2, [r3, #0]
				for (j = 0; j < ADC_COLS; j++) {
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	603b      	str	r3, [r7, #0]
 800c1fc:	e01f      	b.n	800c23e <main+0xc2>
					ptData[i] += data_buffer[ADC_ROWS * j + i];
 800c1fe:	4b35      	ldr	r3, [pc, #212]	; (800c2d4 <main+0x158>)
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	18d3      	adds	r3, r2, r3
 800c208:	681d      	ldr	r5, [r3, #0]
 800c20a:	683a      	ldr	r2, [r7, #0]
 800c20c:	0013      	movs	r3, r2
 800c20e:	009b      	lsls	r3, r3, #2
 800c210:	189a      	adds	r2, r3, r2
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	18d2      	adds	r2, r2, r3
 800c216:	4b2d      	ldr	r3, [pc, #180]	; (800c2cc <main+0x150>)
 800c218:	0052      	lsls	r2, r2, #1
 800c21a:	5ad3      	ldrh	r3, [r2, r3]
 800c21c:	0018      	movs	r0, r3
 800c21e:	f7fc ff05 	bl	800902c <__aeabi_i2f>
 800c222:	1c01      	adds	r1, r0, #0
 800c224:	4b2b      	ldr	r3, [pc, #172]	; (800c2d4 <main+0x158>)
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	18d4      	adds	r4, r2, r3
 800c22e:	1c28      	adds	r0, r5, #0
 800c230:	f7fc f8a2 	bl	8008378 <__aeabi_fadd>
 800c234:	1c03      	adds	r3, r0, #0
 800c236:	6023      	str	r3, [r4, #0]
				for (j = 0; j < ADC_COLS; j++) {
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	3301      	adds	r3, #1
 800c23c:	603b      	str	r3, [r7, #0]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b09      	cmp	r3, #9
 800c242:	dddc      	ble.n	800c1fe <main+0x82>
				}
				ptData[i] = temperature_from_thermistor(ptData[i] / ADC_COLS);
 800c244:	4b23      	ldr	r3, [pc, #140]	; (800c2d4 <main+0x158>)
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	18d3      	adds	r3, r2, r3
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4921      	ldr	r1, [pc, #132]	; (800c2d8 <main+0x15c>)
 800c252:	1c18      	adds	r0, r3, #0
 800c254:	f7fc fa2e 	bl	80086b4 <__aeabi_fdiv>
 800c258:	1c03      	adds	r3, r0, #0
 800c25a:	1c18      	adds	r0, r3, #0
 800c25c:	f7fc f856 	bl	800830c <__aeabi_f2uiz>
 800c260:	0003      	movs	r3, r0
 800c262:	b299      	uxth	r1, r3
 800c264:	4b1b      	ldr	r3, [pc, #108]	; (800c2d4 <main+0x158>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	18d4      	adds	r4, r2, r3
 800c26e:	0008      	movs	r0, r1
 800c270:	f7ff fe26 	bl	800bec0 <temperature_from_thermistor>
 800c274:	1c03      	adds	r3, r0, #0
 800c276:	6023      	str	r3, [r4, #0]
			for (i = 0; i < ADC_ROWS; i++) {
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	3301      	adds	r3, #1
 800c27c:	607b      	str	r3, [r7, #4]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2b04      	cmp	r3, #4
 800c282:	ddb2      	ble.n	800c1ea <main+0x6e>
			}
		}

		HAL_Delay(100);
 800c284:	2064      	movs	r0, #100	; 0x64
 800c286:	f000 fd11 	bl	800ccac <HAL_Delay>
		HAL_GPIO_TogglePin(LED_HRBT_GPIO_Port, LED_HRBT_Pin);
 800c28a:	2380      	movs	r3, #128	; 0x80
 800c28c:	009a      	lsls	r2, r3, #2
 800c28e:	2390      	movs	r3, #144	; 0x90
 800c290:	05db      	lsls	r3, r3, #23
 800c292:	0011      	movs	r1, r2
 800c294:	0018      	movs	r0, r3
 800c296:	f002 fce2 	bl	800ec5e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_ERR_GPIO_Port, LED_ERR_Pin);
 800c29a:	2380      	movs	r3, #128	; 0x80
 800c29c:	011a      	lsls	r2, r3, #4
 800c29e:	2390      	movs	r3, #144	; 0x90
 800c2a0:	05db      	lsls	r3, r3, #23
 800c2a2:	0011      	movs	r1, r2
 800c2a4:	0018      	movs	r0, r3
 800c2a6:	f002 fcda 	bl	800ec5e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_WRNG_GPIO_Port, LED_WRNG_Pin);
 800c2aa:	2380      	movs	r3, #128	; 0x80
 800c2ac:	00da      	lsls	r2, r3, #3
 800c2ae:	2390      	movs	r3, #144	; 0x90
 800c2b0:	05db      	lsls	r3, r3, #23
 800c2b2:	0011      	movs	r1, r2
 800c2b4:	0018      	movs	r0, r3
 800c2b6:	f002 fcd2 	bl	800ec5e <HAL_GPIO_TogglePin>
		can1_ccu_status_1_transmit();
 800c2ba:	f7ff f965 	bl	800b588 <can1_ccu_status_1_transmit>
		can1_ccu_status_2_transmit();
 800c2be:	f7ff f9e1 	bl	800b684 <can1_ccu_status_2_transmit>
		if (flag) {
 800c2c2:	e77e      	b.n	800c1c2 <main+0x46>
 800c2c4:	20000568 	.word	0x20000568
 800c2c8:	20000404 	.word	0x20000404
 800c2cc:	200005a4 	.word	0x200005a4
 800c2d0:	200004e4 	.word	0x200004e4
 800c2d4:	20000400 	.word	0x20000400
 800c2d8:	41200000 	.word	0x41200000

0800c2dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800c2dc:	b590      	push	{r4, r7, lr}
 800c2de:	b093      	sub	sp, #76	; 0x4c
 800c2e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800c2e2:	2414      	movs	r4, #20
 800c2e4:	193b      	adds	r3, r7, r4
 800c2e6:	0018      	movs	r0, r3
 800c2e8:	2334      	movs	r3, #52	; 0x34
 800c2ea:	001a      	movs	r2, r3
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	f004 fa63 	bl	80107b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800c2f2:	1d3b      	adds	r3, r7, #4
 800c2f4:	0018      	movs	r0, r3
 800c2f6:	2310      	movs	r3, #16
 800c2f8:	001a      	movs	r2, r3
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	f004 fa5c 	bl	80107b8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800c300:	0021      	movs	r1, r4
 800c302:	187b      	adds	r3, r7, r1
 800c304:	2212      	movs	r2, #18
 800c306:	601a      	str	r2, [r3, #0]
			| RCC_OSCILLATORTYPE_HSI14;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800c308:	187b      	adds	r3, r7, r1
 800c30a:	2201      	movs	r2, #1
 800c30c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800c30e:	187b      	adds	r3, r7, r1
 800c310:	2201      	movs	r2, #1
 800c312:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800c314:	187b      	adds	r3, r7, r1
 800c316:	2210      	movs	r2, #16
 800c318:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800c31a:	187b      	adds	r3, r7, r1
 800c31c:	2210      	movs	r2, #16
 800c31e:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800c320:	187b      	adds	r3, r7, r1
 800c322:	2200      	movs	r2, #0
 800c324:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800c326:	187b      	adds	r3, r7, r1
 800c328:	0018      	movs	r0, r3
 800c32a:	f002 fcb3 	bl	800ec94 <HAL_RCC_OscConfig>
 800c32e:	1e03      	subs	r3, r0, #0
 800c330:	d001      	beq.n	800c336 <SystemClock_Config+0x5a>
		Error_Handler();
 800c332:	f000 f819 	bl	800c368 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800c336:	1d3b      	adds	r3, r7, #4
 800c338:	2207      	movs	r2, #7
 800c33a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800c33c:	1d3b      	adds	r3, r7, #4
 800c33e:	2200      	movs	r2, #0
 800c340:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800c342:	1d3b      	adds	r3, r7, #4
 800c344:	2200      	movs	r2, #0
 800c346:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800c348:	1d3b      	adds	r3, r7, #4
 800c34a:	2200      	movs	r2, #0
 800c34c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800c34e:	1d3b      	adds	r3, r7, #4
 800c350:	2100      	movs	r1, #0
 800c352:	0018      	movs	r0, r3
 800c354:	f003 f824 	bl	800f3a0 <HAL_RCC_ClockConfig>
 800c358:	1e03      	subs	r3, r0, #0
 800c35a:	d001      	beq.n	800c360 <SystemClock_Config+0x84>
		Error_Handler();
 800c35c:	f000 f804 	bl	800c368 <Error_Handler>
	}
}
 800c360:	46c0      	nop			; (mov r8, r8)
 800c362:	46bd      	mov	sp, r7
 800c364:	b013      	add	sp, #76	; 0x4c
 800c366:	bd90      	pop	{r4, r7, pc}

0800c368 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800c368:	b580      	push	{r7, lr}
 800c36a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c36c:	b672      	cpsid	i
}
 800c36e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800c370:	e7fe      	b.n	800c370 <Error_Handler+0x8>
	...

0800c374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c37a:	4b13      	ldr	r3, [pc, #76]	; (800c3c8 <HAL_MspInit+0x54>)
 800c37c:	699a      	ldr	r2, [r3, #24]
 800c37e:	4b12      	ldr	r3, [pc, #72]	; (800c3c8 <HAL_MspInit+0x54>)
 800c380:	2101      	movs	r1, #1
 800c382:	430a      	orrs	r2, r1
 800c384:	619a      	str	r2, [r3, #24]
 800c386:	4b10      	ldr	r3, [pc, #64]	; (800c3c8 <HAL_MspInit+0x54>)
 800c388:	699b      	ldr	r3, [r3, #24]
 800c38a:	2201      	movs	r2, #1
 800c38c:	4013      	ands	r3, r2
 800c38e:	607b      	str	r3, [r7, #4]
 800c390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c392:	4b0d      	ldr	r3, [pc, #52]	; (800c3c8 <HAL_MspInit+0x54>)
 800c394:	69da      	ldr	r2, [r3, #28]
 800c396:	4b0c      	ldr	r3, [pc, #48]	; (800c3c8 <HAL_MspInit+0x54>)
 800c398:	2180      	movs	r1, #128	; 0x80
 800c39a:	0549      	lsls	r1, r1, #21
 800c39c:	430a      	orrs	r2, r1
 800c39e:	61da      	str	r2, [r3, #28]
 800c3a0:	4b09      	ldr	r3, [pc, #36]	; (800c3c8 <HAL_MspInit+0x54>)
 800c3a2:	69da      	ldr	r2, [r3, #28]
 800c3a4:	2380      	movs	r3, #128	; 0x80
 800c3a6:	055b      	lsls	r3, r3, #21
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	603b      	str	r3, [r7, #0]
 800c3ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	2004      	movs	r0, #4
 800c3b4:	f002 f8d6 	bl	800e564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 800c3b8:	2004      	movs	r0, #4
 800c3ba:	f002 f8e8 	bl	800e58e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c3be:	46c0      	nop			; (mov r8, r8)
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	b002      	add	sp, #8
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	46c0      	nop			; (mov r8, r8)
 800c3c8:	40021000 	.word	0x40021000

0800c3cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c3d0:	46c0      	nop			; (mov r8, r8)
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c3da:	e7fe      	b.n	800c3da <HardFault_Handler+0x4>

0800c3dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800c3e0:	46c0      	nop			; (mov r8, r8)
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c3ea:	46c0      	nop			; (mov r8, r8)
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c3f4:	f000 fc3e 	bl	800cc74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c3f8:	46c0      	nop			; (mov r8, r8)
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupts.
  */
void RCC_CRS_IRQHandler(void)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 800c402:	46c0      	nop			; (mov r8, r8)
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800c40c:	4b03      	ldr	r3, [pc, #12]	; (800c41c <DMA1_Ch1_IRQHandler+0x14>)
 800c40e:	0018      	movs	r0, r3
 800c410:	f002 f988 	bl	800e724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 800c414:	46c0      	nop			; (mov r8, r8)
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	46c0      	nop			; (mov r8, r8)
 800c41c:	20000524 	.word	0x20000524

0800c420 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800c424:	4b03      	ldr	r3, [pc, #12]	; (800c434 <ADC1_COMP_IRQHandler+0x14>)
 800c426:	0018      	movs	r0, r3
 800c428:	f000 fe26 	bl	800d078 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800c42c:	46c0      	nop			; (mov r8, r8)
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	46c0      	nop			; (mov r8, r8)
 800c434:	200004e4 	.word	0x200004e4

0800c438 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c43c:	4b03      	ldr	r3, [pc, #12]	; (800c44c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800c43e:	0018      	movs	r0, r3
 800c440:	f003 fab2 	bl	800f9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800c444:	46c0      	nop			; (mov r8, r8)
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	46c0      	nop			; (mov r8, r8)
 800c44c:	20000608 	.word	0x20000608

0800c450 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800c454:	4b03      	ldr	r3, [pc, #12]	; (800c464 <TIM1_CC_IRQHandler+0x14>)
 800c456:	0018      	movs	r0, r3
 800c458:	f003 faa6 	bl	800f9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800c45c:	46c0      	nop			; (mov r8, r8)
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	46c0      	nop			; (mov r8, r8)
 800c464:	20000608 	.word	0x20000608

0800c468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800c46c:	4b03      	ldr	r3, [pc, #12]	; (800c47c <TIM2_IRQHandler+0x14>)
 800c46e:	0018      	movs	r0, r3
 800c470:	f003 fa9a 	bl	800f9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800c474:	46c0      	nop			; (mov r8, r8)
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	46c0      	nop			; (mov r8, r8)
 800c47c:	20000650 	.word	0x20000650

0800c480 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800c484:	4b03      	ldr	r3, [pc, #12]	; (800c494 <TIM3_IRQHandler+0x14>)
 800c486:	0018      	movs	r0, r3
 800c488:	f003 fa8e 	bl	800f9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800c48c:	46c0      	nop			; (mov r8, r8)
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	46c0      	nop			; (mov r8, r8)
 800c494:	20000698 	.word	0x20000698

0800c498 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800c49c:	4b03      	ldr	r3, [pc, #12]	; (800c4ac <TIM7_IRQHandler+0x14>)
 800c49e:	0018      	movs	r0, r3
 800c4a0:	f003 fa82 	bl	800f9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800c4a4:	46c0      	nop			; (mov r8, r8)
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	46c0      	nop			; (mov r8, r8)
 800c4ac:	200006e0 	.word	0x200006e0

0800c4b0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800c4b4:	4b03      	ldr	r3, [pc, #12]	; (800c4c4 <TIM15_IRQHandler+0x14>)
 800c4b6:	0018      	movs	r0, r3
 800c4b8:	f003 fa76 	bl	800f9a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800c4bc:	46c0      	nop			; (mov r8, r8)
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	46c0      	nop			; (mov r8, r8)
 800c4c4:	20000728 	.word	0x20000728

0800c4c8 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800c4cc:	4b03      	ldr	r3, [pc, #12]	; (800c4dc <CEC_CAN_IRQHandler+0x14>)
 800c4ce:	0018      	movs	r0, r3
 800c4d0:	f001 fd90 	bl	800dff4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800c4d4:	46c0      	nop			; (mov r8, r8)
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	46c0      	nop			; (mov r8, r8)
 800c4dc:	20000568 	.word	0x20000568

0800c4e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800c4e4:	46c0      	nop			; (mov r8, r8)
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
	...

0800c4ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b086      	sub	sp, #24
 800c4f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c4f2:	2308      	movs	r3, #8
 800c4f4:	18fb      	adds	r3, r7, r3
 800c4f6:	0018      	movs	r0, r3
 800c4f8:	2310      	movs	r3, #16
 800c4fa:	001a      	movs	r2, r3
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	f004 f95b 	bl	80107b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c502:	003b      	movs	r3, r7
 800c504:	0018      	movs	r0, r3
 800c506:	2308      	movs	r3, #8
 800c508:	001a      	movs	r2, r3
 800c50a:	2100      	movs	r1, #0
 800c50c:	f004 f954 	bl	80107b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800c510:	4b1f      	ldr	r3, [pc, #124]	; (800c590 <MX_TIM1_Init+0xa4>)
 800c512:	4a20      	ldr	r2, [pc, #128]	; (800c594 <MX_TIM1_Init+0xa8>)
 800c514:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 800c516:	4b1e      	ldr	r3, [pc, #120]	; (800c590 <MX_TIM1_Init+0xa4>)
 800c518:	2209      	movs	r2, #9
 800c51a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c51c:	4b1c      	ldr	r3, [pc, #112]	; (800c590 <MX_TIM1_Init+0xa4>)
 800c51e:	2200      	movs	r2, #0
 800c520:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 24000-1;
 800c522:	4b1b      	ldr	r3, [pc, #108]	; (800c590 <MX_TIM1_Init+0xa4>)
 800c524:	4a1c      	ldr	r2, [pc, #112]	; (800c598 <MX_TIM1_Init+0xac>)
 800c526:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c528:	4b19      	ldr	r3, [pc, #100]	; (800c590 <MX_TIM1_Init+0xa4>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800c52e:	4b18      	ldr	r3, [pc, #96]	; (800c590 <MX_TIM1_Init+0xa4>)
 800c530:	2200      	movs	r2, #0
 800c532:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c534:	4b16      	ldr	r3, [pc, #88]	; (800c590 <MX_TIM1_Init+0xa4>)
 800c536:	2200      	movs	r2, #0
 800c538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800c53a:	4b15      	ldr	r3, [pc, #84]	; (800c590 <MX_TIM1_Init+0xa4>)
 800c53c:	0018      	movs	r0, r3
 800c53e:	f003 f889 	bl	800f654 <HAL_TIM_Base_Init>
 800c542:	1e03      	subs	r3, r0, #0
 800c544:	d001      	beq.n	800c54a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800c546:	f7ff ff0f 	bl	800c368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c54a:	2108      	movs	r1, #8
 800c54c:	187b      	adds	r3, r7, r1
 800c54e:	2280      	movs	r2, #128	; 0x80
 800c550:	0152      	lsls	r2, r2, #5
 800c552:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800c554:	187a      	adds	r2, r7, r1
 800c556:	4b0e      	ldr	r3, [pc, #56]	; (800c590 <MX_TIM1_Init+0xa4>)
 800c558:	0011      	movs	r1, r2
 800c55a:	0018      	movs	r0, r3
 800c55c:	f003 fc00 	bl	800fd60 <HAL_TIM_ConfigClockSource>
 800c560:	1e03      	subs	r3, r0, #0
 800c562:	d001      	beq.n	800c568 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800c564:	f7ff ff00 	bl	800c368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c568:	003b      	movs	r3, r7
 800c56a:	2220      	movs	r2, #32
 800c56c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c56e:	003b      	movs	r3, r7
 800c570:	2200      	movs	r2, #0
 800c572:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800c574:	003a      	movs	r2, r7
 800c576:	4b06      	ldr	r3, [pc, #24]	; (800c590 <MX_TIM1_Init+0xa4>)
 800c578:	0011      	movs	r1, r2
 800c57a:	0018      	movs	r0, r3
 800c57c:	f004 f826 	bl	80105cc <HAL_TIMEx_MasterConfigSynchronization>
 800c580:	1e03      	subs	r3, r0, #0
 800c582:	d001      	beq.n	800c588 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800c584:	f7ff fef0 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800c588:	46c0      	nop			; (mov r8, r8)
 800c58a:	46bd      	mov	sp, r7
 800c58c:	b006      	add	sp, #24
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	20000608 	.word	0x20000608
 800c594:	40012c00 	.word	0x40012c00
 800c598:	00005dbf 	.word	0x00005dbf

0800c59c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b086      	sub	sp, #24
 800c5a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c5a2:	2308      	movs	r3, #8
 800c5a4:	18fb      	adds	r3, r7, r3
 800c5a6:	0018      	movs	r0, r3
 800c5a8:	2310      	movs	r3, #16
 800c5aa:	001a      	movs	r2, r3
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	f004 f903 	bl	80107b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c5b2:	003b      	movs	r3, r7
 800c5b4:	0018      	movs	r0, r3
 800c5b6:	2308      	movs	r3, #8
 800c5b8:	001a      	movs	r2, r3
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	f004 f8fc 	bl	80107b8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c5c0:	4b1e      	ldr	r3, [pc, #120]	; (800c63c <MX_TIM2_Init+0xa0>)
 800c5c2:	2280      	movs	r2, #128	; 0x80
 800c5c4:	05d2      	lsls	r2, r2, #23
 800c5c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c5c8:	4b1c      	ldr	r3, [pc, #112]	; (800c63c <MX_TIM2_Init+0xa0>)
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c5ce:	4b1b      	ldr	r3, [pc, #108]	; (800c63c <MX_TIM2_Init+0xa0>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800c5d4:	4b19      	ldr	r3, [pc, #100]	; (800c63c <MX_TIM2_Init+0xa0>)
 800c5d6:	4a1a      	ldr	r2, [pc, #104]	; (800c640 <MX_TIM2_Init+0xa4>)
 800c5d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c5da:	4b18      	ldr	r3, [pc, #96]	; (800c63c <MX_TIM2_Init+0xa0>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c5e0:	4b16      	ldr	r3, [pc, #88]	; (800c63c <MX_TIM2_Init+0xa0>)
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800c5e6:	4b15      	ldr	r3, [pc, #84]	; (800c63c <MX_TIM2_Init+0xa0>)
 800c5e8:	0018      	movs	r0, r3
 800c5ea:	f003 f833 	bl	800f654 <HAL_TIM_Base_Init>
 800c5ee:	1e03      	subs	r3, r0, #0
 800c5f0:	d001      	beq.n	800c5f6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800c5f2:	f7ff feb9 	bl	800c368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c5f6:	2108      	movs	r1, #8
 800c5f8:	187b      	adds	r3, r7, r1
 800c5fa:	2280      	movs	r2, #128	; 0x80
 800c5fc:	0152      	lsls	r2, r2, #5
 800c5fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800c600:	187a      	adds	r2, r7, r1
 800c602:	4b0e      	ldr	r3, [pc, #56]	; (800c63c <MX_TIM2_Init+0xa0>)
 800c604:	0011      	movs	r1, r2
 800c606:	0018      	movs	r0, r3
 800c608:	f003 fbaa 	bl	800fd60 <HAL_TIM_ConfigClockSource>
 800c60c:	1e03      	subs	r3, r0, #0
 800c60e:	d001      	beq.n	800c614 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800c610:	f7ff feaa 	bl	800c368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800c614:	003b      	movs	r3, r7
 800c616:	2220      	movs	r2, #32
 800c618:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c61a:	003b      	movs	r3, r7
 800c61c:	2200      	movs	r2, #0
 800c61e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c620:	003a      	movs	r2, r7
 800c622:	4b06      	ldr	r3, [pc, #24]	; (800c63c <MX_TIM2_Init+0xa0>)
 800c624:	0011      	movs	r1, r2
 800c626:	0018      	movs	r0, r3
 800c628:	f003 ffd0 	bl	80105cc <HAL_TIMEx_MasterConfigSynchronization>
 800c62c:	1e03      	subs	r3, r0, #0
 800c62e:	d001      	beq.n	800c634 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800c630:	f7ff fe9a 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800c634:	46c0      	nop			; (mov r8, r8)
 800c636:	46bd      	mov	sp, r7
 800c638:	b006      	add	sp, #24
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	20000650 	.word	0x20000650
 800c640:	0000ffff 	.word	0x0000ffff

0800c644 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b08e      	sub	sp, #56	; 0x38
 800c648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c64a:	2328      	movs	r3, #40	; 0x28
 800c64c:	18fb      	adds	r3, r7, r3
 800c64e:	0018      	movs	r0, r3
 800c650:	2310      	movs	r3, #16
 800c652:	001a      	movs	r2, r3
 800c654:	2100      	movs	r1, #0
 800c656:	f004 f8af 	bl	80107b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c65a:	2320      	movs	r3, #32
 800c65c:	18fb      	adds	r3, r7, r3
 800c65e:	0018      	movs	r0, r3
 800c660:	2308      	movs	r3, #8
 800c662:	001a      	movs	r2, r3
 800c664:	2100      	movs	r1, #0
 800c666:	f004 f8a7 	bl	80107b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c66a:	1d3b      	adds	r3, r7, #4
 800c66c:	0018      	movs	r0, r3
 800c66e:	231c      	movs	r3, #28
 800c670:	001a      	movs	r2, r3
 800c672:	2100      	movs	r1, #0
 800c674:	f004 f8a0 	bl	80107b8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800c678:	4b3e      	ldr	r3, [pc, #248]	; (800c774 <MX_TIM3_Init+0x130>)
 800c67a:	4a3f      	ldr	r2, [pc, #252]	; (800c778 <MX_TIM3_Init+0x134>)
 800c67c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 800c67e:	4b3d      	ldr	r3, [pc, #244]	; (800c774 <MX_TIM3_Init+0x130>)
 800c680:	220b      	movs	r2, #11
 800c682:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c684:	4b3b      	ldr	r3, [pc, #236]	; (800c774 <MX_TIM3_Init+0x130>)
 800c686:	2200      	movs	r2, #0
 800c688:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 160-1;
 800c68a:	4b3a      	ldr	r3, [pc, #232]	; (800c774 <MX_TIM3_Init+0x130>)
 800c68c:	229f      	movs	r2, #159	; 0x9f
 800c68e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c690:	4b38      	ldr	r3, [pc, #224]	; (800c774 <MX_TIM3_Init+0x130>)
 800c692:	2200      	movs	r2, #0
 800c694:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c696:	4b37      	ldr	r3, [pc, #220]	; (800c774 <MX_TIM3_Init+0x130>)
 800c698:	2200      	movs	r2, #0
 800c69a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800c69c:	4b35      	ldr	r3, [pc, #212]	; (800c774 <MX_TIM3_Init+0x130>)
 800c69e:	0018      	movs	r0, r3
 800c6a0:	f002 ffd8 	bl	800f654 <HAL_TIM_Base_Init>
 800c6a4:	1e03      	subs	r3, r0, #0
 800c6a6:	d001      	beq.n	800c6ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800c6a8:	f7ff fe5e 	bl	800c368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c6ac:	2128      	movs	r1, #40	; 0x28
 800c6ae:	187b      	adds	r3, r7, r1
 800c6b0:	2280      	movs	r2, #128	; 0x80
 800c6b2:	0152      	lsls	r2, r2, #5
 800c6b4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800c6b6:	187a      	adds	r2, r7, r1
 800c6b8:	4b2e      	ldr	r3, [pc, #184]	; (800c774 <MX_TIM3_Init+0x130>)
 800c6ba:	0011      	movs	r1, r2
 800c6bc:	0018      	movs	r0, r3
 800c6be:	f003 fb4f 	bl	800fd60 <HAL_TIM_ConfigClockSource>
 800c6c2:	1e03      	subs	r3, r0, #0
 800c6c4:	d001      	beq.n	800c6ca <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800c6c6:	f7ff fe4f 	bl	800c368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800c6ca:	4b2a      	ldr	r3, [pc, #168]	; (800c774 <MX_TIM3_Init+0x130>)
 800c6cc:	0018      	movs	r0, r3
 800c6ce:	f003 f85b 	bl	800f788 <HAL_TIM_PWM_Init>
 800c6d2:	1e03      	subs	r3, r0, #0
 800c6d4:	d001      	beq.n	800c6da <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800c6d6:	f7ff fe47 	bl	800c368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c6da:	2120      	movs	r1, #32
 800c6dc:	187b      	adds	r3, r7, r1
 800c6de:	2200      	movs	r2, #0
 800c6e0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c6e2:	187b      	adds	r3, r7, r1
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c6e8:	187a      	adds	r2, r7, r1
 800c6ea:	4b22      	ldr	r3, [pc, #136]	; (800c774 <MX_TIM3_Init+0x130>)
 800c6ec:	0011      	movs	r1, r2
 800c6ee:	0018      	movs	r0, r3
 800c6f0:	f003 ff6c 	bl	80105cc <HAL_TIMEx_MasterConfigSynchronization>
 800c6f4:	1e03      	subs	r3, r0, #0
 800c6f6:	d001      	beq.n	800c6fc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800c6f8:	f7ff fe36 	bl	800c368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c6fc:	1d3b      	adds	r3, r7, #4
 800c6fe:	2260      	movs	r2, #96	; 0x60
 800c700:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800c702:	1d3b      	adds	r3, r7, #4
 800c704:	2200      	movs	r2, #0
 800c706:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c708:	1d3b      	adds	r3, r7, #4
 800c70a:	2200      	movs	r2, #0
 800c70c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c70e:	1d3b      	adds	r3, r7, #4
 800c710:	2200      	movs	r2, #0
 800c712:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c714:	1d39      	adds	r1, r7, #4
 800c716:	4b17      	ldr	r3, [pc, #92]	; (800c774 <MX_TIM3_Init+0x130>)
 800c718:	2200      	movs	r2, #0
 800c71a:	0018      	movs	r0, r3
 800c71c:	f003 fa5a 	bl	800fbd4 <HAL_TIM_PWM_ConfigChannel>
 800c720:	1e03      	subs	r3, r0, #0
 800c722:	d001      	beq.n	800c728 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800c724:	f7ff fe20 	bl	800c368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c728:	1d39      	adds	r1, r7, #4
 800c72a:	4b12      	ldr	r3, [pc, #72]	; (800c774 <MX_TIM3_Init+0x130>)
 800c72c:	2204      	movs	r2, #4
 800c72e:	0018      	movs	r0, r3
 800c730:	f003 fa50 	bl	800fbd4 <HAL_TIM_PWM_ConfigChannel>
 800c734:	1e03      	subs	r3, r0, #0
 800c736:	d001      	beq.n	800c73c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 800c738:	f7ff fe16 	bl	800c368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800c73c:	1d39      	adds	r1, r7, #4
 800c73e:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <MX_TIM3_Init+0x130>)
 800c740:	2208      	movs	r2, #8
 800c742:	0018      	movs	r0, r3
 800c744:	f003 fa46 	bl	800fbd4 <HAL_TIM_PWM_ConfigChannel>
 800c748:	1e03      	subs	r3, r0, #0
 800c74a:	d001      	beq.n	800c750 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 800c74c:	f7ff fe0c 	bl	800c368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c750:	1d39      	adds	r1, r7, #4
 800c752:	4b08      	ldr	r3, [pc, #32]	; (800c774 <MX_TIM3_Init+0x130>)
 800c754:	220c      	movs	r2, #12
 800c756:	0018      	movs	r0, r3
 800c758:	f003 fa3c 	bl	800fbd4 <HAL_TIM_PWM_ConfigChannel>
 800c75c:	1e03      	subs	r3, r0, #0
 800c75e:	d001      	beq.n	800c764 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 800c760:	f7ff fe02 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800c764:	4b03      	ldr	r3, [pc, #12]	; (800c774 <MX_TIM3_Init+0x130>)
 800c766:	0018      	movs	r0, r3
 800c768:	f000 f9a2 	bl	800cab0 <HAL_TIM_MspPostInit>

}
 800c76c:	46c0      	nop			; (mov r8, r8)
 800c76e:	46bd      	mov	sp, r7
 800c770:	b00e      	add	sp, #56	; 0x38
 800c772:	bd80      	pop	{r7, pc}
 800c774:	20000698 	.word	0x20000698
 800c778:	40000400 	.word	0x40000400

0800c77c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c782:	003b      	movs	r3, r7
 800c784:	0018      	movs	r0, r3
 800c786:	2308      	movs	r3, #8
 800c788:	001a      	movs	r2, r3
 800c78a:	2100      	movs	r1, #0
 800c78c:	f004 f814 	bl	80107b8 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800c790:	4b15      	ldr	r3, [pc, #84]	; (800c7e8 <MX_TIM7_Init+0x6c>)
 800c792:	4a16      	ldr	r2, [pc, #88]	; (800c7ec <MX_TIM7_Init+0x70>)
 800c794:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 100-1;
 800c796:	4b14      	ldr	r3, [pc, #80]	; (800c7e8 <MX_TIM7_Init+0x6c>)
 800c798:	2263      	movs	r2, #99	; 0x63
 800c79a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c79c:	4b12      	ldr	r3, [pc, #72]	; (800c7e8 <MX_TIM7_Init+0x6c>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 24000-1;
 800c7a2:	4b11      	ldr	r3, [pc, #68]	; (800c7e8 <MX_TIM7_Init+0x6c>)
 800c7a4:	4a12      	ldr	r2, [pc, #72]	; (800c7f0 <MX_TIM7_Init+0x74>)
 800c7a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c7a8:	4b0f      	ldr	r3, [pc, #60]	; (800c7e8 <MX_TIM7_Init+0x6c>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800c7ae:	4b0e      	ldr	r3, [pc, #56]	; (800c7e8 <MX_TIM7_Init+0x6c>)
 800c7b0:	0018      	movs	r0, r3
 800c7b2:	f002 ff4f 	bl	800f654 <HAL_TIM_Base_Init>
 800c7b6:	1e03      	subs	r3, r0, #0
 800c7b8:	d001      	beq.n	800c7be <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800c7ba:	f7ff fdd5 	bl	800c368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c7be:	003b      	movs	r3, r7
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c7c4:	003b      	movs	r3, r7
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800c7ca:	003a      	movs	r2, r7
 800c7cc:	4b06      	ldr	r3, [pc, #24]	; (800c7e8 <MX_TIM7_Init+0x6c>)
 800c7ce:	0011      	movs	r1, r2
 800c7d0:	0018      	movs	r0, r3
 800c7d2:	f003 fefb 	bl	80105cc <HAL_TIMEx_MasterConfigSynchronization>
 800c7d6:	1e03      	subs	r3, r0, #0
 800c7d8:	d001      	beq.n	800c7de <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800c7da:	f7ff fdc5 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800c7de:	46c0      	nop			; (mov r8, r8)
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	b002      	add	sp, #8
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	46c0      	nop			; (mov r8, r8)
 800c7e8:	200006e0 	.word	0x200006e0
 800c7ec:	40001400 	.word	0x40001400
 800c7f0:	00005dbf 	.word	0x00005dbf

0800c7f4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b096      	sub	sp, #88	; 0x58
 800c7f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800c7fa:	2348      	movs	r3, #72	; 0x48
 800c7fc:	18fb      	adds	r3, r7, r3
 800c7fe:	0018      	movs	r0, r3
 800c800:	2310      	movs	r3, #16
 800c802:	001a      	movs	r2, r3
 800c804:	2100      	movs	r1, #0
 800c806:	f003 ffd7 	bl	80107b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c80a:	2340      	movs	r3, #64	; 0x40
 800c80c:	18fb      	adds	r3, r7, r3
 800c80e:	0018      	movs	r0, r3
 800c810:	2308      	movs	r3, #8
 800c812:	001a      	movs	r2, r3
 800c814:	2100      	movs	r1, #0
 800c816:	f003 ffcf 	bl	80107b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c81a:	2324      	movs	r3, #36	; 0x24
 800c81c:	18fb      	adds	r3, r7, r3
 800c81e:	0018      	movs	r0, r3
 800c820:	231c      	movs	r3, #28
 800c822:	001a      	movs	r2, r3
 800c824:	2100      	movs	r1, #0
 800c826:	f003 ffc7 	bl	80107b8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800c82a:	1d3b      	adds	r3, r7, #4
 800c82c:	0018      	movs	r0, r3
 800c82e:	2320      	movs	r3, #32
 800c830:	001a      	movs	r2, r3
 800c832:	2100      	movs	r1, #0
 800c834:	f003 ffc0 	bl	80107b8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800c838:	4b4b      	ldr	r3, [pc, #300]	; (800c968 <MX_TIM15_Init+0x174>)
 800c83a:	4a4c      	ldr	r2, [pc, #304]	; (800c96c <MX_TIM15_Init+0x178>)
 800c83c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 12-1;
 800c83e:	4b4a      	ldr	r3, [pc, #296]	; (800c968 <MX_TIM15_Init+0x174>)
 800c840:	220b      	movs	r2, #11
 800c842:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c844:	4b48      	ldr	r3, [pc, #288]	; (800c968 <MX_TIM15_Init+0x174>)
 800c846:	2200      	movs	r2, #0
 800c848:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 160-1;
 800c84a:	4b47      	ldr	r3, [pc, #284]	; (800c968 <MX_TIM15_Init+0x174>)
 800c84c:	229f      	movs	r2, #159	; 0x9f
 800c84e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c850:	4b45      	ldr	r3, [pc, #276]	; (800c968 <MX_TIM15_Init+0x174>)
 800c852:	2200      	movs	r2, #0
 800c854:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800c856:	4b44      	ldr	r3, [pc, #272]	; (800c968 <MX_TIM15_Init+0x174>)
 800c858:	2200      	movs	r2, #0
 800c85a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c85c:	4b42      	ldr	r3, [pc, #264]	; (800c968 <MX_TIM15_Init+0x174>)
 800c85e:	2200      	movs	r2, #0
 800c860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800c862:	4b41      	ldr	r3, [pc, #260]	; (800c968 <MX_TIM15_Init+0x174>)
 800c864:	0018      	movs	r0, r3
 800c866:	f002 fef5 	bl	800f654 <HAL_TIM_Base_Init>
 800c86a:	1e03      	subs	r3, r0, #0
 800c86c:	d001      	beq.n	800c872 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800c86e:	f7ff fd7b 	bl	800c368 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800c872:	2148      	movs	r1, #72	; 0x48
 800c874:	187b      	adds	r3, r7, r1
 800c876:	2280      	movs	r2, #128	; 0x80
 800c878:	0152      	lsls	r2, r2, #5
 800c87a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800c87c:	187a      	adds	r2, r7, r1
 800c87e:	4b3a      	ldr	r3, [pc, #232]	; (800c968 <MX_TIM15_Init+0x174>)
 800c880:	0011      	movs	r1, r2
 800c882:	0018      	movs	r0, r3
 800c884:	f003 fa6c 	bl	800fd60 <HAL_TIM_ConfigClockSource>
 800c888:	1e03      	subs	r3, r0, #0
 800c88a:	d001      	beq.n	800c890 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 800c88c:	f7ff fd6c 	bl	800c368 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800c890:	4b35      	ldr	r3, [pc, #212]	; (800c968 <MX_TIM15_Init+0x174>)
 800c892:	0018      	movs	r0, r3
 800c894:	f002 ff78 	bl	800f788 <HAL_TIM_PWM_Init>
 800c898:	1e03      	subs	r3, r0, #0
 800c89a:	d001      	beq.n	800c8a0 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 800c89c:	f7ff fd64 	bl	800c368 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c8a0:	2140      	movs	r1, #64	; 0x40
 800c8a2:	187b      	adds	r3, r7, r1
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c8a8:	187b      	adds	r3, r7, r1
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800c8ae:	187a      	adds	r2, r7, r1
 800c8b0:	4b2d      	ldr	r3, [pc, #180]	; (800c968 <MX_TIM15_Init+0x174>)
 800c8b2:	0011      	movs	r1, r2
 800c8b4:	0018      	movs	r0, r3
 800c8b6:	f003 fe89 	bl	80105cc <HAL_TIMEx_MasterConfigSynchronization>
 800c8ba:	1e03      	subs	r3, r0, #0
 800c8bc:	d001      	beq.n	800c8c2 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800c8be:	f7ff fd53 	bl	800c368 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c8c2:	2124      	movs	r1, #36	; 0x24
 800c8c4:	187b      	adds	r3, r7, r1
 800c8c6:	2260      	movs	r2, #96	; 0x60
 800c8c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800c8ca:	187b      	adds	r3, r7, r1
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c8d0:	187b      	adds	r3, r7, r1
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800c8d6:	187b      	adds	r3, r7, r1
 800c8d8:	2200      	movs	r2, #0
 800c8da:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c8dc:	187b      	adds	r3, r7, r1
 800c8de:	2200      	movs	r2, #0
 800c8e0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800c8e2:	187b      	adds	r3, r7, r1
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800c8e8:	187b      	adds	r3, r7, r1
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c8ee:	1879      	adds	r1, r7, r1
 800c8f0:	4b1d      	ldr	r3, [pc, #116]	; (800c968 <MX_TIM15_Init+0x174>)
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	0018      	movs	r0, r3
 800c8f6:	f003 f96d 	bl	800fbd4 <HAL_TIM_PWM_ConfigChannel>
 800c8fa:	1e03      	subs	r3, r0, #0
 800c8fc:	d001      	beq.n	800c902 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800c8fe:	f7ff fd33 	bl	800c368 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c902:	2324      	movs	r3, #36	; 0x24
 800c904:	18f9      	adds	r1, r7, r3
 800c906:	4b18      	ldr	r3, [pc, #96]	; (800c968 <MX_TIM15_Init+0x174>)
 800c908:	2204      	movs	r2, #4
 800c90a:	0018      	movs	r0, r3
 800c90c:	f003 f962 	bl	800fbd4 <HAL_TIM_PWM_ConfigChannel>
 800c910:	1e03      	subs	r3, r0, #0
 800c912:	d001      	beq.n	800c918 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 800c914:	f7ff fd28 	bl	800c368 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800c918:	1d3b      	adds	r3, r7, #4
 800c91a:	2200      	movs	r2, #0
 800c91c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800c91e:	1d3b      	adds	r3, r7, #4
 800c920:	2200      	movs	r2, #0
 800c922:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800c924:	1d3b      	adds	r3, r7, #4
 800c926:	2200      	movs	r2, #0
 800c928:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800c92a:	1d3b      	adds	r3, r7, #4
 800c92c:	2200      	movs	r2, #0
 800c92e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800c930:	1d3b      	adds	r3, r7, #4
 800c932:	2200      	movs	r2, #0
 800c934:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800c936:	1d3b      	adds	r3, r7, #4
 800c938:	2280      	movs	r2, #128	; 0x80
 800c93a:	0192      	lsls	r2, r2, #6
 800c93c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800c93e:	1d3b      	adds	r3, r7, #4
 800c940:	2200      	movs	r2, #0
 800c942:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800c944:	1d3a      	adds	r2, r7, #4
 800c946:	4b08      	ldr	r3, [pc, #32]	; (800c968 <MX_TIM15_Init+0x174>)
 800c948:	0011      	movs	r1, r2
 800c94a:	0018      	movs	r0, r3
 800c94c:	f003 fe9c 	bl	8010688 <HAL_TIMEx_ConfigBreakDeadTime>
 800c950:	1e03      	subs	r3, r0, #0
 800c952:	d001      	beq.n	800c958 <MX_TIM15_Init+0x164>
  {
    Error_Handler();
 800c954:	f7ff fd08 	bl	800c368 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800c958:	4b03      	ldr	r3, [pc, #12]	; (800c968 <MX_TIM15_Init+0x174>)
 800c95a:	0018      	movs	r0, r3
 800c95c:	f000 f8a8 	bl	800cab0 <HAL_TIM_MspPostInit>

}
 800c960:	46c0      	nop			; (mov r8, r8)
 800c962:	46bd      	mov	sp, r7
 800c964:	b016      	add	sp, #88	; 0x58
 800c966:	bd80      	pop	{r7, pc}
 800c968:	20000728 	.word	0x20000728
 800c96c:	40014000 	.word	0x40014000

0800c970 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b088      	sub	sp, #32
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a47      	ldr	r2, [pc, #284]	; (800ca9c <HAL_TIM_Base_MspInit+0x12c>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d11e      	bne.n	800c9c0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c982:	4b47      	ldr	r3, [pc, #284]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800c984:	699a      	ldr	r2, [r3, #24]
 800c986:	4b46      	ldr	r3, [pc, #280]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800c988:	2180      	movs	r1, #128	; 0x80
 800c98a:	0109      	lsls	r1, r1, #4
 800c98c:	430a      	orrs	r2, r1
 800c98e:	619a      	str	r2, [r3, #24]
 800c990:	4b43      	ldr	r3, [pc, #268]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800c992:	699a      	ldr	r2, [r3, #24]
 800c994:	2380      	movs	r3, #128	; 0x80
 800c996:	011b      	lsls	r3, r3, #4
 800c998:	4013      	ands	r3, r2
 800c99a:	61fb      	str	r3, [r7, #28]
 800c99c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800c99e:	2200      	movs	r2, #0
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	200d      	movs	r0, #13
 800c9a4:	f001 fdde 	bl	800e564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800c9a8:	200d      	movs	r0, #13
 800c9aa:	f001 fdf0 	bl	800e58e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	200e      	movs	r0, #14
 800c9b4:	f001 fdd6 	bl	800e564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800c9b8:	200e      	movs	r0, #14
 800c9ba:	f001 fde8 	bl	800e58e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800c9be:	e069      	b.n	800ca94 <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM2)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	2380      	movs	r3, #128	; 0x80
 800c9c6:	05db      	lsls	r3, r3, #23
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d114      	bne.n	800c9f6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c9cc:	4b34      	ldr	r3, [pc, #208]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800c9ce:	69da      	ldr	r2, [r3, #28]
 800c9d0:	4b33      	ldr	r3, [pc, #204]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800c9d2:	2101      	movs	r1, #1
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	61da      	str	r2, [r3, #28]
 800c9d8:	4b31      	ldr	r3, [pc, #196]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800c9da:	69db      	ldr	r3, [r3, #28]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	4013      	ands	r3, r2
 800c9e0:	61bb      	str	r3, [r7, #24]
 800c9e2:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	200f      	movs	r0, #15
 800c9ea:	f001 fdbb 	bl	800e564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c9ee:	200f      	movs	r0, #15
 800c9f0:	f001 fdcd 	bl	800e58e <HAL_NVIC_EnableIRQ>
}
 800c9f4:	e04e      	b.n	800ca94 <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM3)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a2a      	ldr	r2, [pc, #168]	; (800caa4 <HAL_TIM_Base_MspInit+0x134>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d114      	bne.n	800ca2a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ca00:	4b27      	ldr	r3, [pc, #156]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800ca02:	69da      	ldr	r2, [r3, #28]
 800ca04:	4b26      	ldr	r3, [pc, #152]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800ca06:	2102      	movs	r1, #2
 800ca08:	430a      	orrs	r2, r1
 800ca0a:	61da      	str	r2, [r3, #28]
 800ca0c:	4b24      	ldr	r3, [pc, #144]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800ca0e:	69db      	ldr	r3, [r3, #28]
 800ca10:	2202      	movs	r2, #2
 800ca12:	4013      	ands	r3, r2
 800ca14:	617b      	str	r3, [r7, #20]
 800ca16:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	2010      	movs	r0, #16
 800ca1e:	f001 fda1 	bl	800e564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800ca22:	2010      	movs	r0, #16
 800ca24:	f001 fdb3 	bl	800e58e <HAL_NVIC_EnableIRQ>
}
 800ca28:	e034      	b.n	800ca94 <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM7)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a1e      	ldr	r2, [pc, #120]	; (800caa8 <HAL_TIM_Base_MspInit+0x138>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d114      	bne.n	800ca5e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800ca34:	4b1a      	ldr	r3, [pc, #104]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800ca36:	69da      	ldr	r2, [r3, #28]
 800ca38:	4b19      	ldr	r3, [pc, #100]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800ca3a:	2120      	movs	r1, #32
 800ca3c:	430a      	orrs	r2, r1
 800ca3e:	61da      	str	r2, [r3, #28]
 800ca40:	4b17      	ldr	r3, [pc, #92]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800ca42:	69db      	ldr	r3, [r3, #28]
 800ca44:	2220      	movs	r2, #32
 800ca46:	4013      	ands	r3, r2
 800ca48:	613b      	str	r3, [r7, #16]
 800ca4a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	2100      	movs	r1, #0
 800ca50:	2012      	movs	r0, #18
 800ca52:	f001 fd87 	bl	800e564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800ca56:	2012      	movs	r0, #18
 800ca58:	f001 fd99 	bl	800e58e <HAL_NVIC_EnableIRQ>
}
 800ca5c:	e01a      	b.n	800ca94 <HAL_TIM_Base_MspInit+0x124>
  else if(tim_baseHandle->Instance==TIM15)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a12      	ldr	r2, [pc, #72]	; (800caac <HAL_TIM_Base_MspInit+0x13c>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d115      	bne.n	800ca94 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800ca68:	4b0d      	ldr	r3, [pc, #52]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800ca6a:	699a      	ldr	r2, [r3, #24]
 800ca6c:	4b0c      	ldr	r3, [pc, #48]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800ca6e:	2180      	movs	r1, #128	; 0x80
 800ca70:	0249      	lsls	r1, r1, #9
 800ca72:	430a      	orrs	r2, r1
 800ca74:	619a      	str	r2, [r3, #24]
 800ca76:	4b0a      	ldr	r3, [pc, #40]	; (800caa0 <HAL_TIM_Base_MspInit+0x130>)
 800ca78:	699a      	ldr	r2, [r3, #24]
 800ca7a:	2380      	movs	r3, #128	; 0x80
 800ca7c:	025b      	lsls	r3, r3, #9
 800ca7e:	4013      	ands	r3, r2
 800ca80:	60fb      	str	r3, [r7, #12]
 800ca82:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 800ca84:	2200      	movs	r2, #0
 800ca86:	2100      	movs	r1, #0
 800ca88:	2014      	movs	r0, #20
 800ca8a:	f001 fd6b 	bl	800e564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800ca8e:	2014      	movs	r0, #20
 800ca90:	f001 fd7d 	bl	800e58e <HAL_NVIC_EnableIRQ>
}
 800ca94:	46c0      	nop			; (mov r8, r8)
 800ca96:	46bd      	mov	sp, r7
 800ca98:	b008      	add	sp, #32
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	40012c00 	.word	0x40012c00
 800caa0:	40021000 	.word	0x40021000
 800caa4:	40000400 	.word	0x40000400
 800caa8:	40001400 	.word	0x40001400
 800caac:	40014000 	.word	0x40014000

0800cab0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800cab0:	b590      	push	{r4, r7, lr}
 800cab2:	b08b      	sub	sp, #44	; 0x2c
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cab8:	2414      	movs	r4, #20
 800caba:	193b      	adds	r3, r7, r4
 800cabc:	0018      	movs	r0, r3
 800cabe:	2314      	movs	r3, #20
 800cac0:	001a      	movs	r2, r3
 800cac2:	2100      	movs	r1, #0
 800cac4:	f003 fe78 	bl	80107b8 <memset>
  if(timHandle->Instance==TIM3)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a2b      	ldr	r2, [pc, #172]	; (800cb7c <HAL_TIM_MspPostInit+0xcc>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d125      	bne.n	800cb1e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cad2:	4b2b      	ldr	r3, [pc, #172]	; (800cb80 <HAL_TIM_MspPostInit+0xd0>)
 800cad4:	695a      	ldr	r2, [r3, #20]
 800cad6:	4b2a      	ldr	r3, [pc, #168]	; (800cb80 <HAL_TIM_MspPostInit+0xd0>)
 800cad8:	2180      	movs	r1, #128	; 0x80
 800cada:	0309      	lsls	r1, r1, #12
 800cadc:	430a      	orrs	r2, r1
 800cade:	615a      	str	r2, [r3, #20]
 800cae0:	4b27      	ldr	r3, [pc, #156]	; (800cb80 <HAL_TIM_MspPostInit+0xd0>)
 800cae2:	695a      	ldr	r2, [r3, #20]
 800cae4:	2380      	movs	r3, #128	; 0x80
 800cae6:	031b      	lsls	r3, r3, #12
 800cae8:	4013      	ands	r3, r2
 800caea:	613b      	str	r3, [r7, #16]
 800caec:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800caee:	193b      	adds	r3, r7, r4
 800caf0:	22f0      	movs	r2, #240	; 0xf0
 800caf2:	0092      	lsls	r2, r2, #2
 800caf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800caf6:	0021      	movs	r1, r4
 800caf8:	187b      	adds	r3, r7, r1
 800cafa:	2202      	movs	r2, #2
 800cafc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cafe:	187b      	adds	r3, r7, r1
 800cb00:	2200      	movs	r2, #0
 800cb02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb04:	187b      	adds	r3, r7, r1
 800cb06:	2200      	movs	r2, #0
 800cb08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 800cb0a:	187b      	adds	r3, r7, r1
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cb10:	187b      	adds	r3, r7, r1
 800cb12:	4a1c      	ldr	r2, [pc, #112]	; (800cb84 <HAL_TIM_MspPostInit+0xd4>)
 800cb14:	0019      	movs	r1, r3
 800cb16:	0010      	movs	r0, r2
 800cb18:	f001 ff0c 	bl	800e934 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800cb1c:	e029      	b.n	800cb72 <HAL_TIM_MspPostInit+0xc2>
  else if(timHandle->Instance==TIM15)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a19      	ldr	r2, [pc, #100]	; (800cb88 <HAL_TIM_MspPostInit+0xd8>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d124      	bne.n	800cb72 <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb28:	4b15      	ldr	r3, [pc, #84]	; (800cb80 <HAL_TIM_MspPostInit+0xd0>)
 800cb2a:	695a      	ldr	r2, [r3, #20]
 800cb2c:	4b14      	ldr	r3, [pc, #80]	; (800cb80 <HAL_TIM_MspPostInit+0xd0>)
 800cb2e:	2180      	movs	r1, #128	; 0x80
 800cb30:	02c9      	lsls	r1, r1, #11
 800cb32:	430a      	orrs	r2, r1
 800cb34:	615a      	str	r2, [r3, #20]
 800cb36:	4b12      	ldr	r3, [pc, #72]	; (800cb80 <HAL_TIM_MspPostInit+0xd0>)
 800cb38:	695a      	ldr	r2, [r3, #20]
 800cb3a:	2380      	movs	r3, #128	; 0x80
 800cb3c:	02db      	lsls	r3, r3, #11
 800cb3e:	4013      	ands	r3, r2
 800cb40:	60fb      	str	r3, [r7, #12]
 800cb42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800cb44:	2114      	movs	r1, #20
 800cb46:	187b      	adds	r3, r7, r1
 800cb48:	22c0      	movs	r2, #192	; 0xc0
 800cb4a:	0212      	lsls	r2, r2, #8
 800cb4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb4e:	187b      	adds	r3, r7, r1
 800cb50:	2202      	movs	r2, #2
 800cb52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb54:	187b      	adds	r3, r7, r1
 800cb56:	2200      	movs	r2, #0
 800cb58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb5a:	187b      	adds	r3, r7, r1
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800cb60:	187b      	adds	r3, r7, r1
 800cb62:	2201      	movs	r2, #1
 800cb64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb66:	187b      	adds	r3, r7, r1
 800cb68:	4a08      	ldr	r2, [pc, #32]	; (800cb8c <HAL_TIM_MspPostInit+0xdc>)
 800cb6a:	0019      	movs	r1, r3
 800cb6c:	0010      	movs	r0, r2
 800cb6e:	f001 fee1 	bl	800e934 <HAL_GPIO_Init>
}
 800cb72:	46c0      	nop			; (mov r8, r8)
 800cb74:	46bd      	mov	sp, r7
 800cb76:	b00b      	add	sp, #44	; 0x2c
 800cb78:	bd90      	pop	{r4, r7, pc}
 800cb7a:	46c0      	nop			; (mov r8, r8)
 800cb7c:	40000400 	.word	0x40000400
 800cb80:	40021000 	.word	0x40021000
 800cb84:	48000800 	.word	0x48000800
 800cb88:	40014000 	.word	0x40014000
 800cb8c:	48000400 	.word	0x48000400

0800cb90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800cb90:	480d      	ldr	r0, [pc, #52]	; (800cbc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800cb92:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800cb94:	480d      	ldr	r0, [pc, #52]	; (800cbcc <LoopForever+0x6>)
  ldr r1, =_edata
 800cb96:	490e      	ldr	r1, [pc, #56]	; (800cbd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800cb98:	4a0e      	ldr	r2, [pc, #56]	; (800cbd4 <LoopForever+0xe>)
  movs r3, #0
 800cb9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cb9c:	e002      	b.n	800cba4 <LoopCopyDataInit>

0800cb9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cb9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cba2:	3304      	adds	r3, #4

0800cba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cba8:	d3f9      	bcc.n	800cb9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cbaa:	4a0b      	ldr	r2, [pc, #44]	; (800cbd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800cbac:	4c0b      	ldr	r4, [pc, #44]	; (800cbdc <LoopForever+0x16>)
  movs r3, #0
 800cbae:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cbb0:	e001      	b.n	800cbb6 <LoopFillZerobss>

0800cbb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cbb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cbb4:	3204      	adds	r2, #4

0800cbb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cbb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cbb8:	d3fb      	bcc.n	800cbb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800cbba:	f7ff fc91 	bl	800c4e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800cbbe:	f003 fdd7 	bl	8010770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800cbc2:	f7ff fadb 	bl	800c17c <main>

0800cbc6 <LoopForever>:

LoopForever:
    b LoopForever
 800cbc6:	e7fe      	b.n	800cbc6 <LoopForever>
  ldr   r0, =_estack
 800cbc8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800cbcc:	20000400 	.word	0x20000400
  ldr r1, =_edata
 800cbd0:	20000478 	.word	0x20000478
  ldr r2, =_sidata
 800cbd4:	08010f10 	.word	0x08010f10
  ldr r2, =_sbss
 800cbd8:	20000478 	.word	0x20000478
  ldr r4, =_ebss
 800cbdc:	20000774 	.word	0x20000774

0800cbe0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800cbe0:	e7fe      	b.n	800cbe0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>
	...

0800cbe4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cbe8:	4b07      	ldr	r3, [pc, #28]	; (800cc08 <HAL_Init+0x24>)
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	4b06      	ldr	r3, [pc, #24]	; (800cc08 <HAL_Init+0x24>)
 800cbee:	2110      	movs	r1, #16
 800cbf0:	430a      	orrs	r2, r1
 800cbf2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	f000 f809 	bl	800cc0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800cbfa:	f7ff fbbb 	bl	800c374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cbfe:	2300      	movs	r3, #0
}
 800cc00:	0018      	movs	r0, r3
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	46c0      	nop			; (mov r8, r8)
 800cc08:	40022000 	.word	0x40022000

0800cc0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cc0c:	b590      	push	{r4, r7, lr}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800cc14:	4b14      	ldr	r3, [pc, #80]	; (800cc68 <HAL_InitTick+0x5c>)
 800cc16:	681c      	ldr	r4, [r3, #0]
 800cc18:	4b14      	ldr	r3, [pc, #80]	; (800cc6c <HAL_InitTick+0x60>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	0019      	movs	r1, r3
 800cc1e:	23fa      	movs	r3, #250	; 0xfa
 800cc20:	0098      	lsls	r0, r3, #2
 800cc22:	f7fb fa6f 	bl	8008104 <__udivsi3>
 800cc26:	0003      	movs	r3, r0
 800cc28:	0019      	movs	r1, r3
 800cc2a:	0020      	movs	r0, r4
 800cc2c:	f7fb fa6a 	bl	8008104 <__udivsi3>
 800cc30:	0003      	movs	r3, r0
 800cc32:	0018      	movs	r0, r3
 800cc34:	f001 fcbb 	bl	800e5ae <HAL_SYSTICK_Config>
 800cc38:	1e03      	subs	r3, r0, #0
 800cc3a:	d001      	beq.n	800cc40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	e00f      	b.n	800cc60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2b03      	cmp	r3, #3
 800cc44:	d80b      	bhi.n	800cc5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800cc46:	6879      	ldr	r1, [r7, #4]
 800cc48:	2301      	movs	r3, #1
 800cc4a:	425b      	negs	r3, r3
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	0018      	movs	r0, r3
 800cc50:	f001 fc88 	bl	800e564 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800cc54:	4b06      	ldr	r3, [pc, #24]	; (800cc70 <HAL_InitTick+0x64>)
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	e000      	b.n	800cc60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
}
 800cc60:	0018      	movs	r0, r3
 800cc62:	46bd      	mov	sp, r7
 800cc64:	b003      	add	sp, #12
 800cc66:	bd90      	pop	{r4, r7, pc}
 800cc68:	20000408 	.word	0x20000408
 800cc6c:	20000410 	.word	0x20000410
 800cc70:	2000040c 	.word	0x2000040c

0800cc74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800cc78:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <HAL_IncTick+0x1c>)
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	001a      	movs	r2, r3
 800cc7e:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <HAL_IncTick+0x20>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	18d2      	adds	r2, r2, r3
 800cc84:	4b03      	ldr	r3, [pc, #12]	; (800cc94 <HAL_IncTick+0x20>)
 800cc86:	601a      	str	r2, [r3, #0]
}
 800cc88:	46c0      	nop			; (mov r8, r8)
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	46c0      	nop			; (mov r8, r8)
 800cc90:	20000410 	.word	0x20000410
 800cc94:	20000770 	.word	0x20000770

0800cc98 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	af00      	add	r7, sp, #0
  return uwTick;
 800cc9c:	4b02      	ldr	r3, [pc, #8]	; (800cca8 <HAL_GetTick+0x10>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
}
 800cca0:	0018      	movs	r0, r3
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	46c0      	nop			; (mov r8, r8)
 800cca8:	20000770 	.word	0x20000770

0800ccac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ccb4:	f7ff fff0 	bl	800cc98 <HAL_GetTick>
 800ccb8:	0003      	movs	r3, r0
 800ccba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	d005      	beq.n	800ccd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ccc6:	4b0a      	ldr	r3, [pc, #40]	; (800ccf0 <HAL_Delay+0x44>)
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	001a      	movs	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	189b      	adds	r3, r3, r2
 800ccd0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800ccd2:	46c0      	nop			; (mov r8, r8)
 800ccd4:	f7ff ffe0 	bl	800cc98 <HAL_GetTick>
 800ccd8:	0002      	movs	r2, r0
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	1ad3      	subs	r3, r2, r3
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d8f7      	bhi.n	800ccd4 <HAL_Delay+0x28>
  {
  }
}
 800cce4:	46c0      	nop			; (mov r8, r8)
 800cce6:	46c0      	nop			; (mov r8, r8)
 800cce8:	46bd      	mov	sp, r7
 800ccea:	b004      	add	sp, #16
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	46c0      	nop			; (mov r8, r8)
 800ccf0:	20000410 	.word	0x20000410

0800ccf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ccfc:	230f      	movs	r3, #15
 800ccfe:	18fb      	adds	r3, r7, r3
 800cd00:	2200      	movs	r2, #0
 800cd02:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800cd04:	2300      	movs	r3, #0
 800cd06:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	e125      	b.n	800cf5e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d10a      	bne.n	800cd30 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2234      	movs	r2, #52	; 0x34
 800cd24:	2100      	movs	r1, #0
 800cd26:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	0018      	movs	r0, r3
 800cd2c:	f7fe fdee 	bl	800b90c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd34:	2210      	movs	r2, #16
 800cd36:	4013      	ands	r3, r2
 800cd38:	d000      	beq.n	800cd3c <HAL_ADC_Init+0x48>
 800cd3a:	e103      	b.n	800cf44 <HAL_ADC_Init+0x250>
 800cd3c:	230f      	movs	r3, #15
 800cd3e:	18fb      	adds	r3, r7, r3
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d000      	beq.n	800cd48 <HAL_ADC_Init+0x54>
 800cd46:	e0fd      	b.n	800cf44 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	2204      	movs	r2, #4
 800cd50:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800cd52:	d000      	beq.n	800cd56 <HAL_ADC_Init+0x62>
 800cd54:	e0f6      	b.n	800cf44 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd5a:	4a83      	ldr	r2, [pc, #524]	; (800cf68 <HAL_ADC_Init+0x274>)
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	2202      	movs	r2, #2
 800cd60:	431a      	orrs	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	2203      	movs	r2, #3
 800cd6e:	4013      	ands	r3, r2
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d112      	bne.n	800cd9a <HAL_ADC_Init+0xa6>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	4013      	ands	r3, r2
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d009      	beq.n	800cd96 <HAL_ADC_Init+0xa2>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	68da      	ldr	r2, [r3, #12]
 800cd88:	2380      	movs	r3, #128	; 0x80
 800cd8a:	021b      	lsls	r3, r3, #8
 800cd8c:	401a      	ands	r2, r3
 800cd8e:	2380      	movs	r3, #128	; 0x80
 800cd90:	021b      	lsls	r3, r3, #8
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d101      	bne.n	800cd9a <HAL_ADC_Init+0xa6>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e000      	b.n	800cd9c <HAL_ADC_Init+0xa8>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d116      	bne.n	800cdce <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	2218      	movs	r2, #24
 800cda8:	4393      	bics	r3, r2
 800cdaa:	0019      	movs	r1, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	689a      	ldr	r2, [r3, #8]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	430a      	orrs	r2, r1
 800cdb6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	0899      	lsrs	r1, r3, #2
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	430a      	orrs	r2, r1
 800cdcc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68da      	ldr	r2, [r3, #12]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	4964      	ldr	r1, [pc, #400]	; (800cf6c <HAL_ADC_Init+0x278>)
 800cdda:	400a      	ands	r2, r1
 800cddc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	7e1b      	ldrb	r3, [r3, #24]
 800cde2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	7e5b      	ldrb	r3, [r3, #25]
 800cde8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800cdea:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	7e9b      	ldrb	r3, [r3, #26]
 800cdf0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800cdf2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d002      	beq.n	800ce02 <HAL_ADC_Init+0x10e>
 800cdfc:	2380      	movs	r3, #128	; 0x80
 800cdfe:	015b      	lsls	r3, r3, #5
 800ce00:	e000      	b.n	800ce04 <HAL_ADC_Init+0x110>
 800ce02:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800ce04:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800ce0a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	691b      	ldr	r3, [r3, #16]
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	d101      	bne.n	800ce18 <HAL_ADC_Init+0x124>
 800ce14:	2304      	movs	r3, #4
 800ce16:	e000      	b.n	800ce1a <HAL_ADC_Init+0x126>
 800ce18:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800ce1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2124      	movs	r1, #36	; 0x24
 800ce20:	5c5b      	ldrb	r3, [r3, r1]
 800ce22:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800ce24:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800ce26:	68ba      	ldr	r2, [r7, #8]
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	7edb      	ldrb	r3, [r3, #27]
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d115      	bne.n	800ce60 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	7e9b      	ldrb	r3, [r3, #26]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d105      	bne.n	800ce48 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	2280      	movs	r2, #128	; 0x80
 800ce40:	0252      	lsls	r2, r2, #9
 800ce42:	4313      	orrs	r3, r2
 800ce44:	60bb      	str	r3, [r7, #8]
 800ce46:	e00b      	b.n	800ce60 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4c:	2220      	movs	r2, #32
 800ce4e:	431a      	orrs	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce58:	2201      	movs	r2, #1
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	69da      	ldr	r2, [r3, #28]
 800ce64:	23c2      	movs	r3, #194	; 0xc2
 800ce66:	33ff      	adds	r3, #255	; 0xff
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d007      	beq.n	800ce7c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800ce74:	4313      	orrs	r3, r2
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	68d9      	ldr	r1, [r3, #12]
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	430a      	orrs	r2, r1
 800ce8a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce90:	2380      	movs	r3, #128	; 0x80
 800ce92:	055b      	lsls	r3, r3, #21
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d01b      	beq.n	800ced0 <HAL_ADC_Init+0x1dc>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d017      	beq.n	800ced0 <HAL_ADC_Init+0x1dc>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d013      	beq.n	800ced0 <HAL_ADC_Init+0x1dc>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceac:	2b03      	cmp	r3, #3
 800ceae:	d00f      	beq.n	800ced0 <HAL_ADC_Init+0x1dc>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb4:	2b04      	cmp	r3, #4
 800ceb6:	d00b      	beq.n	800ced0 <HAL_ADC_Init+0x1dc>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebc:	2b05      	cmp	r3, #5
 800cebe:	d007      	beq.n	800ced0 <HAL_ADC_Init+0x1dc>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec4:	2b06      	cmp	r3, #6
 800cec6:	d003      	beq.n	800ced0 <HAL_ADC_Init+0x1dc>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cecc:	2b07      	cmp	r3, #7
 800cece:	d112      	bne.n	800cef6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	695a      	ldr	r2, [r3, #20]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2107      	movs	r1, #7
 800cedc:	438a      	bics	r2, r1
 800cede:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6959      	ldr	r1, [r3, #20]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceea:	2207      	movs	r2, #7
 800ceec:	401a      	ands	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	430a      	orrs	r2, r1
 800cef4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	4a1c      	ldr	r2, [pc, #112]	; (800cf70 <HAL_ADC_Init+0x27c>)
 800cefe:	4013      	ands	r3, r2
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d10b      	bne.n	800cf1e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf10:	2203      	movs	r2, #3
 800cf12:	4393      	bics	r3, r2
 800cf14:	2201      	movs	r2, #1
 800cf16:	431a      	orrs	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800cf1c:	e01c      	b.n	800cf58 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf22:	2212      	movs	r2, #18
 800cf24:	4393      	bics	r3, r2
 800cf26:	2210      	movs	r2, #16
 800cf28:	431a      	orrs	r2, r3
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf32:	2201      	movs	r2, #1
 800cf34:	431a      	orrs	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800cf3a:	230f      	movs	r3, #15
 800cf3c:	18fb      	adds	r3, r7, r3
 800cf3e:	2201      	movs	r2, #1
 800cf40:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800cf42:	e009      	b.n	800cf58 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf48:	2210      	movs	r2, #16
 800cf4a:	431a      	orrs	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800cf50:	230f      	movs	r3, #15
 800cf52:	18fb      	adds	r3, r7, r3
 800cf54:	2201      	movs	r2, #1
 800cf56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800cf58:	230f      	movs	r3, #15
 800cf5a:	18fb      	adds	r3, r7, r3
 800cf5c:	781b      	ldrb	r3, [r3, #0]
}
 800cf5e:	0018      	movs	r0, r3
 800cf60:	46bd      	mov	sp, r7
 800cf62:	b004      	add	sp, #16
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	46c0      	nop			; (mov r8, r8)
 800cf68:	fffffefd 	.word	0xfffffefd
 800cf6c:	fffe0219 	.word	0xfffe0219
 800cf70:	833fffe7 	.word	0x833fffe7

0800cf74 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800cf74:	b590      	push	{r4, r7, lr}
 800cf76:	b087      	sub	sp, #28
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cf80:	2317      	movs	r3, #23
 800cf82:	18fb      	adds	r3, r7, r3
 800cf84:	2200      	movs	r2, #0
 800cf86:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	2204      	movs	r2, #4
 800cf90:	4013      	ands	r3, r2
 800cf92:	d15e      	bne.n	800d052 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2234      	movs	r2, #52	; 0x34
 800cf98:	5c9b      	ldrb	r3, [r3, r2]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d101      	bne.n	800cfa2 <HAL_ADC_Start_DMA+0x2e>
 800cf9e:	2302      	movs	r3, #2
 800cfa0:	e05e      	b.n	800d060 <HAL_ADC_Start_DMA+0xec>
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2234      	movs	r2, #52	; 0x34
 800cfa6:	2101      	movs	r1, #1
 800cfa8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	7e5b      	ldrb	r3, [r3, #25]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d007      	beq.n	800cfc2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800cfb2:	2317      	movs	r3, #23
 800cfb4:	18fc      	adds	r4, r7, r3
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	0018      	movs	r0, r3
 800cfba:	f000 fa3b 	bl	800d434 <ADC_Enable>
 800cfbe:	0003      	movs	r3, r0
 800cfc0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800cfc2:	2317      	movs	r3, #23
 800cfc4:	18fb      	adds	r3, r7, r3
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d146      	bne.n	800d05a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd0:	4a25      	ldr	r2, [pc, #148]	; (800d068 <HAL_ADC_Start_DMA+0xf4>)
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	2280      	movs	r2, #128	; 0x80
 800cfd6:	0052      	lsls	r2, r2, #1
 800cfd8:	431a      	orrs	r2, r3
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2234      	movs	r2, #52	; 0x34
 800cfe8:	2100      	movs	r1, #0
 800cfea:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff0:	4a1e      	ldr	r2, [pc, #120]	; (800d06c <HAL_ADC_Start_DMA+0xf8>)
 800cff2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff8:	4a1d      	ldr	r2, [pc, #116]	; (800d070 <HAL_ADC_Start_DMA+0xfc>)
 800cffa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d000:	4a1c      	ldr	r2, [pc, #112]	; (800d074 <HAL_ADC_Start_DMA+0x100>)
 800d002:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	221c      	movs	r2, #28
 800d00a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	685a      	ldr	r2, [r3, #4]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	2110      	movs	r1, #16
 800d018:	430a      	orrs	r2, r1
 800d01a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	68da      	ldr	r2, [r3, #12]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2101      	movs	r1, #1
 800d028:	430a      	orrs	r2, r1
 800d02a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	3340      	adds	r3, #64	; 0x40
 800d036:	0019      	movs	r1, r3
 800d038:	68ba      	ldr	r2, [r7, #8]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f001 fb0c 	bl	800e658 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	689a      	ldr	r2, [r3, #8]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2104      	movs	r1, #4
 800d04c:	430a      	orrs	r2, r1
 800d04e:	609a      	str	r2, [r3, #8]
 800d050:	e003      	b.n	800d05a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800d052:	2317      	movs	r3, #23
 800d054:	18fb      	adds	r3, r7, r3
 800d056:	2202      	movs	r2, #2
 800d058:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800d05a:	2317      	movs	r3, #23
 800d05c:	18fb      	adds	r3, r7, r3
 800d05e:	781b      	ldrb	r3, [r3, #0]
}
 800d060:	0018      	movs	r0, r3
 800d062:	46bd      	mov	sp, r7
 800d064:	b007      	add	sp, #28
 800d066:	bd90      	pop	{r4, r7, pc}
 800d068:	fffff0fe 	.word	0xfffff0fe
 800d06c:	0800d53d 	.word	0x0800d53d
 800d070:	0800d5f1 	.word	0x0800d5f1
 800d074:	0800d60f 	.word	0x0800d60f

0800d078 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	2204      	movs	r2, #4
 800d088:	4013      	ands	r3, r2
 800d08a:	2b04      	cmp	r3, #4
 800d08c:	d106      	bne.n	800d09c <HAL_ADC_IRQHandler+0x24>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	2204      	movs	r2, #4
 800d096:	4013      	ands	r3, r2
 800d098:	2b04      	cmp	r3, #4
 800d09a:	d00d      	beq.n	800d0b8 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2208      	movs	r2, #8
 800d0a4:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800d0a6:	2b08      	cmp	r3, #8
 800d0a8:	d14f      	bne.n	800d14a <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	2208      	movs	r2, #8
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	2b08      	cmp	r3, #8
 800d0b6:	d148      	bne.n	800d14a <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0bc:	2210      	movs	r2, #16
 800d0be:	4013      	ands	r3, r2
 800d0c0:	d106      	bne.n	800d0d0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c6:	2280      	movs	r2, #128	; 0x80
 800d0c8:	0092      	lsls	r2, r2, #2
 800d0ca:	431a      	orrs	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	68da      	ldr	r2, [r3, #12]
 800d0d6:	23c0      	movs	r3, #192	; 0xc0
 800d0d8:	011b      	lsls	r3, r3, #4
 800d0da:	4013      	ands	r3, r2
 800d0dc:	d12d      	bne.n	800d13a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d129      	bne.n	800d13a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2208      	movs	r2, #8
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	2b08      	cmp	r3, #8
 800d0f2:	d122      	bne.n	800d13a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	2204      	movs	r2, #4
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	d110      	bne.n	800d122 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	210c      	movs	r1, #12
 800d10c:	438a      	bics	r2, r1
 800d10e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d114:	4a33      	ldr	r2, [pc, #204]	; (800d1e4 <HAL_ADC_IRQHandler+0x16c>)
 800d116:	4013      	ands	r3, r2
 800d118:	2201      	movs	r2, #1
 800d11a:	431a      	orrs	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	639a      	str	r2, [r3, #56]	; 0x38
 800d120:	e00b      	b.n	800d13a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d126:	2220      	movs	r2, #32
 800d128:	431a      	orrs	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d132:	2201      	movs	r2, #1
 800d134:	431a      	orrs	r2, r3
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	0018      	movs	r0, r3
 800d13e:	f7fe ff2b 	bl	800bf98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	220c      	movs	r2, #12
 800d148:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2280      	movs	r2, #128	; 0x80
 800d152:	4013      	ands	r3, r2
 800d154:	2b80      	cmp	r3, #128	; 0x80
 800d156:	d115      	bne.n	800d184 <HAL_ADC_IRQHandler+0x10c>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	2280      	movs	r2, #128	; 0x80
 800d160:	4013      	ands	r3, r2
 800d162:	2b80      	cmp	r3, #128	; 0x80
 800d164:	d10e      	bne.n	800d184 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16a:	2280      	movs	r2, #128	; 0x80
 800d16c:	0252      	lsls	r2, r2, #9
 800d16e:	431a      	orrs	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	0018      	movs	r0, r3
 800d178:	f000 f83e 	bl	800d1f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2280      	movs	r2, #128	; 0x80
 800d182:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2210      	movs	r2, #16
 800d18c:	4013      	ands	r3, r2
 800d18e:	2b10      	cmp	r3, #16
 800d190:	d123      	bne.n	800d1da <HAL_ADC_IRQHandler+0x162>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	2210      	movs	r2, #16
 800d19a:	4013      	ands	r3, r2
 800d19c:	2b10      	cmp	r3, #16
 800d19e:	d11c      	bne.n	800d1da <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d006      	beq.n	800d1b6 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800d1b2:	2b01      	cmp	r3, #1
 800d1b4:	d10d      	bne.n	800d1d2 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ba:	2202      	movs	r2, #2
 800d1bc:	431a      	orrs	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2210      	movs	r2, #16
 800d1c8:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	0018      	movs	r0, r3
 800d1ce:	f000 f81b 	bl	800d208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2210      	movs	r2, #16
 800d1d8:	601a      	str	r2, [r3, #0]
  }

}
 800d1da:	46c0      	nop			; (mov r8, r8)
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	b002      	add	sp, #8
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	46c0      	nop			; (mov r8, r8)
 800d1e4:	fffffefe 	.word	0xfffffefe

0800d1e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800d1f0:	46c0      	nop			; (mov r8, r8)
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	b002      	add	sp, #8
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800d200:	46c0      	nop			; (mov r8, r8)
 800d202:	46bd      	mov	sp, r7
 800d204:	b002      	add	sp, #8
 800d206:	bd80      	pop	{r7, pc}

0800d208 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800d210:	46c0      	nop			; (mov r8, r8)
 800d212:	46bd      	mov	sp, r7
 800d214:	b002      	add	sp, #8
 800d216:	bd80      	pop	{r7, pc}

0800d218 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d222:	230f      	movs	r3, #15
 800d224:	18fb      	adds	r3, r7, r3
 800d226:	2200      	movs	r2, #0
 800d228:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800d22a:	2300      	movs	r3, #0
 800d22c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d232:	2380      	movs	r3, #128	; 0x80
 800d234:	055b      	lsls	r3, r3, #21
 800d236:	429a      	cmp	r2, r3
 800d238:	d011      	beq.n	800d25e <HAL_ADC_ConfigChannel+0x46>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23e:	2b01      	cmp	r3, #1
 800d240:	d00d      	beq.n	800d25e <HAL_ADC_ConfigChannel+0x46>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d246:	2b02      	cmp	r3, #2
 800d248:	d009      	beq.n	800d25e <HAL_ADC_ConfigChannel+0x46>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24e:	2b03      	cmp	r3, #3
 800d250:	d005      	beq.n	800d25e <HAL_ADC_ConfigChannel+0x46>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d256:	2b04      	cmp	r3, #4
 800d258:	d001      	beq.n	800d25e <HAL_ADC_ConfigChannel+0x46>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2234      	movs	r2, #52	; 0x34
 800d262:	5c9b      	ldrb	r3, [r3, r2]
 800d264:	2b01      	cmp	r3, #1
 800d266:	d101      	bne.n	800d26c <HAL_ADC_ConfigChannel+0x54>
 800d268:	2302      	movs	r3, #2
 800d26a:	e0d0      	b.n	800d40e <HAL_ADC_ConfigChannel+0x1f6>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2234      	movs	r2, #52	; 0x34
 800d270:	2101      	movs	r1, #1
 800d272:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	2204      	movs	r2, #4
 800d27c:	4013      	ands	r3, r2
 800d27e:	d000      	beq.n	800d282 <HAL_ADC_ConfigChannel+0x6a>
 800d280:	e0b4      	b.n	800d3ec <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	4a64      	ldr	r2, [pc, #400]	; (800d418 <HAL_ADC_ConfigChannel+0x200>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d100      	bne.n	800d28e <HAL_ADC_ConfigChannel+0x76>
 800d28c:	e082      	b.n	800d394 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2201      	movs	r2, #1
 800d29a:	409a      	lsls	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	430a      	orrs	r2, r1
 800d2a2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a8:	2380      	movs	r3, #128	; 0x80
 800d2aa:	055b      	lsls	r3, r3, #21
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d037      	beq.n	800d320 <HAL_ADC_ConfigChannel+0x108>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d033      	beq.n	800d320 <HAL_ADC_ConfigChannel+0x108>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d02f      	beq.n	800d320 <HAL_ADC_ConfigChannel+0x108>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c4:	2b03      	cmp	r3, #3
 800d2c6:	d02b      	beq.n	800d320 <HAL_ADC_ConfigChannel+0x108>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2cc:	2b04      	cmp	r3, #4
 800d2ce:	d027      	beq.n	800d320 <HAL_ADC_ConfigChannel+0x108>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d4:	2b05      	cmp	r3, #5
 800d2d6:	d023      	beq.n	800d320 <HAL_ADC_ConfigChannel+0x108>
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2dc:	2b06      	cmp	r3, #6
 800d2de:	d01f      	beq.n	800d320 <HAL_ADC_ConfigChannel+0x108>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e4:	2b07      	cmp	r3, #7
 800d2e6:	d01b      	beq.n	800d320 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	689a      	ldr	r2, [r3, #8]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	695b      	ldr	r3, [r3, #20]
 800d2f2:	2107      	movs	r1, #7
 800d2f4:	400b      	ands	r3, r1
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d012      	beq.n	800d320 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	695a      	ldr	r2, [r3, #20]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2107      	movs	r1, #7
 800d306:	438a      	bics	r2, r1
 800d308:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6959      	ldr	r1, [r3, #20]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	2207      	movs	r2, #7
 800d316:	401a      	ands	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	430a      	orrs	r2, r1
 800d31e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2b10      	cmp	r3, #16
 800d326:	d007      	beq.n	800d338 <HAL_ADC_ConfigChannel+0x120>
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b11      	cmp	r3, #17
 800d32e:	d003      	beq.n	800d338 <HAL_ADC_ConfigChannel+0x120>
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	2b12      	cmp	r3, #18
 800d336:	d163      	bne.n	800d400 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800d338:	4b38      	ldr	r3, [pc, #224]	; (800d41c <HAL_ADC_ConfigChannel+0x204>)
 800d33a:	6819      	ldr	r1, [r3, #0]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b10      	cmp	r3, #16
 800d342:	d009      	beq.n	800d358 <HAL_ADC_ConfigChannel+0x140>
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2b11      	cmp	r3, #17
 800d34a:	d102      	bne.n	800d352 <HAL_ADC_ConfigChannel+0x13a>
 800d34c:	2380      	movs	r3, #128	; 0x80
 800d34e:	03db      	lsls	r3, r3, #15
 800d350:	e004      	b.n	800d35c <HAL_ADC_ConfigChannel+0x144>
 800d352:	2380      	movs	r3, #128	; 0x80
 800d354:	045b      	lsls	r3, r3, #17
 800d356:	e001      	b.n	800d35c <HAL_ADC_ConfigChannel+0x144>
 800d358:	2380      	movs	r3, #128	; 0x80
 800d35a:	041b      	lsls	r3, r3, #16
 800d35c:	4a2f      	ldr	r2, [pc, #188]	; (800d41c <HAL_ADC_ConfigChannel+0x204>)
 800d35e:	430b      	orrs	r3, r1
 800d360:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b10      	cmp	r3, #16
 800d368:	d14a      	bne.n	800d400 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800d36a:	4b2d      	ldr	r3, [pc, #180]	; (800d420 <HAL_ADC_ConfigChannel+0x208>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	492d      	ldr	r1, [pc, #180]	; (800d424 <HAL_ADC_ConfigChannel+0x20c>)
 800d370:	0018      	movs	r0, r3
 800d372:	f7fa fec7 	bl	8008104 <__udivsi3>
 800d376:	0003      	movs	r3, r0
 800d378:	001a      	movs	r2, r3
 800d37a:	0013      	movs	r3, r2
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	189b      	adds	r3, r3, r2
 800d380:	005b      	lsls	r3, r3, #1
 800d382:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800d384:	e002      	b.n	800d38c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	3b01      	subs	r3, #1
 800d38a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d1f9      	bne.n	800d386 <HAL_ADC_ConfigChannel+0x16e>
 800d392:	e035      	b.n	800d400 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2101      	movs	r1, #1
 800d3a0:	4099      	lsls	r1, r3
 800d3a2:	000b      	movs	r3, r1
 800d3a4:	43d9      	mvns	r1, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	400a      	ands	r2, r1
 800d3ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b10      	cmp	r3, #16
 800d3b4:	d007      	beq.n	800d3c6 <HAL_ADC_ConfigChannel+0x1ae>
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b11      	cmp	r3, #17
 800d3bc:	d003      	beq.n	800d3c6 <HAL_ADC_ConfigChannel+0x1ae>
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2b12      	cmp	r3, #18
 800d3c4:	d11c      	bne.n	800d400 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800d3c6:	4b15      	ldr	r3, [pc, #84]	; (800d41c <HAL_ADC_ConfigChannel+0x204>)
 800d3c8:	6819      	ldr	r1, [r3, #0]
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2b10      	cmp	r3, #16
 800d3d0:	d007      	beq.n	800d3e2 <HAL_ADC_ConfigChannel+0x1ca>
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b11      	cmp	r3, #17
 800d3d8:	d101      	bne.n	800d3de <HAL_ADC_ConfigChannel+0x1c6>
 800d3da:	4b13      	ldr	r3, [pc, #76]	; (800d428 <HAL_ADC_ConfigChannel+0x210>)
 800d3dc:	e002      	b.n	800d3e4 <HAL_ADC_ConfigChannel+0x1cc>
 800d3de:	4b13      	ldr	r3, [pc, #76]	; (800d42c <HAL_ADC_ConfigChannel+0x214>)
 800d3e0:	e000      	b.n	800d3e4 <HAL_ADC_ConfigChannel+0x1cc>
 800d3e2:	4b13      	ldr	r3, [pc, #76]	; (800d430 <HAL_ADC_ConfigChannel+0x218>)
 800d3e4:	4a0d      	ldr	r2, [pc, #52]	; (800d41c <HAL_ADC_ConfigChannel+0x204>)
 800d3e6:	400b      	ands	r3, r1
 800d3e8:	6013      	str	r3, [r2, #0]
 800d3ea:	e009      	b.n	800d400 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f0:	2220      	movs	r2, #32
 800d3f2:	431a      	orrs	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800d3f8:	230f      	movs	r3, #15
 800d3fa:	18fb      	adds	r3, r7, r3
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2234      	movs	r2, #52	; 0x34
 800d404:	2100      	movs	r1, #0
 800d406:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800d408:	230f      	movs	r3, #15
 800d40a:	18fb      	adds	r3, r7, r3
 800d40c:	781b      	ldrb	r3, [r3, #0]
}
 800d40e:	0018      	movs	r0, r3
 800d410:	46bd      	mov	sp, r7
 800d412:	b004      	add	sp, #16
 800d414:	bd80      	pop	{r7, pc}
 800d416:	46c0      	nop			; (mov r8, r8)
 800d418:	00001001 	.word	0x00001001
 800d41c:	40012708 	.word	0x40012708
 800d420:	20000408 	.word	0x20000408
 800d424:	000f4240 	.word	0x000f4240
 800d428:	ffbfffff 	.word	0xffbfffff
 800d42c:	feffffff 	.word	0xfeffffff
 800d430:	ff7fffff 	.word	0xff7fffff

0800d434 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d43c:	2300      	movs	r3, #0
 800d43e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800d440:	2300      	movs	r3, #0
 800d442:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	2203      	movs	r2, #3
 800d44c:	4013      	ands	r3, r2
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d112      	bne.n	800d478 <ADC_Enable+0x44>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2201      	movs	r2, #1
 800d45a:	4013      	ands	r3, r2
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d009      	beq.n	800d474 <ADC_Enable+0x40>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68da      	ldr	r2, [r3, #12]
 800d466:	2380      	movs	r3, #128	; 0x80
 800d468:	021b      	lsls	r3, r3, #8
 800d46a:	401a      	ands	r2, r3
 800d46c:	2380      	movs	r3, #128	; 0x80
 800d46e:	021b      	lsls	r3, r3, #8
 800d470:	429a      	cmp	r2, r3
 800d472:	d101      	bne.n	800d478 <ADC_Enable+0x44>
 800d474:	2301      	movs	r3, #1
 800d476:	e000      	b.n	800d47a <ADC_Enable+0x46>
 800d478:	2300      	movs	r3, #0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d152      	bne.n	800d524 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	4a2a      	ldr	r2, [pc, #168]	; (800d530 <ADC_Enable+0xfc>)
 800d486:	4013      	ands	r3, r2
 800d488:	d00d      	beq.n	800d4a6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48e:	2210      	movs	r2, #16
 800d490:	431a      	orrs	r2, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d49a:	2201      	movs	r2, #1
 800d49c:	431a      	orrs	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e03f      	b.n	800d526 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	689a      	ldr	r2, [r3, #8]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2101      	movs	r1, #1
 800d4b2:	430a      	orrs	r2, r1
 800d4b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800d4b6:	4b1f      	ldr	r3, [pc, #124]	; (800d534 <ADC_Enable+0x100>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	491f      	ldr	r1, [pc, #124]	; (800d538 <ADC_Enable+0x104>)
 800d4bc:	0018      	movs	r0, r3
 800d4be:	f7fa fe21 	bl	8008104 <__udivsi3>
 800d4c2:	0003      	movs	r3, r0
 800d4c4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800d4c6:	e002      	b.n	800d4ce <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	3b01      	subs	r3, #1
 800d4cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1f9      	bne.n	800d4c8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800d4d4:	f7ff fbe0 	bl	800cc98 <HAL_GetTick>
 800d4d8:	0003      	movs	r3, r0
 800d4da:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800d4dc:	e01b      	b.n	800d516 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800d4de:	f7ff fbdb 	bl	800cc98 <HAL_GetTick>
 800d4e2:	0002      	movs	r2, r0
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	2b02      	cmp	r3, #2
 800d4ea:	d914      	bls.n	800d516 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	4013      	ands	r3, r2
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d00d      	beq.n	800d516 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4fe:	2210      	movs	r2, #16
 800d500:	431a      	orrs	r2, r3
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50a:	2201      	movs	r2, #1
 800d50c:	431a      	orrs	r2, r3
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800d512:	2301      	movs	r3, #1
 800d514:	e007      	b.n	800d526 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2201      	movs	r2, #1
 800d51e:	4013      	ands	r3, r2
 800d520:	2b01      	cmp	r3, #1
 800d522:	d1dc      	bne.n	800d4de <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800d524:	2300      	movs	r3, #0
}
 800d526:	0018      	movs	r0, r3
 800d528:	46bd      	mov	sp, r7
 800d52a:	b004      	add	sp, #16
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	46c0      	nop			; (mov r8, r8)
 800d530:	80000017 	.word	0x80000017
 800d534:	20000408 	.word	0x20000408
 800d538:	000f4240 	.word	0x000f4240

0800d53c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d548:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54e:	2250      	movs	r2, #80	; 0x50
 800d550:	4013      	ands	r3, r2
 800d552:	d140      	bne.n	800d5d6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d558:	2280      	movs	r2, #128	; 0x80
 800d55a:	0092      	lsls	r2, r2, #2
 800d55c:	431a      	orrs	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	68da      	ldr	r2, [r3, #12]
 800d568:	23c0      	movs	r3, #192	; 0xc0
 800d56a:	011b      	lsls	r3, r3, #4
 800d56c:	4013      	ands	r3, r2
 800d56e:	d12d      	bne.n	800d5cc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800d574:	2b00      	cmp	r3, #0
 800d576:	d129      	bne.n	800d5cc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2208      	movs	r2, #8
 800d580:	4013      	ands	r3, r2
 800d582:	2b08      	cmp	r3, #8
 800d584:	d122      	bne.n	800d5cc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	2204      	movs	r2, #4
 800d58e:	4013      	ands	r3, r2
 800d590:	d110      	bne.n	800d5b4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	685a      	ldr	r2, [r3, #4]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	210c      	movs	r1, #12
 800d59e:	438a      	bics	r2, r1
 800d5a0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a6:	4a11      	ldr	r2, [pc, #68]	; (800d5ec <ADC_DMAConvCplt+0xb0>)
 800d5a8:	4013      	ands	r3, r2
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	431a      	orrs	r2, r3
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	639a      	str	r2, [r3, #56]	; 0x38
 800d5b2:	e00b      	b.n	800d5cc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b8:	2220      	movs	r2, #32
 800d5ba:	431a      	orrs	r2, r3
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	431a      	orrs	r2, r3
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	0018      	movs	r0, r3
 800d5d0:	f7fe fce2 	bl	800bf98 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800d5d4:	e005      	b.n	800d5e2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	0010      	movs	r0, r2
 800d5e0:	4798      	blx	r3
}
 800d5e2:	46c0      	nop			; (mov r8, r8)
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	b004      	add	sp, #16
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	46c0      	nop			; (mov r8, r8)
 800d5ec:	fffffefe 	.word	0xfffffefe

0800d5f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	0018      	movs	r0, r3
 800d602:	f7ff fdf1 	bl	800d1e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800d606:	46c0      	nop			; (mov r8, r8)
 800d608:	46bd      	mov	sp, r7
 800d60a:	b004      	add	sp, #16
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b084      	sub	sp, #16
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d620:	2240      	movs	r2, #64	; 0x40
 800d622:	431a      	orrs	r2, r3
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d62c:	2204      	movs	r2, #4
 800d62e:	431a      	orrs	r2, r3
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	0018      	movs	r0, r3
 800d638:	f7ff fde6 	bl	800d208 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800d63c:	46c0      	nop			; (mov r8, r8)
 800d63e:	46bd      	mov	sp, r7
 800d640:	b004      	add	sp, #16
 800d642:	bd80      	pop	{r7, pc}

0800d644 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d101      	bne.n	800d656 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800d652:	2301      	movs	r3, #1
 800d654:	e0f0      	b.n	800d838 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2220      	movs	r2, #32
 800d65a:	5c9b      	ldrb	r3, [r3, r2]
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d103      	bne.n	800d66a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	0018      	movs	r0, r3
 800d666:	f7fe fa33 	bl	800bad0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2101      	movs	r1, #1
 800d676:	430a      	orrs	r2, r1
 800d678:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d67a:	f7ff fb0d 	bl	800cc98 <HAL_GetTick>
 800d67e:	0003      	movs	r3, r0
 800d680:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800d682:	e013      	b.n	800d6ac <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d684:	f7ff fb08 	bl	800cc98 <HAL_GetTick>
 800d688:	0002      	movs	r2, r0
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	2b0a      	cmp	r3, #10
 800d690:	d90c      	bls.n	800d6ac <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d696:	2280      	movs	r2, #128	; 0x80
 800d698:	0292      	lsls	r2, r2, #10
 800d69a:	431a      	orrs	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2220      	movs	r2, #32
 800d6a4:	2105      	movs	r1, #5
 800d6a6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e0c5      	b.n	800d838 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	4013      	ands	r3, r2
 800d6b6:	d0e5      	beq.n	800d684 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2102      	movs	r1, #2
 800d6c4:	438a      	bics	r2, r1
 800d6c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d6c8:	f7ff fae6 	bl	800cc98 <HAL_GetTick>
 800d6cc:	0003      	movs	r3, r0
 800d6ce:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800d6d0:	e013      	b.n	800d6fa <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800d6d2:	f7ff fae1 	bl	800cc98 <HAL_GetTick>
 800d6d6:	0002      	movs	r2, r0
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	1ad3      	subs	r3, r2, r3
 800d6dc:	2b0a      	cmp	r3, #10
 800d6de:	d90c      	bls.n	800d6fa <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e4:	2280      	movs	r2, #128	; 0x80
 800d6e6:	0292      	lsls	r2, r2, #10
 800d6e8:	431a      	orrs	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2220      	movs	r2, #32
 800d6f2:	2105      	movs	r1, #5
 800d6f4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e09e      	b.n	800d838 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	2202      	movs	r2, #2
 800d702:	4013      	ands	r3, r2
 800d704:	d1e5      	bne.n	800d6d2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	7e1b      	ldrb	r3, [r3, #24]
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d108      	bne.n	800d720 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2180      	movs	r1, #128	; 0x80
 800d71a:	430a      	orrs	r2, r1
 800d71c:	601a      	str	r2, [r3, #0]
 800d71e:	e007      	b.n	800d730 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2180      	movs	r1, #128	; 0x80
 800d72c:	438a      	bics	r2, r1
 800d72e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	7e5b      	ldrb	r3, [r3, #25]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d108      	bne.n	800d74a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2140      	movs	r1, #64	; 0x40
 800d744:	430a      	orrs	r2, r1
 800d746:	601a      	str	r2, [r3, #0]
 800d748:	e007      	b.n	800d75a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2140      	movs	r1, #64	; 0x40
 800d756:	438a      	bics	r2, r1
 800d758:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	7e9b      	ldrb	r3, [r3, #26]
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d108      	bne.n	800d774 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	681a      	ldr	r2, [r3, #0]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2120      	movs	r1, #32
 800d76e:	430a      	orrs	r2, r1
 800d770:	601a      	str	r2, [r3, #0]
 800d772:	e007      	b.n	800d784 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2120      	movs	r1, #32
 800d780:	438a      	bics	r2, r1
 800d782:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	7edb      	ldrb	r3, [r3, #27]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d108      	bne.n	800d79e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2110      	movs	r1, #16
 800d798:	438a      	bics	r2, r1
 800d79a:	601a      	str	r2, [r3, #0]
 800d79c:	e007      	b.n	800d7ae <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2110      	movs	r1, #16
 800d7aa:	430a      	orrs	r2, r1
 800d7ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7f1b      	ldrb	r3, [r3, #28]
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	d108      	bne.n	800d7c8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2108      	movs	r1, #8
 800d7c2:	430a      	orrs	r2, r1
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	e007      	b.n	800d7d8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2108      	movs	r1, #8
 800d7d4:	438a      	bics	r2, r1
 800d7d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	7f5b      	ldrb	r3, [r3, #29]
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d108      	bne.n	800d7f2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2104      	movs	r1, #4
 800d7ec:	430a      	orrs	r2, r1
 800d7ee:	601a      	str	r2, [r3, #0]
 800d7f0:	e007      	b.n	800d802 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2104      	movs	r1, #4
 800d7fe:	438a      	bics	r2, r1
 800d800:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	689a      	ldr	r2, [r3, #8]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	431a      	orrs	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	431a      	orrs	r2, r3
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	695b      	ldr	r3, [r3, #20]
 800d816:	431a      	orrs	r2, r3
 800d818:	0011      	movs	r1, r2
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	1e5a      	subs	r2, r3, #1
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	430a      	orrs	r2, r1
 800d826:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2220      	movs	r2, #32
 800d832:	2101      	movs	r1, #1
 800d834:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800d836:	2300      	movs	r3, #0
}
 800d838:	0018      	movs	r0, r3
 800d83a:	46bd      	mov	sp, r7
 800d83c:	b004      	add	sp, #16
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b086      	sub	sp, #24
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800d850:	2013      	movs	r0, #19
 800d852:	183b      	adds	r3, r7, r0
 800d854:	687a      	ldr	r2, [r7, #4]
 800d856:	2120      	movs	r1, #32
 800d858:	5c52      	ldrb	r2, [r2, r1]
 800d85a:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800d85c:	0002      	movs	r2, r0
 800d85e:	18bb      	adds	r3, r7, r2
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b01      	cmp	r3, #1
 800d864:	d004      	beq.n	800d870 <HAL_CAN_ConfigFilter+0x30>
 800d866:	18bb      	adds	r3, r7, r2
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d000      	beq.n	800d870 <HAL_CAN_ConfigFilter+0x30>
 800d86e:	e0cd      	b.n	800da0c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800d870:	697a      	ldr	r2, [r7, #20]
 800d872:	2380      	movs	r3, #128	; 0x80
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	58d3      	ldr	r3, [r2, r3]
 800d878:	2201      	movs	r2, #1
 800d87a:	431a      	orrs	r2, r3
 800d87c:	0011      	movs	r1, r2
 800d87e:	697a      	ldr	r2, [r7, #20]
 800d880:	2380      	movs	r3, #128	; 0x80
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	695b      	ldr	r3, [r3, #20]
 800d88a:	221f      	movs	r2, #31
 800d88c:	4013      	ands	r3, r2
 800d88e:	2201      	movs	r2, #1
 800d890:	409a      	lsls	r2, r3
 800d892:	0013      	movs	r3, r2
 800d894:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800d896:	697a      	ldr	r2, [r7, #20]
 800d898:	2387      	movs	r3, #135	; 0x87
 800d89a:	009b      	lsls	r3, r3, #2
 800d89c:	58d3      	ldr	r3, [r2, r3]
 800d89e:	68fa      	ldr	r2, [r7, #12]
 800d8a0:	43d2      	mvns	r2, r2
 800d8a2:	401a      	ands	r2, r3
 800d8a4:	0011      	movs	r1, r2
 800d8a6:	697a      	ldr	r2, [r7, #20]
 800d8a8:	2387      	movs	r3, #135	; 0x87
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	69db      	ldr	r3, [r3, #28]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d129      	bne.n	800d90a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800d8b6:	697a      	ldr	r2, [r7, #20]
 800d8b8:	2383      	movs	r3, #131	; 0x83
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	58d3      	ldr	r3, [r2, r3]
 800d8be:	68fa      	ldr	r2, [r7, #12]
 800d8c0:	43d2      	mvns	r2, r2
 800d8c2:	401a      	ands	r2, r3
 800d8c4:	0011      	movs	r1, r2
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	2383      	movs	r3, #131	; 0x83
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	041b      	lsls	r3, r3, #16
 800d8da:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800d8e0:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	3248      	adds	r2, #72	; 0x48
 800d8e6:	00d2      	lsls	r2, r2, #3
 800d8e8:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	041b      	lsls	r3, r3, #16
 800d8f6:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d8fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d8fe:	6979      	ldr	r1, [r7, #20]
 800d900:	3348      	adds	r3, #72	; 0x48
 800d902:	00db      	lsls	r3, r3, #3
 800d904:	18cb      	adds	r3, r1, r3
 800d906:	3304      	adds	r3, #4
 800d908:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d128      	bne.n	800d964 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	2383      	movs	r3, #131	; 0x83
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	58d2      	ldr	r2, [r2, r3]
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	431a      	orrs	r2, r3
 800d91e:	0011      	movs	r1, r2
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	2383      	movs	r3, #131	; 0x83
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	041b      	lsls	r3, r3, #16
 800d934:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800d93a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	3248      	adds	r2, #72	; 0x48
 800d940:	00d2      	lsls	r2, r2, #3
 800d942:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	041b      	lsls	r3, r3, #16
 800d950:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800d956:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800d958:	6979      	ldr	r1, [r7, #20]
 800d95a:	3348      	adds	r3, #72	; 0x48
 800d95c:	00db      	lsls	r3, r3, #3
 800d95e:	18cb      	adds	r3, r1, r3
 800d960:	3304      	adds	r3, #4
 800d962:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d10c      	bne.n	800d986 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	2381      	movs	r3, #129	; 0x81
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	58d3      	ldr	r3, [r2, r3]
 800d974:	68fa      	ldr	r2, [r7, #12]
 800d976:	43d2      	mvns	r2, r2
 800d978:	401a      	ands	r2, r3
 800d97a:	0011      	movs	r1, r2
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	2381      	movs	r3, #129	; 0x81
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	50d1      	str	r1, [r2, r3]
 800d984:	e00a      	b.n	800d99c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	2381      	movs	r3, #129	; 0x81
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	58d2      	ldr	r2, [r2, r3]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	431a      	orrs	r2, r3
 800d992:	0011      	movs	r1, r2
 800d994:	697a      	ldr	r2, [r7, #20]
 800d996:	2381      	movs	r3, #129	; 0x81
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	691b      	ldr	r3, [r3, #16]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d10c      	bne.n	800d9be <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800d9a4:	697a      	ldr	r2, [r7, #20]
 800d9a6:	2385      	movs	r3, #133	; 0x85
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	58d3      	ldr	r3, [r2, r3]
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	43d2      	mvns	r2, r2
 800d9b0:	401a      	ands	r2, r3
 800d9b2:	0011      	movs	r1, r2
 800d9b4:	697a      	ldr	r2, [r7, #20]
 800d9b6:	2385      	movs	r3, #133	; 0x85
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	50d1      	str	r1, [r2, r3]
 800d9bc:	e00a      	b.n	800d9d4 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800d9be:	697a      	ldr	r2, [r7, #20]
 800d9c0:	2385      	movs	r3, #133	; 0x85
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	58d2      	ldr	r2, [r2, r3]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	431a      	orrs	r2, r3
 800d9ca:	0011      	movs	r1, r2
 800d9cc:	697a      	ldr	r2, [r7, #20]
 800d9ce:	2385      	movs	r3, #133	; 0x85
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	6a1b      	ldr	r3, [r3, #32]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d10a      	bne.n	800d9f2 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800d9dc:	697a      	ldr	r2, [r7, #20]
 800d9de:	2387      	movs	r3, #135	; 0x87
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	58d2      	ldr	r2, [r2, r3]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	431a      	orrs	r2, r3
 800d9e8:	0011      	movs	r1, r2
 800d9ea:	697a      	ldr	r2, [r7, #20]
 800d9ec:	2387      	movs	r3, #135	; 0x87
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800d9f2:	697a      	ldr	r2, [r7, #20]
 800d9f4:	2380      	movs	r3, #128	; 0x80
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	58d3      	ldr	r3, [r2, r3]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	4393      	bics	r3, r2
 800d9fe:	0019      	movs	r1, r3
 800da00:	697a      	ldr	r2, [r7, #20]
 800da02:	2380      	movs	r3, #128	; 0x80
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	e007      	b.n	800da1c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da10:	2280      	movs	r2, #128	; 0x80
 800da12:	02d2      	lsls	r2, r2, #11
 800da14:	431a      	orrs	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800da1a:	2301      	movs	r3, #1
  }
}
 800da1c:	0018      	movs	r0, r3
 800da1e:	46bd      	mov	sp, r7
 800da20:	b006      	add	sp, #24
 800da22:	bd80      	pop	{r7, pc}

0800da24 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2220      	movs	r2, #32
 800da30:	5c9b      	ldrb	r3, [r3, r2]
 800da32:	b2db      	uxtb	r3, r3
 800da34:	2b01      	cmp	r3, #1
 800da36:	d12f      	bne.n	800da98 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2220      	movs	r2, #32
 800da3c:	2102      	movs	r1, #2
 800da3e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681a      	ldr	r2, [r3, #0]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2101      	movs	r1, #1
 800da4c:	438a      	bics	r2, r1
 800da4e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800da50:	f7ff f922 	bl	800cc98 <HAL_GetTick>
 800da54:	0003      	movs	r3, r0
 800da56:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800da58:	e013      	b.n	800da82 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800da5a:	f7ff f91d 	bl	800cc98 <HAL_GetTick>
 800da5e:	0002      	movs	r2, r0
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	1ad3      	subs	r3, r2, r3
 800da64:	2b0a      	cmp	r3, #10
 800da66:	d90c      	bls.n	800da82 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6c:	2280      	movs	r2, #128	; 0x80
 800da6e:	0292      	lsls	r2, r2, #10
 800da70:	431a      	orrs	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2220      	movs	r2, #32
 800da7a:	2105      	movs	r1, #5
 800da7c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800da7e:	2301      	movs	r3, #1
 800da80:	e012      	b.n	800daa8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	2201      	movs	r2, #1
 800da8a:	4013      	ands	r3, r2
 800da8c:	d1e5      	bne.n	800da5a <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800da94:	2300      	movs	r3, #0
 800da96:	e007      	b.n	800daa8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9c:	2280      	movs	r2, #128	; 0x80
 800da9e:	0312      	lsls	r2, r2, #12
 800daa0:	431a      	orrs	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800daa6:	2301      	movs	r3, #1
  }
}
 800daa8:	0018      	movs	r0, r3
 800daaa:	46bd      	mov	sp, r7
 800daac:	b004      	add	sp, #16
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800dab8:	2300      	movs	r3, #0
 800daba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 1000000U;
 800dabc:	4b1e      	ldr	r3, [pc, #120]	; (800db38 <HAL_CAN_WakeUp+0x88>)
 800dabe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800dac0:	2013      	movs	r0, #19
 800dac2:	183b      	adds	r3, r7, r0
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	2120      	movs	r1, #32
 800dac8:	5c52      	ldrb	r2, [r2, r1]
 800daca:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800dacc:	0002      	movs	r2, r0
 800dace:	18bb      	adds	r3, r7, r2
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d003      	beq.n	800dade <HAL_CAN_WakeUp+0x2e>
 800dad6:	18bb      	adds	r3, r7, r2
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d11f      	bne.n	800db1e <HAL_CAN_WakeUp+0x6e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2102      	movs	r1, #2
 800daea:	438a      	bics	r2, r1
 800daec:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Increment counter */
      count++;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	3301      	adds	r3, #1
 800daf2:	60fb      	str	r3, [r7, #12]

      /* Check if timeout is reached */
      if (count > timeout)
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d208      	bcs.n	800db0e <HAL_CAN_WakeUp+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db00:	2280      	movs	r2, #128	; 0x80
 800db02:	0292      	lsls	r2, r2, #10
 800db04:	431a      	orrs	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800db0a:	2301      	movs	r3, #1
 800db0c:	e00f      	b.n	800db2e <HAL_CAN_WakeUp+0x7e>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	2202      	movs	r2, #2
 800db16:	4013      	ands	r3, r2
 800db18:	d1e9      	bne.n	800daee <HAL_CAN_WakeUp+0x3e>

    /* Return function status */
    return HAL_OK;
 800db1a:	2300      	movs	r3, #0
 800db1c:	e007      	b.n	800db2e <HAL_CAN_WakeUp+0x7e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db22:	2280      	movs	r2, #128	; 0x80
 800db24:	02d2      	lsls	r2, r2, #11
 800db26:	431a      	orrs	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800db2c:	2301      	movs	r3, #1
  }
}
 800db2e:	0018      	movs	r0, r3
 800db30:	46bd      	mov	sp, r7
 800db32:	b006      	add	sp, #24
 800db34:	bd80      	pop	{r7, pc}
 800db36:	46c0      	nop			; (mov r8, r8)
 800db38:	000f4240 	.word	0x000f4240

0800db3c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b088      	sub	sp, #32
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
 800db48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800db4a:	201f      	movs	r0, #31
 800db4c:	183b      	adds	r3, r7, r0
 800db4e:	68fa      	ldr	r2, [r7, #12]
 800db50:	2120      	movs	r1, #32
 800db52:	5c52      	ldrb	r2, [r2, r1]
 800db54:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	689b      	ldr	r3, [r3, #8]
 800db5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800db5e:	183b      	adds	r3, r7, r0
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	2b01      	cmp	r3, #1
 800db64:	d004      	beq.n	800db70 <HAL_CAN_AddTxMessage+0x34>
 800db66:	183b      	adds	r3, r7, r0
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2b02      	cmp	r3, #2
 800db6c:	d000      	beq.n	800db70 <HAL_CAN_AddTxMessage+0x34>
 800db6e:	e0b7      	b.n	800dce0 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800db70:	69ba      	ldr	r2, [r7, #24]
 800db72:	2380      	movs	r3, #128	; 0x80
 800db74:	04db      	lsls	r3, r3, #19
 800db76:	4013      	ands	r3, r2
 800db78:	d10a      	bne.n	800db90 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800db7a:	69ba      	ldr	r2, [r7, #24]
 800db7c:	2380      	movs	r3, #128	; 0x80
 800db7e:	051b      	lsls	r3, r3, #20
 800db80:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800db82:	d105      	bne.n	800db90 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 800db84:	69ba      	ldr	r2, [r7, #24]
 800db86:	2380      	movs	r3, #128	; 0x80
 800db88:	055b      	lsls	r3, r3, #21
 800db8a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800db8c:	d100      	bne.n	800db90 <HAL_CAN_AddTxMessage+0x54>
 800db8e:	e09e      	b.n	800dcce <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	0e1b      	lsrs	r3, r3, #24
 800db94:	2203      	movs	r2, #3
 800db96:	4013      	ands	r3, r2
 800db98:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d908      	bls.n	800dbb2 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba4:	2280      	movs	r2, #128	; 0x80
 800dba6:	0412      	lsls	r2, r2, #16
 800dba8:	431a      	orrs	r2, r3
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	e09e      	b.n	800dcf0 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	409a      	lsls	r2, r3
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d10c      	bne.n	800dbde <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4311      	orrs	r1, r2
 800dbd4:	697a      	ldr	r2, [r7, #20]
 800dbd6:	3218      	adds	r2, #24
 800dbd8:	0112      	lsls	r2, r2, #4
 800dbda:	50d1      	str	r1, [r2, r3]
 800dbdc:	e00f      	b.n	800dbfe <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800dbe8:	431a      	orrs	r2, r3
 800dbea:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 800dbf4:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800dbf6:	697a      	ldr	r2, [r7, #20]
 800dbf8:	3218      	adds	r2, #24
 800dbfa:	0112      	lsls	r2, r2, #4
 800dbfc:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	6819      	ldr	r1, [r3, #0]
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	691a      	ldr	r2, [r3, #16]
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	3318      	adds	r3, #24
 800dc0a:	011b      	lsls	r3, r3, #4
 800dc0c:	18cb      	adds	r3, r1, r3
 800dc0e:	3304      	adds	r3, #4
 800dc10:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	7d1b      	ldrb	r3, [r3, #20]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d112      	bne.n	800dc40 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	3318      	adds	r3, #24
 800dc22:	011b      	lsls	r3, r3, #4
 800dc24:	18d3      	adds	r3, r2, r3
 800dc26:	3304      	adds	r3, #4
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6819      	ldr	r1, [r3, #0]
 800dc2e:	2380      	movs	r3, #128	; 0x80
 800dc30:	005b      	lsls	r3, r3, #1
 800dc32:	431a      	orrs	r2, r3
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	3318      	adds	r3, #24
 800dc38:	011b      	lsls	r3, r3, #4
 800dc3a:	18cb      	adds	r3, r1, r3
 800dc3c:	3304      	adds	r3, #4
 800dc3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	3307      	adds	r3, #7
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	061a      	lsls	r2, r3, #24
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	3306      	adds	r3, #6
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	041b      	lsls	r3, r3, #16
 800dc50:	431a      	orrs	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	3305      	adds	r3, #5
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	021b      	lsls	r3, r3, #8
 800dc5a:	431a      	orrs	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	0019      	movs	r1, r3
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	6818      	ldr	r0, [r3, #0]
 800dc68:	430a      	orrs	r2, r1
 800dc6a:	6979      	ldr	r1, [r7, #20]
 800dc6c:	23c6      	movs	r3, #198	; 0xc6
 800dc6e:	005b      	lsls	r3, r3, #1
 800dc70:	0109      	lsls	r1, r1, #4
 800dc72:	1841      	adds	r1, r0, r1
 800dc74:	18cb      	adds	r3, r1, r3
 800dc76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	3303      	adds	r3, #3
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	061a      	lsls	r2, r3, #24
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	3302      	adds	r3, #2
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	041b      	lsls	r3, r3, #16
 800dc88:	431a      	orrs	r2, r3
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	021b      	lsls	r3, r3, #8
 800dc92:	431a      	orrs	r2, r3
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	0019      	movs	r1, r3
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	6818      	ldr	r0, [r3, #0]
 800dc9e:	430a      	orrs	r2, r1
 800dca0:	6979      	ldr	r1, [r7, #20]
 800dca2:	23c4      	movs	r3, #196	; 0xc4
 800dca4:	005b      	lsls	r3, r3, #1
 800dca6:	0109      	lsls	r1, r1, #4
 800dca8:	1841      	adds	r1, r0, r1
 800dcaa:	18cb      	adds	r3, r1, r3
 800dcac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	697a      	ldr	r2, [r7, #20]
 800dcb4:	3218      	adds	r2, #24
 800dcb6:	0112      	lsls	r2, r2, #4
 800dcb8:	58d2      	ldr	r2, [r2, r3]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2101      	movs	r1, #1
 800dcc0:	4311      	orrs	r1, r2
 800dcc2:	697a      	ldr	r2, [r7, #20]
 800dcc4:	3218      	adds	r2, #24
 800dcc6:	0112      	lsls	r2, r2, #4
 800dcc8:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800dcca:	2300      	movs	r3, #0
 800dccc:	e010      	b.n	800dcf0 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd2:	2280      	movs	r2, #128	; 0x80
 800dcd4:	0392      	lsls	r2, r2, #14
 800dcd6:	431a      	orrs	r2, r3
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e007      	b.n	800dcf0 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce4:	2280      	movs	r2, #128	; 0x80
 800dce6:	02d2      	lsls	r2, r2, #11
 800dce8:	431a      	orrs	r2, r3
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800dcee:	2301      	movs	r3, #1
  }
}
 800dcf0:	0018      	movs	r0, r3
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	b008      	add	sp, #32
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800dd00:	2300      	movs	r3, #0
 800dd02:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800dd04:	200b      	movs	r0, #11
 800dd06:	183b      	adds	r3, r7, r0
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	2120      	movs	r1, #32
 800dd0c:	5c52      	ldrb	r2, [r2, r1]
 800dd0e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800dd10:	0002      	movs	r2, r0
 800dd12:	18bb      	adds	r3, r7, r2
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d003      	beq.n	800dd22 <HAL_CAN_GetTxMailboxesFreeLevel+0x2a>
 800dd1a:	18bb      	adds	r3, r7, r2
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	2b02      	cmp	r3, #2
 800dd20:	d11d      	bne.n	800dd5e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	689a      	ldr	r2, [r3, #8]
 800dd28:	2380      	movs	r3, #128	; 0x80
 800dd2a:	04db      	lsls	r3, r3, #19
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	d002      	beq.n	800dd36 <HAL_CAN_GetTxMailboxesFreeLevel+0x3e>
    {
      freelevel++;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	3301      	adds	r3, #1
 800dd34:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	689a      	ldr	r2, [r3, #8]
 800dd3c:	2380      	movs	r3, #128	; 0x80
 800dd3e:	051b      	lsls	r3, r3, #20
 800dd40:	4013      	ands	r3, r2
 800dd42:	d002      	beq.n	800dd4a <HAL_CAN_GetTxMailboxesFreeLevel+0x52>
    {
      freelevel++;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	3301      	adds	r3, #1
 800dd48:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	689a      	ldr	r2, [r3, #8]
 800dd50:	2380      	movs	r3, #128	; 0x80
 800dd52:	055b      	lsls	r3, r3, #21
 800dd54:	4013      	ands	r3, r2
 800dd56:	d002      	beq.n	800dd5e <HAL_CAN_GetTxMailboxesFreeLevel+0x66>
    {
      freelevel++;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
}
 800dd60:	0018      	movs	r0, r3
 800dd62:	46bd      	mov	sp, r7
 800dd64:	b004      	add	sp, #16
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
 800dd74:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800dd76:	2017      	movs	r0, #23
 800dd78:	183b      	adds	r3, r7, r0
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	2120      	movs	r1, #32
 800dd7e:	5c52      	ldrb	r2, [r2, r1]
 800dd80:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800dd82:	0002      	movs	r2, r0
 800dd84:	18bb      	adds	r3, r7, r2
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d004      	beq.n	800dd96 <HAL_CAN_GetRxMessage+0x2e>
 800dd8c:	18bb      	adds	r3, r7, r2
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	2b02      	cmp	r3, #2
 800dd92:	d000      	beq.n	800dd96 <HAL_CAN_GetRxMessage+0x2e>
 800dd94:	e0f8      	b.n	800df88 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10e      	bne.n	800ddba <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	2203      	movs	r2, #3
 800dda4:	4013      	ands	r3, r2
 800dda6:	d117      	bne.n	800ddd8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddac:	2280      	movs	r2, #128	; 0x80
 800ddae:	0392      	lsls	r2, r2, #14
 800ddb0:	431a      	orrs	r2, r3
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e0ee      	b.n	800df98 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	2203      	movs	r2, #3
 800ddc2:	4013      	ands	r3, r2
 800ddc4:	d108      	bne.n	800ddd8 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddca:	2280      	movs	r2, #128	; 0x80
 800ddcc:	0392      	lsls	r2, r2, #14
 800ddce:	431a      	orrs	r2, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e0df      	b.n	800df98 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	321b      	adds	r2, #27
 800dde0:	0112      	lsls	r2, r2, #4
 800dde2:	58d3      	ldr	r3, [r2, r3]
 800dde4:	2204      	movs	r2, #4
 800dde6:	401a      	ands	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	689b      	ldr	r3, [r3, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d10b      	bne.n	800de0c <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	68ba      	ldr	r2, [r7, #8]
 800ddfa:	321b      	adds	r2, #27
 800ddfc:	0112      	lsls	r2, r2, #4
 800ddfe:	58d3      	ldr	r3, [r2, r3]
 800de00:	0d5b      	lsrs	r3, r3, #21
 800de02:	055b      	lsls	r3, r3, #21
 800de04:	0d5a      	lsrs	r2, r3, #21
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	601a      	str	r2, [r3, #0]
 800de0a:	e00a      	b.n	800de22 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68ba      	ldr	r2, [r7, #8]
 800de12:	321b      	adds	r2, #27
 800de14:	0112      	lsls	r2, r2, #4
 800de16:	58d3      	ldr	r3, [r2, r3]
 800de18:	08db      	lsrs	r3, r3, #3
 800de1a:	00db      	lsls	r3, r3, #3
 800de1c:	08da      	lsrs	r2, r3, #3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	68ba      	ldr	r2, [r7, #8]
 800de28:	321b      	adds	r2, #27
 800de2a:	0112      	lsls	r2, r2, #4
 800de2c:	58d3      	ldr	r3, [r2, r3]
 800de2e:	2202      	movs	r2, #2
 800de30:	401a      	ands	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	331b      	adds	r3, #27
 800de3e:	011b      	lsls	r3, r3, #4
 800de40:	18d3      	adds	r3, r2, r3
 800de42:	3304      	adds	r3, #4
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	220f      	movs	r2, #15
 800de48:	401a      	ands	r2, r3
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681a      	ldr	r2, [r3, #0]
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	331b      	adds	r3, #27
 800de56:	011b      	lsls	r3, r3, #4
 800de58:	18d3      	adds	r3, r2, r3
 800de5a:	3304      	adds	r3, #4
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	0a1b      	lsrs	r3, r3, #8
 800de60:	22ff      	movs	r2, #255	; 0xff
 800de62:	401a      	ands	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	331b      	adds	r3, #27
 800de70:	011b      	lsls	r3, r3, #4
 800de72:	18d3      	adds	r3, r2, r3
 800de74:	3304      	adds	r3, #4
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	0c1b      	lsrs	r3, r3, #16
 800de7a:	041b      	lsls	r3, r3, #16
 800de7c:	0c1a      	lsrs	r2, r3, #16
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6819      	ldr	r1, [r3, #0]
 800de86:	68ba      	ldr	r2, [r7, #8]
 800de88:	23dc      	movs	r3, #220	; 0xdc
 800de8a:	005b      	lsls	r3, r3, #1
 800de8c:	0112      	lsls	r2, r2, #4
 800de8e:	188a      	adds	r2, r1, r2
 800de90:	18d3      	adds	r3, r2, r3
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	b2da      	uxtb	r2, r3
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	6819      	ldr	r1, [r3, #0]
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	23dc      	movs	r3, #220	; 0xdc
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	0112      	lsls	r2, r2, #4
 800dea6:	188a      	adds	r2, r1, r2
 800dea8:	18d3      	adds	r3, r2, r3
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	0a1a      	lsrs	r2, r3, #8
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	3301      	adds	r3, #1
 800deb2:	b2d2      	uxtb	r2, r2
 800deb4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6819      	ldr	r1, [r3, #0]
 800deba:	68ba      	ldr	r2, [r7, #8]
 800debc:	23dc      	movs	r3, #220	; 0xdc
 800debe:	005b      	lsls	r3, r3, #1
 800dec0:	0112      	lsls	r2, r2, #4
 800dec2:	188a      	adds	r2, r1, r2
 800dec4:	18d3      	adds	r3, r2, r3
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	0c1a      	lsrs	r2, r3, #16
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	3302      	adds	r3, #2
 800dece:	b2d2      	uxtb	r2, r2
 800ded0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6819      	ldr	r1, [r3, #0]
 800ded6:	68ba      	ldr	r2, [r7, #8]
 800ded8:	23dc      	movs	r3, #220	; 0xdc
 800deda:	005b      	lsls	r3, r3, #1
 800dedc:	0112      	lsls	r2, r2, #4
 800dede:	188a      	adds	r2, r1, r2
 800dee0:	18d3      	adds	r3, r2, r3
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	0e1a      	lsrs	r2, r3, #24
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	3303      	adds	r3, #3
 800deea:	b2d2      	uxtb	r2, r2
 800deec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6819      	ldr	r1, [r3, #0]
 800def2:	68ba      	ldr	r2, [r7, #8]
 800def4:	23de      	movs	r3, #222	; 0xde
 800def6:	005b      	lsls	r3, r3, #1
 800def8:	0112      	lsls	r2, r2, #4
 800defa:	188a      	adds	r2, r1, r2
 800defc:	18d3      	adds	r3, r2, r3
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	3304      	adds	r3, #4
 800df04:	b2d2      	uxtb	r2, r2
 800df06:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	6819      	ldr	r1, [r3, #0]
 800df0c:	68ba      	ldr	r2, [r7, #8]
 800df0e:	23de      	movs	r3, #222	; 0xde
 800df10:	005b      	lsls	r3, r3, #1
 800df12:	0112      	lsls	r2, r2, #4
 800df14:	188a      	adds	r2, r1, r2
 800df16:	18d3      	adds	r3, r2, r3
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	0a1a      	lsrs	r2, r3, #8
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	3305      	adds	r3, #5
 800df20:	b2d2      	uxtb	r2, r2
 800df22:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6819      	ldr	r1, [r3, #0]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	23de      	movs	r3, #222	; 0xde
 800df2c:	005b      	lsls	r3, r3, #1
 800df2e:	0112      	lsls	r2, r2, #4
 800df30:	188a      	adds	r2, r1, r2
 800df32:	18d3      	adds	r3, r2, r3
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	0c1a      	lsrs	r2, r3, #16
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	3306      	adds	r3, #6
 800df3c:	b2d2      	uxtb	r2, r2
 800df3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	6819      	ldr	r1, [r3, #0]
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	23de      	movs	r3, #222	; 0xde
 800df48:	005b      	lsls	r3, r3, #1
 800df4a:	0112      	lsls	r2, r2, #4
 800df4c:	188a      	adds	r2, r1, r2
 800df4e:	18d3      	adds	r3, r2, r3
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	0e1a      	lsrs	r2, r3, #24
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	3307      	adds	r3, #7
 800df58:	b2d2      	uxtb	r2, r2
 800df5a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d108      	bne.n	800df74 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	68da      	ldr	r2, [r3, #12]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2120      	movs	r1, #32
 800df6e:	430a      	orrs	r2, r1
 800df70:	60da      	str	r2, [r3, #12]
 800df72:	e007      	b.n	800df84 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	691a      	ldr	r2, [r3, #16]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	2120      	movs	r1, #32
 800df80:	430a      	orrs	r2, r1
 800df82:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800df84:	2300      	movs	r3, #0
 800df86:	e007      	b.n	800df98 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df8c:	2280      	movs	r2, #128	; 0x80
 800df8e:	02d2      	lsls	r2, r2, #11
 800df90:	431a      	orrs	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800df96:	2301      	movs	r3, #1
  }
}
 800df98:	0018      	movs	r0, r3
 800df9a:	46bd      	mov	sp, r7
 800df9c:	b006      	add	sp, #24
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800dfaa:	200f      	movs	r0, #15
 800dfac:	183b      	adds	r3, r7, r0
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	2120      	movs	r1, #32
 800dfb2:	5c52      	ldrb	r2, [r2, r1]
 800dfb4:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800dfb6:	0002      	movs	r2, r0
 800dfb8:	18bb      	adds	r3, r7, r2
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d003      	beq.n	800dfc8 <HAL_CAN_ActivateNotification+0x28>
 800dfc0:	18bb      	adds	r3, r7, r2
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	2b02      	cmp	r3, #2
 800dfc6:	d109      	bne.n	800dfdc <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	6959      	ldr	r1, [r3, #20]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	683a      	ldr	r2, [r7, #0]
 800dfd4:	430a      	orrs	r2, r1
 800dfd6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	e007      	b.n	800dfec <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe0:	2280      	movs	r2, #128	; 0x80
 800dfe2:	02d2      	lsls	r2, r2, #11
 800dfe4:	431a      	orrs	r2, r3
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800dfea:	2301      	movs	r3, #1
  }
}
 800dfec:	0018      	movs	r0, r3
 800dfee:	46bd      	mov	sp, r7
 800dff0:	b004      	add	sp, #16
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b08a      	sub	sp, #40	; 0x28
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800dffc:	2300      	movs	r3, #0
 800dffe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	695b      	ldr	r3, [r3, #20]
 800e006:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	691b      	ldr	r3, [r3, #16]
 800e026:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	699b      	ldr	r3, [r3, #24]
 800e02e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800e030:	6a3b      	ldr	r3, [r7, #32]
 800e032:	2201      	movs	r2, #1
 800e034:	4013      	ands	r3, r2
 800e036:	d100      	bne.n	800e03a <HAL_CAN_IRQHandler+0x46>
 800e038:	e084      	b.n	800e144 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	2201      	movs	r2, #1
 800e03e:	4013      	ands	r3, r2
 800e040:	d024      	beq.n	800e08c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2201      	movs	r2, #1
 800e048:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	2202      	movs	r2, #2
 800e04e:	4013      	ands	r3, r2
 800e050:	d004      	beq.n	800e05c <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	0018      	movs	r0, r3
 800e056:	f000 f981 	bl	800e35c <HAL_CAN_TxMailbox0CompleteCallback>
 800e05a:	e017      	b.n	800e08c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800e05c:	69bb      	ldr	r3, [r7, #24]
 800e05e:	2204      	movs	r2, #4
 800e060:	4013      	ands	r3, r2
 800e062:	d005      	beq.n	800e070 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800e064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e066:	2280      	movs	r2, #128	; 0x80
 800e068:	0112      	lsls	r2, r2, #4
 800e06a:	4313      	orrs	r3, r2
 800e06c:	627b      	str	r3, [r7, #36]	; 0x24
 800e06e:	e00d      	b.n	800e08c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	2208      	movs	r2, #8
 800e074:	4013      	ands	r3, r2
 800e076:	d005      	beq.n	800e084 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800e078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07a:	2280      	movs	r2, #128	; 0x80
 800e07c:	0152      	lsls	r2, r2, #5
 800e07e:	4313      	orrs	r3, r2
 800e080:	627b      	str	r3, [r7, #36]	; 0x24
 800e082:	e003      	b.n	800e08c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	0018      	movs	r0, r3
 800e088:	f000 f980 	bl	800e38c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800e08c:	69ba      	ldr	r2, [r7, #24]
 800e08e:	2380      	movs	r3, #128	; 0x80
 800e090:	005b      	lsls	r3, r3, #1
 800e092:	4013      	ands	r3, r2
 800e094:	d028      	beq.n	800e0e8 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2280      	movs	r2, #128	; 0x80
 800e09c:	0052      	lsls	r2, r2, #1
 800e09e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800e0a0:	69ba      	ldr	r2, [r7, #24]
 800e0a2:	2380      	movs	r3, #128	; 0x80
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	4013      	ands	r3, r2
 800e0a8:	d004      	beq.n	800e0b4 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	0018      	movs	r0, r3
 800e0ae:	f000 f95d 	bl	800e36c <HAL_CAN_TxMailbox1CompleteCallback>
 800e0b2:	e019      	b.n	800e0e8 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800e0b4:	69ba      	ldr	r2, [r7, #24]
 800e0b6:	2380      	movs	r3, #128	; 0x80
 800e0b8:	00db      	lsls	r3, r3, #3
 800e0ba:	4013      	ands	r3, r2
 800e0bc:	d005      	beq.n	800e0ca <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800e0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c0:	2280      	movs	r2, #128	; 0x80
 800e0c2:	0192      	lsls	r2, r2, #6
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e0c8:	e00e      	b.n	800e0e8 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800e0ca:	69ba      	ldr	r2, [r7, #24]
 800e0cc:	2380      	movs	r3, #128	; 0x80
 800e0ce:	011b      	lsls	r3, r3, #4
 800e0d0:	4013      	ands	r3, r2
 800e0d2:	d005      	beq.n	800e0e0 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	2280      	movs	r2, #128	; 0x80
 800e0d8:	01d2      	lsls	r2, r2, #7
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	627b      	str	r3, [r7, #36]	; 0x24
 800e0de:	e003      	b.n	800e0e8 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	0018      	movs	r0, r3
 800e0e4:	f000 f95a 	bl	800e39c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800e0e8:	69ba      	ldr	r2, [r7, #24]
 800e0ea:	2380      	movs	r3, #128	; 0x80
 800e0ec:	025b      	lsls	r3, r3, #9
 800e0ee:	4013      	ands	r3, r2
 800e0f0:	d028      	beq.n	800e144 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2280      	movs	r2, #128	; 0x80
 800e0f8:	0252      	lsls	r2, r2, #9
 800e0fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800e0fc:	69ba      	ldr	r2, [r7, #24]
 800e0fe:	2380      	movs	r3, #128	; 0x80
 800e100:	029b      	lsls	r3, r3, #10
 800e102:	4013      	ands	r3, r2
 800e104:	d004      	beq.n	800e110 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	0018      	movs	r0, r3
 800e10a:	f000 f937 	bl	800e37c <HAL_CAN_TxMailbox2CompleteCallback>
 800e10e:	e019      	b.n	800e144 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800e110:	69ba      	ldr	r2, [r7, #24]
 800e112:	2380      	movs	r3, #128	; 0x80
 800e114:	02db      	lsls	r3, r3, #11
 800e116:	4013      	ands	r3, r2
 800e118:	d005      	beq.n	800e126 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800e11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11c:	2280      	movs	r2, #128	; 0x80
 800e11e:	0212      	lsls	r2, r2, #8
 800e120:	4313      	orrs	r3, r2
 800e122:	627b      	str	r3, [r7, #36]	; 0x24
 800e124:	e00e      	b.n	800e144 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800e126:	69ba      	ldr	r2, [r7, #24]
 800e128:	2380      	movs	r3, #128	; 0x80
 800e12a:	031b      	lsls	r3, r3, #12
 800e12c:	4013      	ands	r3, r2
 800e12e:	d005      	beq.n	800e13c <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800e130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e132:	2280      	movs	r2, #128	; 0x80
 800e134:	0252      	lsls	r2, r2, #9
 800e136:	4313      	orrs	r3, r2
 800e138:	627b      	str	r3, [r7, #36]	; 0x24
 800e13a:	e003      	b.n	800e144 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	0018      	movs	r0, r3
 800e140:	f000 f934 	bl	800e3ac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800e144:	6a3b      	ldr	r3, [r7, #32]
 800e146:	2208      	movs	r2, #8
 800e148:	4013      	ands	r3, r2
 800e14a:	d00c      	beq.n	800e166 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	2210      	movs	r2, #16
 800e150:	4013      	ands	r3, r2
 800e152:	d008      	beq.n	800e166 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800e154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e156:	2280      	movs	r2, #128	; 0x80
 800e158:	0092      	lsls	r2, r2, #2
 800e15a:	4313      	orrs	r3, r2
 800e15c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2210      	movs	r2, #16
 800e164:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800e166:	6a3b      	ldr	r3, [r7, #32]
 800e168:	2204      	movs	r2, #4
 800e16a:	4013      	ands	r3, r2
 800e16c:	d00b      	beq.n	800e186 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	2208      	movs	r2, #8
 800e172:	4013      	ands	r3, r2
 800e174:	d007      	beq.n	800e186 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2208      	movs	r2, #8
 800e17c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	0018      	movs	r0, r3
 800e182:	f000 f91b 	bl	800e3bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800e186:	6a3b      	ldr	r3, [r7, #32]
 800e188:	2202      	movs	r2, #2
 800e18a:	4013      	ands	r3, r2
 800e18c:	d009      	beq.n	800e1a2 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	68db      	ldr	r3, [r3, #12]
 800e194:	2203      	movs	r2, #3
 800e196:	4013      	ands	r3, r2
 800e198:	d003      	beq.n	800e1a2 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	0018      	movs	r0, r3
 800e19e:	f7fd f9a7 	bl	800b4f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800e1a2:	6a3b      	ldr	r3, [r7, #32]
 800e1a4:	2240      	movs	r2, #64	; 0x40
 800e1a6:	4013      	ands	r3, r2
 800e1a8:	d00c      	beq.n	800e1c4 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	2210      	movs	r2, #16
 800e1ae:	4013      	ands	r3, r2
 800e1b0:	d008      	beq.n	800e1c4 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800e1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b4:	2280      	movs	r2, #128	; 0x80
 800e1b6:	00d2      	lsls	r2, r2, #3
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2210      	movs	r2, #16
 800e1c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800e1c4:	6a3b      	ldr	r3, [r7, #32]
 800e1c6:	2220      	movs	r2, #32
 800e1c8:	4013      	ands	r3, r2
 800e1ca:	d00b      	beq.n	800e1e4 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	2208      	movs	r2, #8
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	d007      	beq.n	800e1e4 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2208      	movs	r2, #8
 800e1da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	0018      	movs	r0, r3
 800e1e0:	f000 f8f4 	bl	800e3cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800e1e4:	6a3b      	ldr	r3, [r7, #32]
 800e1e6:	2210      	movs	r2, #16
 800e1e8:	4013      	ands	r3, r2
 800e1ea:	d009      	beq.n	800e200 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	2203      	movs	r2, #3
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	d003      	beq.n	800e200 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	0018      	movs	r0, r3
 800e1fc:	f7fd f98a 	bl	800b514 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800e200:	6a3a      	ldr	r2, [r7, #32]
 800e202:	2380      	movs	r3, #128	; 0x80
 800e204:	029b      	lsls	r3, r3, #10
 800e206:	4013      	ands	r3, r2
 800e208:	d00b      	beq.n	800e222 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800e20a:	69fb      	ldr	r3, [r7, #28]
 800e20c:	2210      	movs	r2, #16
 800e20e:	4013      	ands	r3, r2
 800e210:	d007      	beq.n	800e222 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2210      	movs	r2, #16
 800e218:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	0018      	movs	r0, r3
 800e21e:	f000 f8dd 	bl	800e3dc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800e222:	6a3a      	ldr	r2, [r7, #32]
 800e224:	2380      	movs	r3, #128	; 0x80
 800e226:	025b      	lsls	r3, r3, #9
 800e228:	4013      	ands	r3, r2
 800e22a:	d00b      	beq.n	800e244 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	2208      	movs	r2, #8
 800e230:	4013      	ands	r3, r2
 800e232:	d007      	beq.n	800e244 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2208      	movs	r2, #8
 800e23a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	0018      	movs	r0, r3
 800e240:	f000 f8d4 	bl	800e3ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800e244:	6a3a      	ldr	r2, [r7, #32]
 800e246:	2380      	movs	r3, #128	; 0x80
 800e248:	021b      	lsls	r3, r3, #8
 800e24a:	4013      	ands	r3, r2
 800e24c:	d100      	bne.n	800e250 <HAL_CAN_IRQHandler+0x25c>
 800e24e:	e074      	b.n	800e33a <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	2204      	movs	r2, #4
 800e254:	4013      	ands	r3, r2
 800e256:	d100      	bne.n	800e25a <HAL_CAN_IRQHandler+0x266>
 800e258:	e06b      	b.n	800e332 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800e25a:	6a3a      	ldr	r2, [r7, #32]
 800e25c:	2380      	movs	r3, #128	; 0x80
 800e25e:	005b      	lsls	r3, r3, #1
 800e260:	4013      	ands	r3, r2
 800e262:	d007      	beq.n	800e274 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2201      	movs	r2, #1
 800e268:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800e26a:	d003      	beq.n	800e274 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	2201      	movs	r2, #1
 800e270:	4313      	orrs	r3, r2
 800e272:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800e274:	6a3a      	ldr	r2, [r7, #32]
 800e276:	2380      	movs	r3, #128	; 0x80
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	4013      	ands	r3, r2
 800e27c:	d007      	beq.n	800e28e <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2202      	movs	r2, #2
 800e282:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800e284:	d003      	beq.n	800e28e <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e288:	2202      	movs	r2, #2
 800e28a:	4313      	orrs	r3, r2
 800e28c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800e28e:	6a3a      	ldr	r2, [r7, #32]
 800e290:	2380      	movs	r3, #128	; 0x80
 800e292:	00db      	lsls	r3, r3, #3
 800e294:	4013      	ands	r3, r2
 800e296:	d007      	beq.n	800e2a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2204      	movs	r2, #4
 800e29c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800e29e:	d003      	beq.n	800e2a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	2204      	movs	r2, #4
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800e2a8:	6a3a      	ldr	r2, [r7, #32]
 800e2aa:	2380      	movs	r3, #128	; 0x80
 800e2ac:	011b      	lsls	r3, r3, #4
 800e2ae:	4013      	ands	r3, r2
 800e2b0:	d03f      	beq.n	800e332 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2270      	movs	r2, #112	; 0x70
 800e2b6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800e2b8:	d03b      	beq.n	800e332 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2270      	movs	r2, #112	; 0x70
 800e2be:	4013      	ands	r3, r2
 800e2c0:	2b60      	cmp	r3, #96	; 0x60
 800e2c2:	d027      	beq.n	800e314 <HAL_CAN_IRQHandler+0x320>
 800e2c4:	d82c      	bhi.n	800e320 <HAL_CAN_IRQHandler+0x32c>
 800e2c6:	2b50      	cmp	r3, #80	; 0x50
 800e2c8:	d01f      	beq.n	800e30a <HAL_CAN_IRQHandler+0x316>
 800e2ca:	d829      	bhi.n	800e320 <HAL_CAN_IRQHandler+0x32c>
 800e2cc:	2b40      	cmp	r3, #64	; 0x40
 800e2ce:	d017      	beq.n	800e300 <HAL_CAN_IRQHandler+0x30c>
 800e2d0:	d826      	bhi.n	800e320 <HAL_CAN_IRQHandler+0x32c>
 800e2d2:	2b30      	cmp	r3, #48	; 0x30
 800e2d4:	d00f      	beq.n	800e2f6 <HAL_CAN_IRQHandler+0x302>
 800e2d6:	d823      	bhi.n	800e320 <HAL_CAN_IRQHandler+0x32c>
 800e2d8:	2b10      	cmp	r3, #16
 800e2da:	d002      	beq.n	800e2e2 <HAL_CAN_IRQHandler+0x2ee>
 800e2dc:	2b20      	cmp	r3, #32
 800e2de:	d005      	beq.n	800e2ec <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800e2e0:	e01e      	b.n	800e320 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800e2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e4:	2208      	movs	r2, #8
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e2ea:	e01a      	b.n	800e322 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800e2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ee:	2210      	movs	r2, #16
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e2f4:	e015      	b.n	800e322 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800e2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f8:	2220      	movs	r2, #32
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e2fe:	e010      	b.n	800e322 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800e300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e302:	2240      	movs	r2, #64	; 0x40
 800e304:	4313      	orrs	r3, r2
 800e306:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e308:	e00b      	b.n	800e322 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800e30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30c:	2280      	movs	r2, #128	; 0x80
 800e30e:	4313      	orrs	r3, r2
 800e310:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e312:	e006      	b.n	800e322 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800e314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e316:	2280      	movs	r2, #128	; 0x80
 800e318:	0052      	lsls	r2, r2, #1
 800e31a:	4313      	orrs	r3, r2
 800e31c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800e31e:	e000      	b.n	800e322 <HAL_CAN_IRQHandler+0x32e>
            break;
 800e320:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	699a      	ldr	r2, [r3, #24]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2170      	movs	r1, #112	; 0x70
 800e32e:	438a      	bics	r2, r1
 800e330:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2204      	movs	r2, #4
 800e338:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800e33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d009      	beq.n	800e354 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e346:	431a      	orrs	r2, r3
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	0018      	movs	r0, r3
 800e350:	f000 f854 	bl	800e3fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800e354:	46c0      	nop			; (mov r8, r8)
 800e356:	46bd      	mov	sp, r7
 800e358:	b00a      	add	sp, #40	; 0x28
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800e364:	46c0      	nop			; (mov r8, r8)
 800e366:	46bd      	mov	sp, r7
 800e368:	b002      	add	sp, #8
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800e374:	46c0      	nop			; (mov r8, r8)
 800e376:	46bd      	mov	sp, r7
 800e378:	b002      	add	sp, #8
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800e384:	46c0      	nop			; (mov r8, r8)
 800e386:	46bd      	mov	sp, r7
 800e388:	b002      	add	sp, #8
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800e394:	46c0      	nop			; (mov r8, r8)
 800e396:	46bd      	mov	sp, r7
 800e398:	b002      	add	sp, #8
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800e3a4:	46c0      	nop			; (mov r8, r8)
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	b002      	add	sp, #8
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800e3b4:	46c0      	nop			; (mov r8, r8)
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	b002      	add	sp, #8
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800e3c4:	46c0      	nop			; (mov r8, r8)
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	b002      	add	sp, #8
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800e3d4:	46c0      	nop			; (mov r8, r8)
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	b002      	add	sp, #8
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800e3e4:	46c0      	nop			; (mov r8, r8)
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	b002      	add	sp, #8
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800e3f4:	46c0      	nop			; (mov r8, r8)
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	b002      	add	sp, #8
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b082      	sub	sp, #8
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800e404:	46c0      	nop			; (mov r8, r8)
 800e406:	46bd      	mov	sp, r7
 800e408:	b002      	add	sp, #8
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	0002      	movs	r2, r0
 800e414:	1dfb      	adds	r3, r7, #7
 800e416:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e418:	1dfb      	adds	r3, r7, #7
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	2b7f      	cmp	r3, #127	; 0x7f
 800e41e:	d809      	bhi.n	800e434 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e420:	1dfb      	adds	r3, r7, #7
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	001a      	movs	r2, r3
 800e426:	231f      	movs	r3, #31
 800e428:	401a      	ands	r2, r3
 800e42a:	4b04      	ldr	r3, [pc, #16]	; (800e43c <__NVIC_EnableIRQ+0x30>)
 800e42c:	2101      	movs	r1, #1
 800e42e:	4091      	lsls	r1, r2
 800e430:	000a      	movs	r2, r1
 800e432:	601a      	str	r2, [r3, #0]
  }
}
 800e434:	46c0      	nop			; (mov r8, r8)
 800e436:	46bd      	mov	sp, r7
 800e438:	b002      	add	sp, #8
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	e000e100 	.word	0xe000e100

0800e440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e440:	b590      	push	{r4, r7, lr}
 800e442:	b083      	sub	sp, #12
 800e444:	af00      	add	r7, sp, #0
 800e446:	0002      	movs	r2, r0
 800e448:	6039      	str	r1, [r7, #0]
 800e44a:	1dfb      	adds	r3, r7, #7
 800e44c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e44e:	1dfb      	adds	r3, r7, #7
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	2b7f      	cmp	r3, #127	; 0x7f
 800e454:	d828      	bhi.n	800e4a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e456:	4a2f      	ldr	r2, [pc, #188]	; (800e514 <__NVIC_SetPriority+0xd4>)
 800e458:	1dfb      	adds	r3, r7, #7
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	b25b      	sxtb	r3, r3
 800e45e:	089b      	lsrs	r3, r3, #2
 800e460:	33c0      	adds	r3, #192	; 0xc0
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	589b      	ldr	r3, [r3, r2]
 800e466:	1dfa      	adds	r2, r7, #7
 800e468:	7812      	ldrb	r2, [r2, #0]
 800e46a:	0011      	movs	r1, r2
 800e46c:	2203      	movs	r2, #3
 800e46e:	400a      	ands	r2, r1
 800e470:	00d2      	lsls	r2, r2, #3
 800e472:	21ff      	movs	r1, #255	; 0xff
 800e474:	4091      	lsls	r1, r2
 800e476:	000a      	movs	r2, r1
 800e478:	43d2      	mvns	r2, r2
 800e47a:	401a      	ands	r2, r3
 800e47c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	019b      	lsls	r3, r3, #6
 800e482:	22ff      	movs	r2, #255	; 0xff
 800e484:	401a      	ands	r2, r3
 800e486:	1dfb      	adds	r3, r7, #7
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	0018      	movs	r0, r3
 800e48c:	2303      	movs	r3, #3
 800e48e:	4003      	ands	r3, r0
 800e490:	00db      	lsls	r3, r3, #3
 800e492:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e494:	481f      	ldr	r0, [pc, #124]	; (800e514 <__NVIC_SetPriority+0xd4>)
 800e496:	1dfb      	adds	r3, r7, #7
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	b25b      	sxtb	r3, r3
 800e49c:	089b      	lsrs	r3, r3, #2
 800e49e:	430a      	orrs	r2, r1
 800e4a0:	33c0      	adds	r3, #192	; 0xc0
 800e4a2:	009b      	lsls	r3, r3, #2
 800e4a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800e4a6:	e031      	b.n	800e50c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e4a8:	4a1b      	ldr	r2, [pc, #108]	; (800e518 <__NVIC_SetPriority+0xd8>)
 800e4aa:	1dfb      	adds	r3, r7, #7
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	0019      	movs	r1, r3
 800e4b0:	230f      	movs	r3, #15
 800e4b2:	400b      	ands	r3, r1
 800e4b4:	3b08      	subs	r3, #8
 800e4b6:	089b      	lsrs	r3, r3, #2
 800e4b8:	3306      	adds	r3, #6
 800e4ba:	009b      	lsls	r3, r3, #2
 800e4bc:	18d3      	adds	r3, r2, r3
 800e4be:	3304      	adds	r3, #4
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	1dfa      	adds	r2, r7, #7
 800e4c4:	7812      	ldrb	r2, [r2, #0]
 800e4c6:	0011      	movs	r1, r2
 800e4c8:	2203      	movs	r2, #3
 800e4ca:	400a      	ands	r2, r1
 800e4cc:	00d2      	lsls	r2, r2, #3
 800e4ce:	21ff      	movs	r1, #255	; 0xff
 800e4d0:	4091      	lsls	r1, r2
 800e4d2:	000a      	movs	r2, r1
 800e4d4:	43d2      	mvns	r2, r2
 800e4d6:	401a      	ands	r2, r3
 800e4d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	019b      	lsls	r3, r3, #6
 800e4de:	22ff      	movs	r2, #255	; 0xff
 800e4e0:	401a      	ands	r2, r3
 800e4e2:	1dfb      	adds	r3, r7, #7
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	0018      	movs	r0, r3
 800e4e8:	2303      	movs	r3, #3
 800e4ea:	4003      	ands	r3, r0
 800e4ec:	00db      	lsls	r3, r3, #3
 800e4ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e4f0:	4809      	ldr	r0, [pc, #36]	; (800e518 <__NVIC_SetPriority+0xd8>)
 800e4f2:	1dfb      	adds	r3, r7, #7
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	001c      	movs	r4, r3
 800e4f8:	230f      	movs	r3, #15
 800e4fa:	4023      	ands	r3, r4
 800e4fc:	3b08      	subs	r3, #8
 800e4fe:	089b      	lsrs	r3, r3, #2
 800e500:	430a      	orrs	r2, r1
 800e502:	3306      	adds	r3, #6
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	18c3      	adds	r3, r0, r3
 800e508:	3304      	adds	r3, #4
 800e50a:	601a      	str	r2, [r3, #0]
}
 800e50c:	46c0      	nop			; (mov r8, r8)
 800e50e:	46bd      	mov	sp, r7
 800e510:	b003      	add	sp, #12
 800e512:	bd90      	pop	{r4, r7, pc}
 800e514:	e000e100 	.word	0xe000e100
 800e518:	e000ed00 	.word	0xe000ed00

0800e51c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	1e5a      	subs	r2, r3, #1
 800e528:	2380      	movs	r3, #128	; 0x80
 800e52a:	045b      	lsls	r3, r3, #17
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d301      	bcc.n	800e534 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e530:	2301      	movs	r3, #1
 800e532:	e010      	b.n	800e556 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e534:	4b0a      	ldr	r3, [pc, #40]	; (800e560 <SysTick_Config+0x44>)
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	3a01      	subs	r2, #1
 800e53a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e53c:	2301      	movs	r3, #1
 800e53e:	425b      	negs	r3, r3
 800e540:	2103      	movs	r1, #3
 800e542:	0018      	movs	r0, r3
 800e544:	f7ff ff7c 	bl	800e440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e548:	4b05      	ldr	r3, [pc, #20]	; (800e560 <SysTick_Config+0x44>)
 800e54a:	2200      	movs	r2, #0
 800e54c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e54e:	4b04      	ldr	r3, [pc, #16]	; (800e560 <SysTick_Config+0x44>)
 800e550:	2207      	movs	r2, #7
 800e552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e554:	2300      	movs	r3, #0
}
 800e556:	0018      	movs	r0, r3
 800e558:	46bd      	mov	sp, r7
 800e55a:	b002      	add	sp, #8
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	46c0      	nop			; (mov r8, r8)
 800e560:	e000e010 	.word	0xe000e010

0800e564 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	60b9      	str	r1, [r7, #8]
 800e56c:	607a      	str	r2, [r7, #4]
 800e56e:	210f      	movs	r1, #15
 800e570:	187b      	adds	r3, r7, r1
 800e572:	1c02      	adds	r2, r0, #0
 800e574:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	187b      	adds	r3, r7, r1
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	b25b      	sxtb	r3, r3
 800e57e:	0011      	movs	r1, r2
 800e580:	0018      	movs	r0, r3
 800e582:	f7ff ff5d 	bl	800e440 <__NVIC_SetPriority>
}
 800e586:	46c0      	nop			; (mov r8, r8)
 800e588:	46bd      	mov	sp, r7
 800e58a:	b004      	add	sp, #16
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b082      	sub	sp, #8
 800e592:	af00      	add	r7, sp, #0
 800e594:	0002      	movs	r2, r0
 800e596:	1dfb      	adds	r3, r7, #7
 800e598:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e59a:	1dfb      	adds	r3, r7, #7
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	b25b      	sxtb	r3, r3
 800e5a0:	0018      	movs	r0, r3
 800e5a2:	f7ff ff33 	bl	800e40c <__NVIC_EnableIRQ>
}
 800e5a6:	46c0      	nop			; (mov r8, r8)
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	b002      	add	sp, #8
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b082      	sub	sp, #8
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	0018      	movs	r0, r3
 800e5ba:	f7ff ffaf 	bl	800e51c <SysTick_Config>
 800e5be:	0003      	movs	r3, r0
}
 800e5c0:	0018      	movs	r0, r3
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	b002      	add	sp, #8
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d101      	bne.n	800e5de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e036      	b.n	800e64c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2221      	movs	r2, #33	; 0x21
 800e5e2:	2102      	movs	r1, #2
 800e5e4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	4a18      	ldr	r2, [pc, #96]	; (800e654 <HAL_DMA_Init+0x8c>)
 800e5f2:	4013      	ands	r3, r2
 800e5f4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800e5fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e60a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	695b      	ldr	r3, [r3, #20]
 800e610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	69db      	ldr	r3, [r3, #28]
 800e61c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	4313      	orrs	r3, r2
 800e622:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	68fa      	ldr	r2, [r7, #12]
 800e62a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	0018      	movs	r0, r3
 800e630:	f000 f946 	bl	800e8c0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2221      	movs	r2, #33	; 0x21
 800e63e:	2101      	movs	r1, #1
 800e640:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2220      	movs	r2, #32
 800e646:	2100      	movs	r1, #0
 800e648:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800e64a:	2300      	movs	r3, #0
}  
 800e64c:	0018      	movs	r0, r3
 800e64e:	46bd      	mov	sp, r7
 800e650:	b004      	add	sp, #16
 800e652:	bd80      	pop	{r7, pc}
 800e654:	ffffc00f 	.word	0xffffc00f

0800e658 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
 800e664:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800e666:	2317      	movs	r3, #23
 800e668:	18fb      	adds	r3, r7, r3
 800e66a:	2200      	movs	r2, #0
 800e66c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2220      	movs	r2, #32
 800e672:	5c9b      	ldrb	r3, [r3, r2]
 800e674:	2b01      	cmp	r3, #1
 800e676:	d101      	bne.n	800e67c <HAL_DMA_Start_IT+0x24>
 800e678:	2302      	movs	r3, #2
 800e67a:	e04f      	b.n	800e71c <HAL_DMA_Start_IT+0xc4>
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2220      	movs	r2, #32
 800e680:	2101      	movs	r1, #1
 800e682:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2221      	movs	r2, #33	; 0x21
 800e688:	5c9b      	ldrb	r3, [r3, r2]
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d13a      	bne.n	800e706 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2221      	movs	r2, #33	; 0x21
 800e694:	2102      	movs	r1, #2
 800e696:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2200      	movs	r2, #0
 800e69c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2101      	movs	r1, #1
 800e6aa:	438a      	bics	r2, r1
 800e6ac:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	68b9      	ldr	r1, [r7, #8]
 800e6b4:	68f8      	ldr	r0, [r7, #12]
 800e6b6:	f000 f8d7 	bl	800e868 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d008      	beq.n	800e6d4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	210e      	movs	r1, #14
 800e6ce:	430a      	orrs	r2, r1
 800e6d0:	601a      	str	r2, [r3, #0]
 800e6d2:	e00f      	b.n	800e6f4 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	210a      	movs	r1, #10
 800e6e0:	430a      	orrs	r2, r1
 800e6e2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2104      	movs	r1, #4
 800e6f0:	438a      	bics	r2, r1
 800e6f2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	681a      	ldr	r2, [r3, #0]
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	2101      	movs	r1, #1
 800e700:	430a      	orrs	r2, r1
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	e007      	b.n	800e716 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2220      	movs	r2, #32
 800e70a:	2100      	movs	r1, #0
 800e70c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800e70e:	2317      	movs	r3, #23
 800e710:	18fb      	adds	r3, r7, r3
 800e712:	2202      	movs	r2, #2
 800e714:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800e716:	2317      	movs	r3, #23
 800e718:	18fb      	adds	r3, r7, r3
 800e71a:	781b      	ldrb	r3, [r3, #0]
} 
 800e71c:	0018      	movs	r0, r3
 800e71e:	46bd      	mov	sp, r7
 800e720:	b006      	add	sp, #24
 800e722:	bd80      	pop	{r7, pc}

0800e724 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e740:	2204      	movs	r2, #4
 800e742:	409a      	lsls	r2, r3
 800e744:	0013      	movs	r3, r2
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	4013      	ands	r3, r2
 800e74a:	d024      	beq.n	800e796 <HAL_DMA_IRQHandler+0x72>
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2204      	movs	r2, #4
 800e750:	4013      	ands	r3, r2
 800e752:	d020      	beq.n	800e796 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2220      	movs	r2, #32
 800e75c:	4013      	ands	r3, r2
 800e75e:	d107      	bne.n	800e770 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2104      	movs	r1, #4
 800e76c:	438a      	bics	r2, r1
 800e76e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e778:	2104      	movs	r1, #4
 800e77a:	4091      	lsls	r1, r2
 800e77c:	000a      	movs	r2, r1
 800e77e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e784:	2b00      	cmp	r3, #0
 800e786:	d100      	bne.n	800e78a <HAL_DMA_IRQHandler+0x66>
 800e788:	e06a      	b.n	800e860 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	0010      	movs	r0, r2
 800e792:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800e794:	e064      	b.n	800e860 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e79a:	2202      	movs	r2, #2
 800e79c:	409a      	lsls	r2, r3
 800e79e:	0013      	movs	r3, r2
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	4013      	ands	r3, r2
 800e7a4:	d02b      	beq.n	800e7fe <HAL_DMA_IRQHandler+0xda>
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	2202      	movs	r2, #2
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	d027      	beq.n	800e7fe <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	2220      	movs	r2, #32
 800e7b6:	4013      	ands	r3, r2
 800e7b8:	d10b      	bne.n	800e7d2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	210a      	movs	r1, #10
 800e7c6:	438a      	bics	r2, r1
 800e7c8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2221      	movs	r2, #33	; 0x21
 800e7ce:	2101      	movs	r1, #1
 800e7d0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7da:	2102      	movs	r1, #2
 800e7dc:	4091      	lsls	r1, r2
 800e7de:	000a      	movs	r2, r1
 800e7e0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2220      	movs	r2, #32
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d036      	beq.n	800e860 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	0010      	movs	r0, r2
 800e7fa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800e7fc:	e030      	b.n	800e860 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e802:	2208      	movs	r2, #8
 800e804:	409a      	lsls	r2, r3
 800e806:	0013      	movs	r3, r2
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	4013      	ands	r3, r2
 800e80c:	d028      	beq.n	800e860 <HAL_DMA_IRQHandler+0x13c>
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	2208      	movs	r2, #8
 800e812:	4013      	ands	r3, r2
 800e814:	d024      	beq.n	800e860 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	210e      	movs	r1, #14
 800e822:	438a      	bics	r2, r1
 800e824:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e82e:	2101      	movs	r1, #1
 800e830:	4091      	lsls	r1, r2
 800e832:	000a      	movs	r2, r1
 800e834:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2201      	movs	r2, #1
 800e83a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2221      	movs	r2, #33	; 0x21
 800e840:	2101      	movs	r1, #1
 800e842:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2220      	movs	r2, #32
 800e848:	2100      	movs	r1, #0
 800e84a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e850:	2b00      	cmp	r3, #0
 800e852:	d005      	beq.n	800e860 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	0010      	movs	r0, r2
 800e85c:	4798      	blx	r3
    }
   }
}  
 800e85e:	e7ff      	b.n	800e860 <HAL_DMA_IRQHandler+0x13c>
 800e860:	46c0      	nop			; (mov r8, r8)
 800e862:	46bd      	mov	sp, r7
 800e864:	b004      	add	sp, #16
 800e866:	bd80      	pop	{r7, pc}

0800e868 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
 800e874:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e87e:	2101      	movs	r1, #1
 800e880:	4091      	lsls	r1, r2
 800e882:	000a      	movs	r2, r1
 800e884:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	683a      	ldr	r2, [r7, #0]
 800e88c:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	2b10      	cmp	r3, #16
 800e894:	d108      	bne.n	800e8a8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	687a      	ldr	r2, [r7, #4]
 800e89c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800e8a6:	e007      	b.n	800e8b8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	68ba      	ldr	r2, [r7, #8]
 800e8ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	60da      	str	r2, [r3, #12]
}
 800e8b8:	46c0      	nop			; (mov r8, r8)
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	b004      	add	sp, #16
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	001a      	movs	r2, r3
 800e8ce:	4b14      	ldr	r3, [pc, #80]	; (800e920 <DMA_CalcBaseAndBitshift+0x60>)
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d810      	bhi.n	800e8f6 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a12      	ldr	r2, [pc, #72]	; (800e924 <DMA_CalcBaseAndBitshift+0x64>)
 800e8da:	4694      	mov	ip, r2
 800e8dc:	4463      	add	r3, ip
 800e8de:	2114      	movs	r1, #20
 800e8e0:	0018      	movs	r0, r3
 800e8e2:	f7f9 fc0f 	bl	8008104 <__udivsi3>
 800e8e6:	0003      	movs	r3, r0
 800e8e8:	009a      	lsls	r2, r3, #2
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	4a0d      	ldr	r2, [pc, #52]	; (800e928 <DMA_CalcBaseAndBitshift+0x68>)
 800e8f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800e8f4:	e00f      	b.n	800e916 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4a0c      	ldr	r2, [pc, #48]	; (800e92c <DMA_CalcBaseAndBitshift+0x6c>)
 800e8fc:	4694      	mov	ip, r2
 800e8fe:	4463      	add	r3, ip
 800e900:	2114      	movs	r1, #20
 800e902:	0018      	movs	r0, r3
 800e904:	f7f9 fbfe 	bl	8008104 <__udivsi3>
 800e908:	0003      	movs	r3, r0
 800e90a:	009a      	lsls	r2, r3, #2
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a07      	ldr	r2, [pc, #28]	; (800e930 <DMA_CalcBaseAndBitshift+0x70>)
 800e914:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e916:	46c0      	nop			; (mov r8, r8)
 800e918:	46bd      	mov	sp, r7
 800e91a:	b002      	add	sp, #8
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	46c0      	nop			; (mov r8, r8)
 800e920:	40020407 	.word	0x40020407
 800e924:	bffdfff8 	.word	0xbffdfff8
 800e928:	40020000 	.word	0x40020000
 800e92c:	bffdfbf8 	.word	0xbffdfbf8
 800e930:	40020400 	.word	0x40020400

0800e934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b086      	sub	sp, #24
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800e93e:	2300      	movs	r3, #0
 800e940:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800e942:	e155      	b.n	800ebf0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2101      	movs	r1, #1
 800e94a:	697a      	ldr	r2, [r7, #20]
 800e94c:	4091      	lsls	r1, r2
 800e94e:	000a      	movs	r2, r1
 800e950:	4013      	ands	r3, r2
 800e952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d100      	bne.n	800e95c <HAL_GPIO_Init+0x28>
 800e95a:	e146      	b.n	800ebea <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	2203      	movs	r2, #3
 800e962:	4013      	ands	r3, r2
 800e964:	2b01      	cmp	r3, #1
 800e966:	d005      	beq.n	800e974 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	2203      	movs	r2, #3
 800e96e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800e970:	2b02      	cmp	r3, #2
 800e972:	d130      	bne.n	800e9d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	005b      	lsls	r3, r3, #1
 800e97e:	2203      	movs	r2, #3
 800e980:	409a      	lsls	r2, r3
 800e982:	0013      	movs	r3, r2
 800e984:	43da      	mvns	r2, r3
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	4013      	ands	r3, r2
 800e98a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	68da      	ldr	r2, [r3, #12]
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	005b      	lsls	r3, r3, #1
 800e994:	409a      	lsls	r2, r3
 800e996:	0013      	movs	r3, r2
 800e998:	693a      	ldr	r2, [r7, #16]
 800e99a:	4313      	orrs	r3, r2
 800e99c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	693a      	ldr	r2, [r7, #16]
 800e9a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e9aa:	2201      	movs	r2, #1
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	409a      	lsls	r2, r3
 800e9b0:	0013      	movs	r3, r2
 800e9b2:	43da      	mvns	r2, r3
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	4013      	ands	r3, r2
 800e9b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	091b      	lsrs	r3, r3, #4
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	401a      	ands	r2, r3
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	409a      	lsls	r2, r3
 800e9c8:	0013      	movs	r3, r2
 800e9ca:	693a      	ldr	r2, [r7, #16]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	693a      	ldr	r2, [r7, #16]
 800e9d4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	2203      	movs	r2, #3
 800e9dc:	4013      	ands	r3, r2
 800e9de:	2b03      	cmp	r3, #3
 800e9e0:	d017      	beq.n	800ea12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	2203      	movs	r2, #3
 800e9ee:	409a      	lsls	r2, r3
 800e9f0:	0013      	movs	r3, r2
 800e9f2:	43da      	mvns	r2, r3
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	689a      	ldr	r2, [r3, #8]
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	005b      	lsls	r3, r3, #1
 800ea02:	409a      	lsls	r2, r3
 800ea04:	0013      	movs	r3, r2
 800ea06:	693a      	ldr	r2, [r7, #16]
 800ea08:	4313      	orrs	r3, r2
 800ea0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	693a      	ldr	r2, [r7, #16]
 800ea10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	2203      	movs	r2, #3
 800ea18:	4013      	ands	r3, r2
 800ea1a:	2b02      	cmp	r3, #2
 800ea1c:	d123      	bne.n	800ea66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	08da      	lsrs	r2, r3, #3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	3208      	adds	r2, #8
 800ea26:	0092      	lsls	r2, r2, #2
 800ea28:	58d3      	ldr	r3, [r2, r3]
 800ea2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	2207      	movs	r2, #7
 800ea30:	4013      	ands	r3, r2
 800ea32:	009b      	lsls	r3, r3, #2
 800ea34:	220f      	movs	r2, #15
 800ea36:	409a      	lsls	r2, r3
 800ea38:	0013      	movs	r3, r2
 800ea3a:	43da      	mvns	r2, r3
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	4013      	ands	r3, r2
 800ea40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	691a      	ldr	r2, [r3, #16]
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	2107      	movs	r1, #7
 800ea4a:	400b      	ands	r3, r1
 800ea4c:	009b      	lsls	r3, r3, #2
 800ea4e:	409a      	lsls	r2, r3
 800ea50:	0013      	movs	r3, r2
 800ea52:	693a      	ldr	r2, [r7, #16]
 800ea54:	4313      	orrs	r3, r2
 800ea56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	08da      	lsrs	r2, r3, #3
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	3208      	adds	r2, #8
 800ea60:	0092      	lsls	r2, r2, #2
 800ea62:	6939      	ldr	r1, [r7, #16]
 800ea64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	005b      	lsls	r3, r3, #1
 800ea70:	2203      	movs	r2, #3
 800ea72:	409a      	lsls	r2, r3
 800ea74:	0013      	movs	r3, r2
 800ea76:	43da      	mvns	r2, r3
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	4013      	ands	r3, r2
 800ea7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	2203      	movs	r2, #3
 800ea84:	401a      	ands	r2, r3
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	409a      	lsls	r2, r3
 800ea8c:	0013      	movs	r3, r2
 800ea8e:	693a      	ldr	r2, [r7, #16]
 800ea90:	4313      	orrs	r3, r2
 800ea92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	693a      	ldr	r2, [r7, #16]
 800ea98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	685a      	ldr	r2, [r3, #4]
 800ea9e:	23c0      	movs	r3, #192	; 0xc0
 800eaa0:	029b      	lsls	r3, r3, #10
 800eaa2:	4013      	ands	r3, r2
 800eaa4:	d100      	bne.n	800eaa8 <HAL_GPIO_Init+0x174>
 800eaa6:	e0a0      	b.n	800ebea <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800eaa8:	4b57      	ldr	r3, [pc, #348]	; (800ec08 <HAL_GPIO_Init+0x2d4>)
 800eaaa:	699a      	ldr	r2, [r3, #24]
 800eaac:	4b56      	ldr	r3, [pc, #344]	; (800ec08 <HAL_GPIO_Init+0x2d4>)
 800eaae:	2101      	movs	r1, #1
 800eab0:	430a      	orrs	r2, r1
 800eab2:	619a      	str	r2, [r3, #24]
 800eab4:	4b54      	ldr	r3, [pc, #336]	; (800ec08 <HAL_GPIO_Init+0x2d4>)
 800eab6:	699b      	ldr	r3, [r3, #24]
 800eab8:	2201      	movs	r2, #1
 800eaba:	4013      	ands	r3, r2
 800eabc:	60bb      	str	r3, [r7, #8]
 800eabe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800eac0:	4a52      	ldr	r2, [pc, #328]	; (800ec0c <HAL_GPIO_Init+0x2d8>)
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	089b      	lsrs	r3, r3, #2
 800eac6:	3302      	adds	r3, #2
 800eac8:	009b      	lsls	r3, r3, #2
 800eaca:	589b      	ldr	r3, [r3, r2]
 800eacc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	2203      	movs	r2, #3
 800ead2:	4013      	ands	r3, r2
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	220f      	movs	r2, #15
 800ead8:	409a      	lsls	r2, r3
 800eada:	0013      	movs	r3, r2
 800eadc:	43da      	mvns	r2, r3
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	4013      	ands	r3, r2
 800eae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	2390      	movs	r3, #144	; 0x90
 800eae8:	05db      	lsls	r3, r3, #23
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d019      	beq.n	800eb22 <HAL_GPIO_Init+0x1ee>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4a47      	ldr	r2, [pc, #284]	; (800ec10 <HAL_GPIO_Init+0x2dc>)
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d013      	beq.n	800eb1e <HAL_GPIO_Init+0x1ea>
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	4a46      	ldr	r2, [pc, #280]	; (800ec14 <HAL_GPIO_Init+0x2e0>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d00d      	beq.n	800eb1a <HAL_GPIO_Init+0x1e6>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	4a45      	ldr	r2, [pc, #276]	; (800ec18 <HAL_GPIO_Init+0x2e4>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d007      	beq.n	800eb16 <HAL_GPIO_Init+0x1e2>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4a44      	ldr	r2, [pc, #272]	; (800ec1c <HAL_GPIO_Init+0x2e8>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d101      	bne.n	800eb12 <HAL_GPIO_Init+0x1de>
 800eb0e:	2304      	movs	r3, #4
 800eb10:	e008      	b.n	800eb24 <HAL_GPIO_Init+0x1f0>
 800eb12:	2305      	movs	r3, #5
 800eb14:	e006      	b.n	800eb24 <HAL_GPIO_Init+0x1f0>
 800eb16:	2303      	movs	r3, #3
 800eb18:	e004      	b.n	800eb24 <HAL_GPIO_Init+0x1f0>
 800eb1a:	2302      	movs	r3, #2
 800eb1c:	e002      	b.n	800eb24 <HAL_GPIO_Init+0x1f0>
 800eb1e:	2301      	movs	r3, #1
 800eb20:	e000      	b.n	800eb24 <HAL_GPIO_Init+0x1f0>
 800eb22:	2300      	movs	r3, #0
 800eb24:	697a      	ldr	r2, [r7, #20]
 800eb26:	2103      	movs	r1, #3
 800eb28:	400a      	ands	r2, r1
 800eb2a:	0092      	lsls	r2, r2, #2
 800eb2c:	4093      	lsls	r3, r2
 800eb2e:	693a      	ldr	r2, [r7, #16]
 800eb30:	4313      	orrs	r3, r2
 800eb32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800eb34:	4935      	ldr	r1, [pc, #212]	; (800ec0c <HAL_GPIO_Init+0x2d8>)
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	089b      	lsrs	r3, r3, #2
 800eb3a:	3302      	adds	r3, #2
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	693a      	ldr	r2, [r7, #16]
 800eb40:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800eb42:	4b37      	ldr	r3, [pc, #220]	; (800ec20 <HAL_GPIO_Init+0x2ec>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	43da      	mvns	r2, r3
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	4013      	ands	r3, r2
 800eb50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	685a      	ldr	r2, [r3, #4]
 800eb56:	2380      	movs	r3, #128	; 0x80
 800eb58:	025b      	lsls	r3, r3, #9
 800eb5a:	4013      	ands	r3, r2
 800eb5c:	d003      	beq.n	800eb66 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800eb5e:	693a      	ldr	r2, [r7, #16]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	4313      	orrs	r3, r2
 800eb64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800eb66:	4b2e      	ldr	r3, [pc, #184]	; (800ec20 <HAL_GPIO_Init+0x2ec>)
 800eb68:	693a      	ldr	r2, [r7, #16]
 800eb6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800eb6c:	4b2c      	ldr	r3, [pc, #176]	; (800ec20 <HAL_GPIO_Init+0x2ec>)
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	43da      	mvns	r2, r3
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	4013      	ands	r3, r2
 800eb7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	685a      	ldr	r2, [r3, #4]
 800eb80:	2380      	movs	r3, #128	; 0x80
 800eb82:	029b      	lsls	r3, r3, #10
 800eb84:	4013      	ands	r3, r2
 800eb86:	d003      	beq.n	800eb90 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800eb88:	693a      	ldr	r2, [r7, #16]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800eb90:	4b23      	ldr	r3, [pc, #140]	; (800ec20 <HAL_GPIO_Init+0x2ec>)
 800eb92:	693a      	ldr	r2, [r7, #16]
 800eb94:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800eb96:	4b22      	ldr	r3, [pc, #136]	; (800ec20 <HAL_GPIO_Init+0x2ec>)
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	43da      	mvns	r2, r3
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	4013      	ands	r3, r2
 800eba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	685a      	ldr	r2, [r3, #4]
 800ebaa:	2380      	movs	r3, #128	; 0x80
 800ebac:	035b      	lsls	r3, r3, #13
 800ebae:	4013      	ands	r3, r2
 800ebb0:	d003      	beq.n	800ebba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800ebb2:	693a      	ldr	r2, [r7, #16]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	4313      	orrs	r3, r2
 800ebb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800ebba:	4b19      	ldr	r3, [pc, #100]	; (800ec20 <HAL_GPIO_Init+0x2ec>)
 800ebbc:	693a      	ldr	r2, [r7, #16]
 800ebbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800ebc0:	4b17      	ldr	r3, [pc, #92]	; (800ec20 <HAL_GPIO_Init+0x2ec>)
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	43da      	mvns	r2, r3
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	4013      	ands	r3, r2
 800ebce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	2380      	movs	r3, #128	; 0x80
 800ebd6:	039b      	lsls	r3, r3, #14
 800ebd8:	4013      	ands	r3, r2
 800ebda:	d003      	beq.n	800ebe4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800ebdc:	693a      	ldr	r2, [r7, #16]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800ebe4:	4b0e      	ldr	r3, [pc, #56]	; (800ec20 <HAL_GPIO_Init+0x2ec>)
 800ebe6:	693a      	ldr	r2, [r7, #16]
 800ebe8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	3301      	adds	r3, #1
 800ebee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	40da      	lsrs	r2, r3
 800ebf8:	1e13      	subs	r3, r2, #0
 800ebfa:	d000      	beq.n	800ebfe <HAL_GPIO_Init+0x2ca>
 800ebfc:	e6a2      	b.n	800e944 <HAL_GPIO_Init+0x10>
  } 
}
 800ebfe:	46c0      	nop			; (mov r8, r8)
 800ec00:	46c0      	nop			; (mov r8, r8)
 800ec02:	46bd      	mov	sp, r7
 800ec04:	b006      	add	sp, #24
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	40021000 	.word	0x40021000
 800ec0c:	40010000 	.word	0x40010000
 800ec10:	48000400 	.word	0x48000400
 800ec14:	48000800 	.word	0x48000800
 800ec18:	48000c00 	.word	0x48000c00
 800ec1c:	48001000 	.word	0x48001000
 800ec20:	40010400 	.word	0x40010400

0800ec24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	0008      	movs	r0, r1
 800ec2e:	0011      	movs	r1, r2
 800ec30:	1cbb      	adds	r3, r7, #2
 800ec32:	1c02      	adds	r2, r0, #0
 800ec34:	801a      	strh	r2, [r3, #0]
 800ec36:	1c7b      	adds	r3, r7, #1
 800ec38:	1c0a      	adds	r2, r1, #0
 800ec3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ec3c:	1c7b      	adds	r3, r7, #1
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d004      	beq.n	800ec4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ec44:	1cbb      	adds	r3, r7, #2
 800ec46:	881a      	ldrh	r2, [r3, #0]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ec4c:	e003      	b.n	800ec56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ec4e:	1cbb      	adds	r3, r7, #2
 800ec50:	881a      	ldrh	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ec56:	46c0      	nop			; (mov r8, r8)
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	b002      	add	sp, #8
 800ec5c:	bd80      	pop	{r7, pc}

0800ec5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b084      	sub	sp, #16
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
 800ec66:	000a      	movs	r2, r1
 800ec68:	1cbb      	adds	r3, r7, #2
 800ec6a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	695b      	ldr	r3, [r3, #20]
 800ec70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ec72:	1cbb      	adds	r3, r7, #2
 800ec74:	881b      	ldrh	r3, [r3, #0]
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	4013      	ands	r3, r2
 800ec7a:	041a      	lsls	r2, r3, #16
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	43db      	mvns	r3, r3
 800ec80:	1cb9      	adds	r1, r7, #2
 800ec82:	8809      	ldrh	r1, [r1, #0]
 800ec84:	400b      	ands	r3, r1
 800ec86:	431a      	orrs	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	619a      	str	r2, [r3, #24]
}
 800ec8c:	46c0      	nop			; (mov r8, r8)
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	b004      	add	sp, #16
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b088      	sub	sp, #32
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d102      	bne.n	800eca8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800eca2:	2301      	movs	r3, #1
 800eca4:	f000 fb76 	bl	800f394 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	2201      	movs	r2, #1
 800ecae:	4013      	ands	r3, r2
 800ecb0:	d100      	bne.n	800ecb4 <HAL_RCC_OscConfig+0x20>
 800ecb2:	e08e      	b.n	800edd2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800ecb4:	4bc5      	ldr	r3, [pc, #788]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	220c      	movs	r2, #12
 800ecba:	4013      	ands	r3, r2
 800ecbc:	2b04      	cmp	r3, #4
 800ecbe:	d00e      	beq.n	800ecde <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800ecc0:	4bc2      	ldr	r3, [pc, #776]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	220c      	movs	r2, #12
 800ecc6:	4013      	ands	r3, r2
 800ecc8:	2b08      	cmp	r3, #8
 800ecca:	d117      	bne.n	800ecfc <HAL_RCC_OscConfig+0x68>
 800eccc:	4bbf      	ldr	r3, [pc, #764]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ecce:	685a      	ldr	r2, [r3, #4]
 800ecd0:	23c0      	movs	r3, #192	; 0xc0
 800ecd2:	025b      	lsls	r3, r3, #9
 800ecd4:	401a      	ands	r2, r3
 800ecd6:	2380      	movs	r3, #128	; 0x80
 800ecd8:	025b      	lsls	r3, r3, #9
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d10e      	bne.n	800ecfc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ecde:	4bbb      	ldr	r3, [pc, #748]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	2380      	movs	r3, #128	; 0x80
 800ece4:	029b      	lsls	r3, r3, #10
 800ece6:	4013      	ands	r3, r2
 800ece8:	d100      	bne.n	800ecec <HAL_RCC_OscConfig+0x58>
 800ecea:	e071      	b.n	800edd0 <HAL_RCC_OscConfig+0x13c>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d000      	beq.n	800ecf6 <HAL_RCC_OscConfig+0x62>
 800ecf4:	e06c      	b.n	800edd0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	f000 fb4c 	bl	800f394 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d107      	bne.n	800ed14 <HAL_RCC_OscConfig+0x80>
 800ed04:	4bb1      	ldr	r3, [pc, #708]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	4bb0      	ldr	r3, [pc, #704]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed0a:	2180      	movs	r1, #128	; 0x80
 800ed0c:	0249      	lsls	r1, r1, #9
 800ed0e:	430a      	orrs	r2, r1
 800ed10:	601a      	str	r2, [r3, #0]
 800ed12:	e02f      	b.n	800ed74 <HAL_RCC_OscConfig+0xe0>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10c      	bne.n	800ed36 <HAL_RCC_OscConfig+0xa2>
 800ed1c:	4bab      	ldr	r3, [pc, #684]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	4baa      	ldr	r3, [pc, #680]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed22:	49ab      	ldr	r1, [pc, #684]	; (800efd0 <HAL_RCC_OscConfig+0x33c>)
 800ed24:	400a      	ands	r2, r1
 800ed26:	601a      	str	r2, [r3, #0]
 800ed28:	4ba8      	ldr	r3, [pc, #672]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	4ba7      	ldr	r3, [pc, #668]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed2e:	49a9      	ldr	r1, [pc, #676]	; (800efd4 <HAL_RCC_OscConfig+0x340>)
 800ed30:	400a      	ands	r2, r1
 800ed32:	601a      	str	r2, [r3, #0]
 800ed34:	e01e      	b.n	800ed74 <HAL_RCC_OscConfig+0xe0>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	2b05      	cmp	r3, #5
 800ed3c:	d10e      	bne.n	800ed5c <HAL_RCC_OscConfig+0xc8>
 800ed3e:	4ba3      	ldr	r3, [pc, #652]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	4ba2      	ldr	r3, [pc, #648]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed44:	2180      	movs	r1, #128	; 0x80
 800ed46:	02c9      	lsls	r1, r1, #11
 800ed48:	430a      	orrs	r2, r1
 800ed4a:	601a      	str	r2, [r3, #0]
 800ed4c:	4b9f      	ldr	r3, [pc, #636]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed4e:	681a      	ldr	r2, [r3, #0]
 800ed50:	4b9e      	ldr	r3, [pc, #632]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed52:	2180      	movs	r1, #128	; 0x80
 800ed54:	0249      	lsls	r1, r1, #9
 800ed56:	430a      	orrs	r2, r1
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	e00b      	b.n	800ed74 <HAL_RCC_OscConfig+0xe0>
 800ed5c:	4b9b      	ldr	r3, [pc, #620]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	4b9a      	ldr	r3, [pc, #616]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed62:	499b      	ldr	r1, [pc, #620]	; (800efd0 <HAL_RCC_OscConfig+0x33c>)
 800ed64:	400a      	ands	r2, r1
 800ed66:	601a      	str	r2, [r3, #0]
 800ed68:	4b98      	ldr	r3, [pc, #608]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed6a:	681a      	ldr	r2, [r3, #0]
 800ed6c:	4b97      	ldr	r3, [pc, #604]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed6e:	4999      	ldr	r1, [pc, #612]	; (800efd4 <HAL_RCC_OscConfig+0x340>)
 800ed70:	400a      	ands	r2, r1
 800ed72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d014      	beq.n	800eda6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed7c:	f7fd ff8c 	bl	800cc98 <HAL_GetTick>
 800ed80:	0003      	movs	r3, r0
 800ed82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed84:	e008      	b.n	800ed98 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ed86:	f7fd ff87 	bl	800cc98 <HAL_GetTick>
 800ed8a:	0002      	movs	r2, r0
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	1ad3      	subs	r3, r2, r3
 800ed90:	2b64      	cmp	r3, #100	; 0x64
 800ed92:	d901      	bls.n	800ed98 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800ed94:	2303      	movs	r3, #3
 800ed96:	e2fd      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ed98:	4b8c      	ldr	r3, [pc, #560]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	2380      	movs	r3, #128	; 0x80
 800ed9e:	029b      	lsls	r3, r3, #10
 800eda0:	4013      	ands	r3, r2
 800eda2:	d0f0      	beq.n	800ed86 <HAL_RCC_OscConfig+0xf2>
 800eda4:	e015      	b.n	800edd2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eda6:	f7fd ff77 	bl	800cc98 <HAL_GetTick>
 800edaa:	0003      	movs	r3, r0
 800edac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800edae:	e008      	b.n	800edc2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800edb0:	f7fd ff72 	bl	800cc98 <HAL_GetTick>
 800edb4:	0002      	movs	r2, r0
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	1ad3      	subs	r3, r2, r3
 800edba:	2b64      	cmp	r3, #100	; 0x64
 800edbc:	d901      	bls.n	800edc2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800edbe:	2303      	movs	r3, #3
 800edc0:	e2e8      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800edc2:	4b82      	ldr	r3, [pc, #520]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800edc4:	681a      	ldr	r2, [r3, #0]
 800edc6:	2380      	movs	r3, #128	; 0x80
 800edc8:	029b      	lsls	r3, r3, #10
 800edca:	4013      	ands	r3, r2
 800edcc:	d1f0      	bne.n	800edb0 <HAL_RCC_OscConfig+0x11c>
 800edce:	e000      	b.n	800edd2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800edd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2202      	movs	r2, #2
 800edd8:	4013      	ands	r3, r2
 800edda:	d100      	bne.n	800edde <HAL_RCC_OscConfig+0x14a>
 800eddc:	e06c      	b.n	800eeb8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800edde:	4b7b      	ldr	r3, [pc, #492]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	220c      	movs	r2, #12
 800ede4:	4013      	ands	r3, r2
 800ede6:	d00e      	beq.n	800ee06 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800ede8:	4b78      	ldr	r3, [pc, #480]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	220c      	movs	r2, #12
 800edee:	4013      	ands	r3, r2
 800edf0:	2b08      	cmp	r3, #8
 800edf2:	d11f      	bne.n	800ee34 <HAL_RCC_OscConfig+0x1a0>
 800edf4:	4b75      	ldr	r3, [pc, #468]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800edf6:	685a      	ldr	r2, [r3, #4]
 800edf8:	23c0      	movs	r3, #192	; 0xc0
 800edfa:	025b      	lsls	r3, r3, #9
 800edfc:	401a      	ands	r2, r3
 800edfe:	2380      	movs	r3, #128	; 0x80
 800ee00:	021b      	lsls	r3, r3, #8
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d116      	bne.n	800ee34 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ee06:	4b71      	ldr	r3, [pc, #452]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2202      	movs	r2, #2
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	d005      	beq.n	800ee1c <HAL_RCC_OscConfig+0x188>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d001      	beq.n	800ee1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e2bb      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ee1c:	4b6b      	ldr	r3, [pc, #428]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	22f8      	movs	r2, #248	; 0xf8
 800ee22:	4393      	bics	r3, r2
 800ee24:	0019      	movs	r1, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	691b      	ldr	r3, [r3, #16]
 800ee2a:	00da      	lsls	r2, r3, #3
 800ee2c:	4b67      	ldr	r3, [pc, #412]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ee2e:	430a      	orrs	r2, r1
 800ee30:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ee32:	e041      	b.n	800eeb8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d024      	beq.n	800ee86 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ee3c:	4b63      	ldr	r3, [pc, #396]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	4b62      	ldr	r3, [pc, #392]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ee42:	2101      	movs	r1, #1
 800ee44:	430a      	orrs	r2, r1
 800ee46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee48:	f7fd ff26 	bl	800cc98 <HAL_GetTick>
 800ee4c:	0003      	movs	r3, r0
 800ee4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ee50:	e008      	b.n	800ee64 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ee52:	f7fd ff21 	bl	800cc98 <HAL_GetTick>
 800ee56:	0002      	movs	r2, r0
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	1ad3      	subs	r3, r2, r3
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	d901      	bls.n	800ee64 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800ee60:	2303      	movs	r3, #3
 800ee62:	e297      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ee64:	4b59      	ldr	r3, [pc, #356]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2202      	movs	r2, #2
 800ee6a:	4013      	ands	r3, r2
 800ee6c:	d0f1      	beq.n	800ee52 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ee6e:	4b57      	ldr	r3, [pc, #348]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	22f8      	movs	r2, #248	; 0xf8
 800ee74:	4393      	bics	r3, r2
 800ee76:	0019      	movs	r1, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	691b      	ldr	r3, [r3, #16]
 800ee7c:	00da      	lsls	r2, r3, #3
 800ee7e:	4b53      	ldr	r3, [pc, #332]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ee80:	430a      	orrs	r2, r1
 800ee82:	601a      	str	r2, [r3, #0]
 800ee84:	e018      	b.n	800eeb8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ee86:	4b51      	ldr	r3, [pc, #324]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	4b50      	ldr	r3, [pc, #320]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ee8c:	2101      	movs	r1, #1
 800ee8e:	438a      	bics	r2, r1
 800ee90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee92:	f7fd ff01 	bl	800cc98 <HAL_GetTick>
 800ee96:	0003      	movs	r3, r0
 800ee98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ee9a:	e008      	b.n	800eeae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ee9c:	f7fd fefc 	bl	800cc98 <HAL_GetTick>
 800eea0:	0002      	movs	r2, r0
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	1ad3      	subs	r3, r2, r3
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d901      	bls.n	800eeae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800eeaa:	2303      	movs	r3, #3
 800eeac:	e272      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eeae:	4b47      	ldr	r3, [pc, #284]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	2202      	movs	r2, #2
 800eeb4:	4013      	ands	r3, r2
 800eeb6:	d1f1      	bne.n	800ee9c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2208      	movs	r2, #8
 800eebe:	4013      	ands	r3, r2
 800eec0:	d036      	beq.n	800ef30 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	69db      	ldr	r3, [r3, #28]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d019      	beq.n	800eefe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eeca:	4b40      	ldr	r3, [pc, #256]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800eecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eece:	4b3f      	ldr	r3, [pc, #252]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800eed0:	2101      	movs	r1, #1
 800eed2:	430a      	orrs	r2, r1
 800eed4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eed6:	f7fd fedf 	bl	800cc98 <HAL_GetTick>
 800eeda:	0003      	movs	r3, r0
 800eedc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eede:	e008      	b.n	800eef2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eee0:	f7fd feda 	bl	800cc98 <HAL_GetTick>
 800eee4:	0002      	movs	r2, r0
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	1ad3      	subs	r3, r2, r3
 800eeea:	2b02      	cmp	r3, #2
 800eeec:	d901      	bls.n	800eef2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800eeee:	2303      	movs	r3, #3
 800eef0:	e250      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eef2:	4b36      	ldr	r3, [pc, #216]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800eef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef6:	2202      	movs	r2, #2
 800eef8:	4013      	ands	r3, r2
 800eefa:	d0f1      	beq.n	800eee0 <HAL_RCC_OscConfig+0x24c>
 800eefc:	e018      	b.n	800ef30 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eefe:	4b33      	ldr	r3, [pc, #204]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ef00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef02:	4b32      	ldr	r3, [pc, #200]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ef04:	2101      	movs	r1, #1
 800ef06:	438a      	bics	r2, r1
 800ef08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef0a:	f7fd fec5 	bl	800cc98 <HAL_GetTick>
 800ef0e:	0003      	movs	r3, r0
 800ef10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ef12:	e008      	b.n	800ef26 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ef14:	f7fd fec0 	bl	800cc98 <HAL_GetTick>
 800ef18:	0002      	movs	r2, r0
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	2b02      	cmp	r3, #2
 800ef20:	d901      	bls.n	800ef26 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800ef22:	2303      	movs	r3, #3
 800ef24:	e236      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ef26:	4b29      	ldr	r3, [pc, #164]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ef28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef2a:	2202      	movs	r2, #2
 800ef2c:	4013      	ands	r3, r2
 800ef2e:	d1f1      	bne.n	800ef14 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	2204      	movs	r2, #4
 800ef36:	4013      	ands	r3, r2
 800ef38:	d100      	bne.n	800ef3c <HAL_RCC_OscConfig+0x2a8>
 800ef3a:	e0b5      	b.n	800f0a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ef3c:	201f      	movs	r0, #31
 800ef3e:	183b      	adds	r3, r7, r0
 800ef40:	2200      	movs	r2, #0
 800ef42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ef44:	4b21      	ldr	r3, [pc, #132]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ef46:	69da      	ldr	r2, [r3, #28]
 800ef48:	2380      	movs	r3, #128	; 0x80
 800ef4a:	055b      	lsls	r3, r3, #21
 800ef4c:	4013      	ands	r3, r2
 800ef4e:	d110      	bne.n	800ef72 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ef50:	4b1e      	ldr	r3, [pc, #120]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ef52:	69da      	ldr	r2, [r3, #28]
 800ef54:	4b1d      	ldr	r3, [pc, #116]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ef56:	2180      	movs	r1, #128	; 0x80
 800ef58:	0549      	lsls	r1, r1, #21
 800ef5a:	430a      	orrs	r2, r1
 800ef5c:	61da      	str	r2, [r3, #28]
 800ef5e:	4b1b      	ldr	r3, [pc, #108]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800ef60:	69da      	ldr	r2, [r3, #28]
 800ef62:	2380      	movs	r3, #128	; 0x80
 800ef64:	055b      	lsls	r3, r3, #21
 800ef66:	4013      	ands	r3, r2
 800ef68:	60fb      	str	r3, [r7, #12]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ef6c:	183b      	adds	r3, r7, r0
 800ef6e:	2201      	movs	r2, #1
 800ef70:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ef72:	4b19      	ldr	r3, [pc, #100]	; (800efd8 <HAL_RCC_OscConfig+0x344>)
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	2380      	movs	r3, #128	; 0x80
 800ef78:	005b      	lsls	r3, r3, #1
 800ef7a:	4013      	ands	r3, r2
 800ef7c:	d11a      	bne.n	800efb4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ef7e:	4b16      	ldr	r3, [pc, #88]	; (800efd8 <HAL_RCC_OscConfig+0x344>)
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	4b15      	ldr	r3, [pc, #84]	; (800efd8 <HAL_RCC_OscConfig+0x344>)
 800ef84:	2180      	movs	r1, #128	; 0x80
 800ef86:	0049      	lsls	r1, r1, #1
 800ef88:	430a      	orrs	r2, r1
 800ef8a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ef8c:	f7fd fe84 	bl	800cc98 <HAL_GetTick>
 800ef90:	0003      	movs	r3, r0
 800ef92:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ef94:	e008      	b.n	800efa8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ef96:	f7fd fe7f 	bl	800cc98 <HAL_GetTick>
 800ef9a:	0002      	movs	r2, r0
 800ef9c:	69bb      	ldr	r3, [r7, #24]
 800ef9e:	1ad3      	subs	r3, r2, r3
 800efa0:	2b64      	cmp	r3, #100	; 0x64
 800efa2:	d901      	bls.n	800efa8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800efa4:	2303      	movs	r3, #3
 800efa6:	e1f5      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800efa8:	4b0b      	ldr	r3, [pc, #44]	; (800efd8 <HAL_RCC_OscConfig+0x344>)
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	2380      	movs	r3, #128	; 0x80
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	4013      	ands	r3, r2
 800efb2:	d0f0      	beq.n	800ef96 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	689b      	ldr	r3, [r3, #8]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d10f      	bne.n	800efdc <HAL_RCC_OscConfig+0x348>
 800efbc:	4b03      	ldr	r3, [pc, #12]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800efbe:	6a1a      	ldr	r2, [r3, #32]
 800efc0:	4b02      	ldr	r3, [pc, #8]	; (800efcc <HAL_RCC_OscConfig+0x338>)
 800efc2:	2101      	movs	r1, #1
 800efc4:	430a      	orrs	r2, r1
 800efc6:	621a      	str	r2, [r3, #32]
 800efc8:	e036      	b.n	800f038 <HAL_RCC_OscConfig+0x3a4>
 800efca:	46c0      	nop			; (mov r8, r8)
 800efcc:	40021000 	.word	0x40021000
 800efd0:	fffeffff 	.word	0xfffeffff
 800efd4:	fffbffff 	.word	0xfffbffff
 800efd8:	40007000 	.word	0x40007000
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d10c      	bne.n	800effe <HAL_RCC_OscConfig+0x36a>
 800efe4:	4bca      	ldr	r3, [pc, #808]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800efe6:	6a1a      	ldr	r2, [r3, #32]
 800efe8:	4bc9      	ldr	r3, [pc, #804]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800efea:	2101      	movs	r1, #1
 800efec:	438a      	bics	r2, r1
 800efee:	621a      	str	r2, [r3, #32]
 800eff0:	4bc7      	ldr	r3, [pc, #796]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800eff2:	6a1a      	ldr	r2, [r3, #32]
 800eff4:	4bc6      	ldr	r3, [pc, #792]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800eff6:	2104      	movs	r1, #4
 800eff8:	438a      	bics	r2, r1
 800effa:	621a      	str	r2, [r3, #32]
 800effc:	e01c      	b.n	800f038 <HAL_RCC_OscConfig+0x3a4>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	689b      	ldr	r3, [r3, #8]
 800f002:	2b05      	cmp	r3, #5
 800f004:	d10c      	bne.n	800f020 <HAL_RCC_OscConfig+0x38c>
 800f006:	4bc2      	ldr	r3, [pc, #776]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f008:	6a1a      	ldr	r2, [r3, #32]
 800f00a:	4bc1      	ldr	r3, [pc, #772]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f00c:	2104      	movs	r1, #4
 800f00e:	430a      	orrs	r2, r1
 800f010:	621a      	str	r2, [r3, #32]
 800f012:	4bbf      	ldr	r3, [pc, #764]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f014:	6a1a      	ldr	r2, [r3, #32]
 800f016:	4bbe      	ldr	r3, [pc, #760]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f018:	2101      	movs	r1, #1
 800f01a:	430a      	orrs	r2, r1
 800f01c:	621a      	str	r2, [r3, #32]
 800f01e:	e00b      	b.n	800f038 <HAL_RCC_OscConfig+0x3a4>
 800f020:	4bbb      	ldr	r3, [pc, #748]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f022:	6a1a      	ldr	r2, [r3, #32]
 800f024:	4bba      	ldr	r3, [pc, #744]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f026:	2101      	movs	r1, #1
 800f028:	438a      	bics	r2, r1
 800f02a:	621a      	str	r2, [r3, #32]
 800f02c:	4bb8      	ldr	r3, [pc, #736]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f02e:	6a1a      	ldr	r2, [r3, #32]
 800f030:	4bb7      	ldr	r3, [pc, #732]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f032:	2104      	movs	r1, #4
 800f034:	438a      	bics	r2, r1
 800f036:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	689b      	ldr	r3, [r3, #8]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d014      	beq.n	800f06a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f040:	f7fd fe2a 	bl	800cc98 <HAL_GetTick>
 800f044:	0003      	movs	r3, r0
 800f046:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f048:	e009      	b.n	800f05e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f04a:	f7fd fe25 	bl	800cc98 <HAL_GetTick>
 800f04e:	0002      	movs	r2, r0
 800f050:	69bb      	ldr	r3, [r7, #24]
 800f052:	1ad3      	subs	r3, r2, r3
 800f054:	4aaf      	ldr	r2, [pc, #700]	; (800f314 <HAL_RCC_OscConfig+0x680>)
 800f056:	4293      	cmp	r3, r2
 800f058:	d901      	bls.n	800f05e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800f05a:	2303      	movs	r3, #3
 800f05c:	e19a      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f05e:	4bac      	ldr	r3, [pc, #688]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f060:	6a1b      	ldr	r3, [r3, #32]
 800f062:	2202      	movs	r2, #2
 800f064:	4013      	ands	r3, r2
 800f066:	d0f0      	beq.n	800f04a <HAL_RCC_OscConfig+0x3b6>
 800f068:	e013      	b.n	800f092 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f06a:	f7fd fe15 	bl	800cc98 <HAL_GetTick>
 800f06e:	0003      	movs	r3, r0
 800f070:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f072:	e009      	b.n	800f088 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f074:	f7fd fe10 	bl	800cc98 <HAL_GetTick>
 800f078:	0002      	movs	r2, r0
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	4aa5      	ldr	r2, [pc, #660]	; (800f314 <HAL_RCC_OscConfig+0x680>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d901      	bls.n	800f088 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800f084:	2303      	movs	r3, #3
 800f086:	e185      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f088:	4ba1      	ldr	r3, [pc, #644]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f08a:	6a1b      	ldr	r3, [r3, #32]
 800f08c:	2202      	movs	r2, #2
 800f08e:	4013      	ands	r3, r2
 800f090:	d1f0      	bne.n	800f074 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800f092:	231f      	movs	r3, #31
 800f094:	18fb      	adds	r3, r7, r3
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d105      	bne.n	800f0a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f09c:	4b9c      	ldr	r3, [pc, #624]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f09e:	69da      	ldr	r2, [r3, #28]
 800f0a0:	4b9b      	ldr	r3, [pc, #620]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f0a2:	499d      	ldr	r1, [pc, #628]	; (800f318 <HAL_RCC_OscConfig+0x684>)
 800f0a4:	400a      	ands	r2, r1
 800f0a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	2210      	movs	r2, #16
 800f0ae:	4013      	ands	r3, r2
 800f0b0:	d063      	beq.n	800f17a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	695b      	ldr	r3, [r3, #20]
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	d12a      	bne.n	800f110 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800f0ba:	4b95      	ldr	r3, [pc, #596]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f0bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0be:	4b94      	ldr	r3, [pc, #592]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f0c0:	2104      	movs	r1, #4
 800f0c2:	430a      	orrs	r2, r1
 800f0c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800f0c6:	4b92      	ldr	r3, [pc, #584]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f0c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0ca:	4b91      	ldr	r3, [pc, #580]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f0cc:	2101      	movs	r1, #1
 800f0ce:	430a      	orrs	r2, r1
 800f0d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f0d2:	f7fd fde1 	bl	800cc98 <HAL_GetTick>
 800f0d6:	0003      	movs	r3, r0
 800f0d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800f0da:	e008      	b.n	800f0ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800f0dc:	f7fd fddc 	bl	800cc98 <HAL_GetTick>
 800f0e0:	0002      	movs	r2, r0
 800f0e2:	69bb      	ldr	r3, [r7, #24]
 800f0e4:	1ad3      	subs	r3, r2, r3
 800f0e6:	2b02      	cmp	r3, #2
 800f0e8:	d901      	bls.n	800f0ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800f0ea:	2303      	movs	r3, #3
 800f0ec:	e152      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800f0ee:	4b88      	ldr	r3, [pc, #544]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0f2:	2202      	movs	r2, #2
 800f0f4:	4013      	ands	r3, r2
 800f0f6:	d0f1      	beq.n	800f0dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800f0f8:	4b85      	ldr	r3, [pc, #532]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0fc:	22f8      	movs	r2, #248	; 0xf8
 800f0fe:	4393      	bics	r3, r2
 800f100:	0019      	movs	r1, r3
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	699b      	ldr	r3, [r3, #24]
 800f106:	00da      	lsls	r2, r3, #3
 800f108:	4b81      	ldr	r3, [pc, #516]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f10a:	430a      	orrs	r2, r1
 800f10c:	635a      	str	r2, [r3, #52]	; 0x34
 800f10e:	e034      	b.n	800f17a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	695b      	ldr	r3, [r3, #20]
 800f114:	3305      	adds	r3, #5
 800f116:	d111      	bne.n	800f13c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800f118:	4b7d      	ldr	r3, [pc, #500]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f11a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f11c:	4b7c      	ldr	r3, [pc, #496]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f11e:	2104      	movs	r1, #4
 800f120:	438a      	bics	r2, r1
 800f122:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800f124:	4b7a      	ldr	r3, [pc, #488]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f128:	22f8      	movs	r2, #248	; 0xf8
 800f12a:	4393      	bics	r3, r2
 800f12c:	0019      	movs	r1, r3
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	699b      	ldr	r3, [r3, #24]
 800f132:	00da      	lsls	r2, r3, #3
 800f134:	4b76      	ldr	r3, [pc, #472]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f136:	430a      	orrs	r2, r1
 800f138:	635a      	str	r2, [r3, #52]	; 0x34
 800f13a:	e01e      	b.n	800f17a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800f13c:	4b74      	ldr	r3, [pc, #464]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f13e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f140:	4b73      	ldr	r3, [pc, #460]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f142:	2104      	movs	r1, #4
 800f144:	430a      	orrs	r2, r1
 800f146:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800f148:	4b71      	ldr	r3, [pc, #452]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f14a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f14c:	4b70      	ldr	r3, [pc, #448]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f14e:	2101      	movs	r1, #1
 800f150:	438a      	bics	r2, r1
 800f152:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f154:	f7fd fda0 	bl	800cc98 <HAL_GetTick>
 800f158:	0003      	movs	r3, r0
 800f15a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800f15c:	e008      	b.n	800f170 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800f15e:	f7fd fd9b 	bl	800cc98 <HAL_GetTick>
 800f162:	0002      	movs	r2, r0
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	1ad3      	subs	r3, r2, r3
 800f168:	2b02      	cmp	r3, #2
 800f16a:	d901      	bls.n	800f170 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800f16c:	2303      	movs	r3, #3
 800f16e:	e111      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800f170:	4b67      	ldr	r3, [pc, #412]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f174:	2202      	movs	r2, #2
 800f176:	4013      	ands	r3, r2
 800f178:	d1f1      	bne.n	800f15e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2220      	movs	r2, #32
 800f180:	4013      	ands	r3, r2
 800f182:	d05c      	beq.n	800f23e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800f184:	4b62      	ldr	r3, [pc, #392]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	220c      	movs	r2, #12
 800f18a:	4013      	ands	r3, r2
 800f18c:	2b0c      	cmp	r3, #12
 800f18e:	d00e      	beq.n	800f1ae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800f190:	4b5f      	ldr	r3, [pc, #380]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	220c      	movs	r2, #12
 800f196:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800f198:	2b08      	cmp	r3, #8
 800f19a:	d114      	bne.n	800f1c6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800f19c:	4b5c      	ldr	r3, [pc, #368]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f19e:	685a      	ldr	r2, [r3, #4]
 800f1a0:	23c0      	movs	r3, #192	; 0xc0
 800f1a2:	025b      	lsls	r3, r3, #9
 800f1a4:	401a      	ands	r2, r3
 800f1a6:	23c0      	movs	r3, #192	; 0xc0
 800f1a8:	025b      	lsls	r3, r3, #9
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d10b      	bne.n	800f1c6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800f1ae:	4b58      	ldr	r3, [pc, #352]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f1b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1b2:	2380      	movs	r3, #128	; 0x80
 800f1b4:	025b      	lsls	r3, r3, #9
 800f1b6:	4013      	ands	r3, r2
 800f1b8:	d040      	beq.n	800f23c <HAL_RCC_OscConfig+0x5a8>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6a1b      	ldr	r3, [r3, #32]
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d03c      	beq.n	800f23c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e0e6      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6a1b      	ldr	r3, [r3, #32]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d01b      	beq.n	800f206 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800f1ce:	4b50      	ldr	r3, [pc, #320]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f1d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1d2:	4b4f      	ldr	r3, [pc, #316]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f1d4:	2180      	movs	r1, #128	; 0x80
 800f1d6:	0249      	lsls	r1, r1, #9
 800f1d8:	430a      	orrs	r2, r1
 800f1da:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f1dc:	f7fd fd5c 	bl	800cc98 <HAL_GetTick>
 800f1e0:	0003      	movs	r3, r0
 800f1e2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800f1e4:	e008      	b.n	800f1f8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f1e6:	f7fd fd57 	bl	800cc98 <HAL_GetTick>
 800f1ea:	0002      	movs	r2, r0
 800f1ec:	69bb      	ldr	r3, [r7, #24]
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	2b02      	cmp	r3, #2
 800f1f2:	d901      	bls.n	800f1f8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800f1f4:	2303      	movs	r3, #3
 800f1f6:	e0cd      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800f1f8:	4b45      	ldr	r3, [pc, #276]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f1fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1fc:	2380      	movs	r3, #128	; 0x80
 800f1fe:	025b      	lsls	r3, r3, #9
 800f200:	4013      	ands	r3, r2
 800f202:	d0f0      	beq.n	800f1e6 <HAL_RCC_OscConfig+0x552>
 800f204:	e01b      	b.n	800f23e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800f206:	4b42      	ldr	r3, [pc, #264]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f20a:	4b41      	ldr	r3, [pc, #260]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f20c:	4943      	ldr	r1, [pc, #268]	; (800f31c <HAL_RCC_OscConfig+0x688>)
 800f20e:	400a      	ands	r2, r1
 800f210:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f212:	f7fd fd41 	bl	800cc98 <HAL_GetTick>
 800f216:	0003      	movs	r3, r0
 800f218:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800f21a:	e008      	b.n	800f22e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f21c:	f7fd fd3c 	bl	800cc98 <HAL_GetTick>
 800f220:	0002      	movs	r2, r0
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	1ad3      	subs	r3, r2, r3
 800f226:	2b02      	cmp	r3, #2
 800f228:	d901      	bls.n	800f22e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800f22a:	2303      	movs	r3, #3
 800f22c:	e0b2      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800f22e:	4b38      	ldr	r3, [pc, #224]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f232:	2380      	movs	r3, #128	; 0x80
 800f234:	025b      	lsls	r3, r3, #9
 800f236:	4013      	ands	r3, r2
 800f238:	d1f0      	bne.n	800f21c <HAL_RCC_OscConfig+0x588>
 800f23a:	e000      	b.n	800f23e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800f23c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f242:	2b00      	cmp	r3, #0
 800f244:	d100      	bne.n	800f248 <HAL_RCC_OscConfig+0x5b4>
 800f246:	e0a4      	b.n	800f392 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f248:	4b31      	ldr	r3, [pc, #196]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	220c      	movs	r2, #12
 800f24e:	4013      	ands	r3, r2
 800f250:	2b08      	cmp	r3, #8
 800f252:	d100      	bne.n	800f256 <HAL_RCC_OscConfig+0x5c2>
 800f254:	e078      	b.n	800f348 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25a:	2b02      	cmp	r3, #2
 800f25c:	d14c      	bne.n	800f2f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f25e:	4b2c      	ldr	r3, [pc, #176]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	4b2b      	ldr	r3, [pc, #172]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f264:	492e      	ldr	r1, [pc, #184]	; (800f320 <HAL_RCC_OscConfig+0x68c>)
 800f266:	400a      	ands	r2, r1
 800f268:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f26a:	f7fd fd15 	bl	800cc98 <HAL_GetTick>
 800f26e:	0003      	movs	r3, r0
 800f270:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f272:	e008      	b.n	800f286 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f274:	f7fd fd10 	bl	800cc98 <HAL_GetTick>
 800f278:	0002      	movs	r2, r0
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	1ad3      	subs	r3, r2, r3
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d901      	bls.n	800f286 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800f282:	2303      	movs	r3, #3
 800f284:	e086      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f286:	4b22      	ldr	r3, [pc, #136]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f288:	681a      	ldr	r2, [r3, #0]
 800f28a:	2380      	movs	r3, #128	; 0x80
 800f28c:	049b      	lsls	r3, r3, #18
 800f28e:	4013      	ands	r3, r2
 800f290:	d1f0      	bne.n	800f274 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f292:	4b1f      	ldr	r3, [pc, #124]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f296:	220f      	movs	r2, #15
 800f298:	4393      	bics	r3, r2
 800f29a:	0019      	movs	r1, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2a0:	4b1b      	ldr	r3, [pc, #108]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f2a2:	430a      	orrs	r2, r1
 800f2a4:	62da      	str	r2, [r3, #44]	; 0x2c
 800f2a6:	4b1a      	ldr	r3, [pc, #104]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	4a1e      	ldr	r2, [pc, #120]	; (800f324 <HAL_RCC_OscConfig+0x690>)
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	0019      	movs	r1, r3
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b8:	431a      	orrs	r2, r3
 800f2ba:	4b15      	ldr	r3, [pc, #84]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f2bc:	430a      	orrs	r2, r1
 800f2be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f2c0:	4b13      	ldr	r3, [pc, #76]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	4b12      	ldr	r3, [pc, #72]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f2c6:	2180      	movs	r1, #128	; 0x80
 800f2c8:	0449      	lsls	r1, r1, #17
 800f2ca:	430a      	orrs	r2, r1
 800f2cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f2ce:	f7fd fce3 	bl	800cc98 <HAL_GetTick>
 800f2d2:	0003      	movs	r3, r0
 800f2d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800f2d6:	e008      	b.n	800f2ea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f2d8:	f7fd fcde 	bl	800cc98 <HAL_GetTick>
 800f2dc:	0002      	movs	r2, r0
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	1ad3      	subs	r3, r2, r3
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	d901      	bls.n	800f2ea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800f2e6:	2303      	movs	r3, #3
 800f2e8:	e054      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800f2ea:	4b09      	ldr	r3, [pc, #36]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f2ec:	681a      	ldr	r2, [r3, #0]
 800f2ee:	2380      	movs	r3, #128	; 0x80
 800f2f0:	049b      	lsls	r3, r3, #18
 800f2f2:	4013      	ands	r3, r2
 800f2f4:	d0f0      	beq.n	800f2d8 <HAL_RCC_OscConfig+0x644>
 800f2f6:	e04c      	b.n	800f392 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f2f8:	4b05      	ldr	r3, [pc, #20]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	4b04      	ldr	r3, [pc, #16]	; (800f310 <HAL_RCC_OscConfig+0x67c>)
 800f2fe:	4908      	ldr	r1, [pc, #32]	; (800f320 <HAL_RCC_OscConfig+0x68c>)
 800f300:	400a      	ands	r2, r1
 800f302:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f304:	f7fd fcc8 	bl	800cc98 <HAL_GetTick>
 800f308:	0003      	movs	r3, r0
 800f30a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f30c:	e015      	b.n	800f33a <HAL_RCC_OscConfig+0x6a6>
 800f30e:	46c0      	nop			; (mov r8, r8)
 800f310:	40021000 	.word	0x40021000
 800f314:	00001388 	.word	0x00001388
 800f318:	efffffff 	.word	0xefffffff
 800f31c:	fffeffff 	.word	0xfffeffff
 800f320:	feffffff 	.word	0xfeffffff
 800f324:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f328:	f7fd fcb6 	bl	800cc98 <HAL_GetTick>
 800f32c:	0002      	movs	r2, r0
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	1ad3      	subs	r3, r2, r3
 800f332:	2b02      	cmp	r3, #2
 800f334:	d901      	bls.n	800f33a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800f336:	2303      	movs	r3, #3
 800f338:	e02c      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800f33a:	4b18      	ldr	r3, [pc, #96]	; (800f39c <HAL_RCC_OscConfig+0x708>)
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	2380      	movs	r3, #128	; 0x80
 800f340:	049b      	lsls	r3, r3, #18
 800f342:	4013      	ands	r3, r2
 800f344:	d1f0      	bne.n	800f328 <HAL_RCC_OscConfig+0x694>
 800f346:	e024      	b.n	800f392 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	d101      	bne.n	800f354 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800f350:	2301      	movs	r3, #1
 800f352:	e01f      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800f354:	4b11      	ldr	r3, [pc, #68]	; (800f39c <HAL_RCC_OscConfig+0x708>)
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800f35a:	4b10      	ldr	r3, [pc, #64]	; (800f39c <HAL_RCC_OscConfig+0x708>)
 800f35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f35e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f360:	697a      	ldr	r2, [r7, #20]
 800f362:	23c0      	movs	r3, #192	; 0xc0
 800f364:	025b      	lsls	r3, r3, #9
 800f366:	401a      	ands	r2, r3
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d10e      	bne.n	800f38e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	220f      	movs	r2, #15
 800f374:	401a      	ands	r2, r3
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d107      	bne.n	800f38e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800f37e:	697a      	ldr	r2, [r7, #20]
 800f380:	23f0      	movs	r3, #240	; 0xf0
 800f382:	039b      	lsls	r3, r3, #14
 800f384:	401a      	ands	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800f38a:	429a      	cmp	r2, r3
 800f38c:	d001      	beq.n	800f392 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800f38e:	2301      	movs	r3, #1
 800f390:	e000      	b.n	800f394 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800f392:	2300      	movs	r3, #0
}
 800f394:	0018      	movs	r0, r3
 800f396:	46bd      	mov	sp, r7
 800f398:	b008      	add	sp, #32
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	40021000 	.word	0x40021000

0800f3a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
 800f3a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d101      	bne.n	800f3b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	e0bf      	b.n	800f534 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f3b4:	4b61      	ldr	r3, [pc, #388]	; (800f53c <HAL_RCC_ClockConfig+0x19c>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	4013      	ands	r3, r2
 800f3bc:	683a      	ldr	r2, [r7, #0]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d911      	bls.n	800f3e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f3c2:	4b5e      	ldr	r3, [pc, #376]	; (800f53c <HAL_RCC_ClockConfig+0x19c>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	4393      	bics	r3, r2
 800f3ca:	0019      	movs	r1, r3
 800f3cc:	4b5b      	ldr	r3, [pc, #364]	; (800f53c <HAL_RCC_ClockConfig+0x19c>)
 800f3ce:	683a      	ldr	r2, [r7, #0]
 800f3d0:	430a      	orrs	r2, r1
 800f3d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3d4:	4b59      	ldr	r3, [pc, #356]	; (800f53c <HAL_RCC_ClockConfig+0x19c>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2201      	movs	r2, #1
 800f3da:	4013      	ands	r3, r2
 800f3dc:	683a      	ldr	r2, [r7, #0]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d001      	beq.n	800f3e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e0a6      	b.n	800f534 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2202      	movs	r2, #2
 800f3ec:	4013      	ands	r3, r2
 800f3ee:	d015      	beq.n	800f41c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	2204      	movs	r2, #4
 800f3f6:	4013      	ands	r3, r2
 800f3f8:	d006      	beq.n	800f408 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800f3fa:	4b51      	ldr	r3, [pc, #324]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f3fc:	685a      	ldr	r2, [r3, #4]
 800f3fe:	4b50      	ldr	r3, [pc, #320]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f400:	21e0      	movs	r1, #224	; 0xe0
 800f402:	00c9      	lsls	r1, r1, #3
 800f404:	430a      	orrs	r2, r1
 800f406:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f408:	4b4d      	ldr	r3, [pc, #308]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f40a:	685b      	ldr	r3, [r3, #4]
 800f40c:	22f0      	movs	r2, #240	; 0xf0
 800f40e:	4393      	bics	r3, r2
 800f410:	0019      	movs	r1, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	689a      	ldr	r2, [r3, #8]
 800f416:	4b4a      	ldr	r3, [pc, #296]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f418:	430a      	orrs	r2, r1
 800f41a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	2201      	movs	r2, #1
 800f422:	4013      	ands	r3, r2
 800f424:	d04c      	beq.n	800f4c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d107      	bne.n	800f43e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f42e:	4b44      	ldr	r3, [pc, #272]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f430:	681a      	ldr	r2, [r3, #0]
 800f432:	2380      	movs	r3, #128	; 0x80
 800f434:	029b      	lsls	r3, r3, #10
 800f436:	4013      	ands	r3, r2
 800f438:	d120      	bne.n	800f47c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800f43a:	2301      	movs	r3, #1
 800f43c:	e07a      	b.n	800f534 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	2b02      	cmp	r3, #2
 800f444:	d107      	bne.n	800f456 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f446:	4b3e      	ldr	r3, [pc, #248]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	2380      	movs	r3, #128	; 0x80
 800f44c:	049b      	lsls	r3, r3, #18
 800f44e:	4013      	ands	r3, r2
 800f450:	d114      	bne.n	800f47c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800f452:	2301      	movs	r3, #1
 800f454:	e06e      	b.n	800f534 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	2b03      	cmp	r3, #3
 800f45c:	d107      	bne.n	800f46e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800f45e:	4b38      	ldr	r3, [pc, #224]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f462:	2380      	movs	r3, #128	; 0x80
 800f464:	025b      	lsls	r3, r3, #9
 800f466:	4013      	ands	r3, r2
 800f468:	d108      	bne.n	800f47c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800f46a:	2301      	movs	r3, #1
 800f46c:	e062      	b.n	800f534 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f46e:	4b34      	ldr	r3, [pc, #208]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2202      	movs	r2, #2
 800f474:	4013      	ands	r3, r2
 800f476:	d101      	bne.n	800f47c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800f478:	2301      	movs	r3, #1
 800f47a:	e05b      	b.n	800f534 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f47c:	4b30      	ldr	r3, [pc, #192]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	2203      	movs	r2, #3
 800f482:	4393      	bics	r3, r2
 800f484:	0019      	movs	r1, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	685a      	ldr	r2, [r3, #4]
 800f48a:	4b2d      	ldr	r3, [pc, #180]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f48c:	430a      	orrs	r2, r1
 800f48e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f490:	f7fd fc02 	bl	800cc98 <HAL_GetTick>
 800f494:	0003      	movs	r3, r0
 800f496:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f498:	e009      	b.n	800f4ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f49a:	f7fd fbfd 	bl	800cc98 <HAL_GetTick>
 800f49e:	0002      	movs	r2, r0
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	1ad3      	subs	r3, r2, r3
 800f4a4:	4a27      	ldr	r2, [pc, #156]	; (800f544 <HAL_RCC_ClockConfig+0x1a4>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d901      	bls.n	800f4ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f4aa:	2303      	movs	r3, #3
 800f4ac:	e042      	b.n	800f534 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f4ae:	4b24      	ldr	r3, [pc, #144]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	220c      	movs	r2, #12
 800f4b4:	401a      	ands	r2, r3
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d1ec      	bne.n	800f49a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f4c0:	4b1e      	ldr	r3, [pc, #120]	; (800f53c <HAL_RCC_ClockConfig+0x19c>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	4013      	ands	r3, r2
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d211      	bcs.n	800f4f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f4ce:	4b1b      	ldr	r3, [pc, #108]	; (800f53c <HAL_RCC_ClockConfig+0x19c>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	4393      	bics	r3, r2
 800f4d6:	0019      	movs	r1, r3
 800f4d8:	4b18      	ldr	r3, [pc, #96]	; (800f53c <HAL_RCC_ClockConfig+0x19c>)
 800f4da:	683a      	ldr	r2, [r7, #0]
 800f4dc:	430a      	orrs	r2, r1
 800f4de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f4e0:	4b16      	ldr	r3, [pc, #88]	; (800f53c <HAL_RCC_ClockConfig+0x19c>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	4013      	ands	r3, r2
 800f4e8:	683a      	ldr	r2, [r7, #0]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d001      	beq.n	800f4f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e020      	b.n	800f534 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2204      	movs	r2, #4
 800f4f8:	4013      	ands	r3, r2
 800f4fa:	d009      	beq.n	800f510 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800f4fc:	4b10      	ldr	r3, [pc, #64]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f4fe:	685b      	ldr	r3, [r3, #4]
 800f500:	4a11      	ldr	r2, [pc, #68]	; (800f548 <HAL_RCC_ClockConfig+0x1a8>)
 800f502:	4013      	ands	r3, r2
 800f504:	0019      	movs	r1, r3
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	68da      	ldr	r2, [r3, #12]
 800f50a:	4b0d      	ldr	r3, [pc, #52]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f50c:	430a      	orrs	r2, r1
 800f50e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800f510:	f000 f820 	bl	800f554 <HAL_RCC_GetSysClockFreq>
 800f514:	0001      	movs	r1, r0
 800f516:	4b0a      	ldr	r3, [pc, #40]	; (800f540 <HAL_RCC_ClockConfig+0x1a0>)
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	091b      	lsrs	r3, r3, #4
 800f51c:	220f      	movs	r2, #15
 800f51e:	4013      	ands	r3, r2
 800f520:	4a0a      	ldr	r2, [pc, #40]	; (800f54c <HAL_RCC_ClockConfig+0x1ac>)
 800f522:	5cd3      	ldrb	r3, [r2, r3]
 800f524:	000a      	movs	r2, r1
 800f526:	40da      	lsrs	r2, r3
 800f528:	4b09      	ldr	r3, [pc, #36]	; (800f550 <HAL_RCC_ClockConfig+0x1b0>)
 800f52a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800f52c:	2000      	movs	r0, #0
 800f52e:	f7fd fb6d 	bl	800cc0c <HAL_InitTick>
  
  return HAL_OK;
 800f532:	2300      	movs	r3, #0
}
 800f534:	0018      	movs	r0, r3
 800f536:	46bd      	mov	sp, r7
 800f538:	b004      	add	sp, #16
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	40022000 	.word	0x40022000
 800f540:	40021000 	.word	0x40021000
 800f544:	00001388 	.word	0x00001388
 800f548:	fffff8ff 	.word	0xfffff8ff
 800f54c:	08010ef4 	.word	0x08010ef4
 800f550:	20000408 	.word	0x20000408

0800f554 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f554:	b590      	push	{r4, r7, lr}
 800f556:	b08f      	sub	sp, #60	; 0x3c
 800f558:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800f55a:	2314      	movs	r3, #20
 800f55c:	18fb      	adds	r3, r7, r3
 800f55e:	4a38      	ldr	r2, [pc, #224]	; (800f640 <HAL_RCC_GetSysClockFreq+0xec>)
 800f560:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f562:	c313      	stmia	r3!, {r0, r1, r4}
 800f564:	6812      	ldr	r2, [r2, #0]
 800f566:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800f568:	1d3b      	adds	r3, r7, #4
 800f56a:	4a36      	ldr	r2, [pc, #216]	; (800f644 <HAL_RCC_GetSysClockFreq+0xf0>)
 800f56c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f56e:	c313      	stmia	r3!, {r0, r1, r4}
 800f570:	6812      	ldr	r2, [r2, #0]
 800f572:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800f574:	2300      	movs	r3, #0
 800f576:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f578:	2300      	movs	r3, #0
 800f57a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f57c:	2300      	movs	r3, #0
 800f57e:	637b      	str	r3, [r7, #52]	; 0x34
 800f580:	2300      	movs	r3, #0
 800f582:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800f584:	2300      	movs	r3, #0
 800f586:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800f588:	4b2f      	ldr	r3, [pc, #188]	; (800f648 <HAL_RCC_GetSysClockFreq+0xf4>)
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f590:	220c      	movs	r2, #12
 800f592:	4013      	ands	r3, r2
 800f594:	2b0c      	cmp	r3, #12
 800f596:	d047      	beq.n	800f628 <HAL_RCC_GetSysClockFreq+0xd4>
 800f598:	d849      	bhi.n	800f62e <HAL_RCC_GetSysClockFreq+0xda>
 800f59a:	2b04      	cmp	r3, #4
 800f59c:	d002      	beq.n	800f5a4 <HAL_RCC_GetSysClockFreq+0x50>
 800f59e:	2b08      	cmp	r3, #8
 800f5a0:	d003      	beq.n	800f5aa <HAL_RCC_GetSysClockFreq+0x56>
 800f5a2:	e044      	b.n	800f62e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f5a4:	4b29      	ldr	r3, [pc, #164]	; (800f64c <HAL_RCC_GetSysClockFreq+0xf8>)
 800f5a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800f5a8:	e044      	b.n	800f634 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800f5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ac:	0c9b      	lsrs	r3, r3, #18
 800f5ae:	220f      	movs	r2, #15
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	2214      	movs	r2, #20
 800f5b4:	18ba      	adds	r2, r7, r2
 800f5b6:	5cd3      	ldrb	r3, [r2, r3]
 800f5b8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800f5ba:	4b23      	ldr	r3, [pc, #140]	; (800f648 <HAL_RCC_GetSysClockFreq+0xf4>)
 800f5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5be:	220f      	movs	r2, #15
 800f5c0:	4013      	ands	r3, r2
 800f5c2:	1d3a      	adds	r2, r7, #4
 800f5c4:	5cd3      	ldrb	r3, [r2, r3]
 800f5c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800f5c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5ca:	23c0      	movs	r3, #192	; 0xc0
 800f5cc:	025b      	lsls	r3, r3, #9
 800f5ce:	401a      	ands	r2, r3
 800f5d0:	2380      	movs	r3, #128	; 0x80
 800f5d2:	025b      	lsls	r3, r3, #9
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d109      	bne.n	800f5ec <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800f5d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5da:	481c      	ldr	r0, [pc, #112]	; (800f64c <HAL_RCC_GetSysClockFreq+0xf8>)
 800f5dc:	f7f8 fd92 	bl	8008104 <__udivsi3>
 800f5e0:	0003      	movs	r3, r0
 800f5e2:	001a      	movs	r2, r3
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	4353      	muls	r3, r2
 800f5e8:	637b      	str	r3, [r7, #52]	; 0x34
 800f5ea:	e01a      	b.n	800f622 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800f5ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5ee:	23c0      	movs	r3, #192	; 0xc0
 800f5f0:	025b      	lsls	r3, r3, #9
 800f5f2:	401a      	ands	r2, r3
 800f5f4:	23c0      	movs	r3, #192	; 0xc0
 800f5f6:	025b      	lsls	r3, r3, #9
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d109      	bne.n	800f610 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800f5fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5fe:	4814      	ldr	r0, [pc, #80]	; (800f650 <HAL_RCC_GetSysClockFreq+0xfc>)
 800f600:	f7f8 fd80 	bl	8008104 <__udivsi3>
 800f604:	0003      	movs	r3, r0
 800f606:	001a      	movs	r2, r3
 800f608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60a:	4353      	muls	r3, r2
 800f60c:	637b      	str	r3, [r7, #52]	; 0x34
 800f60e:	e008      	b.n	800f622 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800f610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f612:	480e      	ldr	r0, [pc, #56]	; (800f64c <HAL_RCC_GetSysClockFreq+0xf8>)
 800f614:	f7f8 fd76 	bl	8008104 <__udivsi3>
 800f618:	0003      	movs	r3, r0
 800f61a:	001a      	movs	r2, r3
 800f61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61e:	4353      	muls	r3, r2
 800f620:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800f622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f624:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800f626:	e005      	b.n	800f634 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800f628:	4b09      	ldr	r3, [pc, #36]	; (800f650 <HAL_RCC_GetSysClockFreq+0xfc>)
 800f62a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800f62c:	e002      	b.n	800f634 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800f62e:	4b07      	ldr	r3, [pc, #28]	; (800f64c <HAL_RCC_GetSysClockFreq+0xf8>)
 800f630:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800f632:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800f634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800f636:	0018      	movs	r0, r3
 800f638:	46bd      	mov	sp, r7
 800f63a:	b00f      	add	sp, #60	; 0x3c
 800f63c:	bd90      	pop	{r4, r7, pc}
 800f63e:	46c0      	nop			; (mov r8, r8)
 800f640:	08010d78 	.word	0x08010d78
 800f644:	08010d88 	.word	0x08010d88
 800f648:	40021000 	.word	0x40021000
 800f64c:	007a1200 	.word	0x007a1200
 800f650:	02dc6c00 	.word	0x02dc6c00

0800f654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d101      	bne.n	800f666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f662:	2301      	movs	r3, #1
 800f664:	e042      	b.n	800f6ec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	223d      	movs	r2, #61	; 0x3d
 800f66a:	5c9b      	ldrb	r3, [r3, r2]
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d107      	bne.n	800f682 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	223c      	movs	r2, #60	; 0x3c
 800f676:	2100      	movs	r1, #0
 800f678:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	0018      	movs	r0, r3
 800f67e:	f7fd f977 	bl	800c970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	223d      	movs	r2, #61	; 0x3d
 800f686:	2102      	movs	r1, #2
 800f688:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	3304      	adds	r3, #4
 800f692:	0019      	movs	r1, r3
 800f694:	0010      	movs	r0, r2
 800f696:	f000 fc5f 	bl	800ff58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2246      	movs	r2, #70	; 0x46
 800f69e:	2101      	movs	r1, #1
 800f6a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	223e      	movs	r2, #62	; 0x3e
 800f6a6:	2101      	movs	r1, #1
 800f6a8:	5499      	strb	r1, [r3, r2]
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	223f      	movs	r2, #63	; 0x3f
 800f6ae:	2101      	movs	r1, #1
 800f6b0:	5499      	strb	r1, [r3, r2]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2240      	movs	r2, #64	; 0x40
 800f6b6:	2101      	movs	r1, #1
 800f6b8:	5499      	strb	r1, [r3, r2]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2241      	movs	r2, #65	; 0x41
 800f6be:	2101      	movs	r1, #1
 800f6c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2242      	movs	r2, #66	; 0x42
 800f6c6:	2101      	movs	r1, #1
 800f6c8:	5499      	strb	r1, [r3, r2]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2243      	movs	r2, #67	; 0x43
 800f6ce:	2101      	movs	r1, #1
 800f6d0:	5499      	strb	r1, [r3, r2]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2244      	movs	r2, #68	; 0x44
 800f6d6:	2101      	movs	r1, #1
 800f6d8:	5499      	strb	r1, [r3, r2]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2245      	movs	r2, #69	; 0x45
 800f6de:	2101      	movs	r1, #1
 800f6e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	223d      	movs	r2, #61	; 0x3d
 800f6e6:	2101      	movs	r1, #1
 800f6e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f6ea:	2300      	movs	r3, #0
}
 800f6ec:	0018      	movs	r0, r3
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	b002      	add	sp, #8
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b084      	sub	sp, #16
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	223d      	movs	r2, #61	; 0x3d
 800f700:	5c9b      	ldrb	r3, [r3, r2]
 800f702:	b2db      	uxtb	r3, r3
 800f704:	2b01      	cmp	r3, #1
 800f706:	d001      	beq.n	800f70c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800f708:	2301      	movs	r3, #1
 800f70a:	e033      	b.n	800f774 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	223d      	movs	r2, #61	; 0x3d
 800f710:	2102      	movs	r1, #2
 800f712:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a18      	ldr	r2, [pc, #96]	; (800f77c <HAL_TIM_Base_Start+0x88>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d00f      	beq.n	800f73e <HAL_TIM_Base_Start+0x4a>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	2380      	movs	r3, #128	; 0x80
 800f724:	05db      	lsls	r3, r3, #23
 800f726:	429a      	cmp	r2, r3
 800f728:	d009      	beq.n	800f73e <HAL_TIM_Base_Start+0x4a>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4a14      	ldr	r2, [pc, #80]	; (800f780 <HAL_TIM_Base_Start+0x8c>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d004      	beq.n	800f73e <HAL_TIM_Base_Start+0x4a>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a12      	ldr	r2, [pc, #72]	; (800f784 <HAL_TIM_Base_Start+0x90>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d111      	bne.n	800f762 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	689b      	ldr	r3, [r3, #8]
 800f744:	2207      	movs	r2, #7
 800f746:	4013      	ands	r3, r2
 800f748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2b06      	cmp	r3, #6
 800f74e:	d010      	beq.n	800f772 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2101      	movs	r1, #1
 800f75c:	430a      	orrs	r2, r1
 800f75e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f760:	e007      	b.n	800f772 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2101      	movs	r1, #1
 800f76e:	430a      	orrs	r2, r1
 800f770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f772:	2300      	movs	r3, #0
}
 800f774:	0018      	movs	r0, r3
 800f776:	46bd      	mov	sp, r7
 800f778:	b004      	add	sp, #16
 800f77a:	bd80      	pop	{r7, pc}
 800f77c:	40012c00 	.word	0x40012c00
 800f780:	40000400 	.word	0x40000400
 800f784:	40014000 	.word	0x40014000

0800f788 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b082      	sub	sp, #8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d101      	bne.n	800f79a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f796:	2301      	movs	r3, #1
 800f798:	e042      	b.n	800f820 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	223d      	movs	r2, #61	; 0x3d
 800f79e:	5c9b      	ldrb	r3, [r3, r2]
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d107      	bne.n	800f7b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	223c      	movs	r2, #60	; 0x3c
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	0018      	movs	r0, r3
 800f7b2:	f000 f839 	bl	800f828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	223d      	movs	r2, #61	; 0x3d
 800f7ba:	2102      	movs	r1, #2
 800f7bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	3304      	adds	r3, #4
 800f7c6:	0019      	movs	r1, r3
 800f7c8:	0010      	movs	r0, r2
 800f7ca:	f000 fbc5 	bl	800ff58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2246      	movs	r2, #70	; 0x46
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	223e      	movs	r2, #62	; 0x3e
 800f7da:	2101      	movs	r1, #1
 800f7dc:	5499      	strb	r1, [r3, r2]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	223f      	movs	r2, #63	; 0x3f
 800f7e2:	2101      	movs	r1, #1
 800f7e4:	5499      	strb	r1, [r3, r2]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2240      	movs	r2, #64	; 0x40
 800f7ea:	2101      	movs	r1, #1
 800f7ec:	5499      	strb	r1, [r3, r2]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2241      	movs	r2, #65	; 0x41
 800f7f2:	2101      	movs	r1, #1
 800f7f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2242      	movs	r2, #66	; 0x42
 800f7fa:	2101      	movs	r1, #1
 800f7fc:	5499      	strb	r1, [r3, r2]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2243      	movs	r2, #67	; 0x43
 800f802:	2101      	movs	r1, #1
 800f804:	5499      	strb	r1, [r3, r2]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2244      	movs	r2, #68	; 0x44
 800f80a:	2101      	movs	r1, #1
 800f80c:	5499      	strb	r1, [r3, r2]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2245      	movs	r2, #69	; 0x45
 800f812:	2101      	movs	r1, #1
 800f814:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	223d      	movs	r2, #61	; 0x3d
 800f81a:	2101      	movs	r1, #1
 800f81c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f81e:	2300      	movs	r3, #0
}
 800f820:	0018      	movs	r0, r3
 800f822:	46bd      	mov	sp, r7
 800f824:	b002      	add	sp, #8
 800f826:	bd80      	pop	{r7, pc}

0800f828 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f830:	46c0      	nop			; (mov r8, r8)
 800f832:	46bd      	mov	sp, r7
 800f834:	b002      	add	sp, #8
 800f836:	bd80      	pop	{r7, pc}

0800f838 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d108      	bne.n	800f85a <HAL_TIM_PWM_Start+0x22>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	223e      	movs	r2, #62	; 0x3e
 800f84c:	5c9b      	ldrb	r3, [r3, r2]
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	3b01      	subs	r3, #1
 800f852:	1e5a      	subs	r2, r3, #1
 800f854:	4193      	sbcs	r3, r2
 800f856:	b2db      	uxtb	r3, r3
 800f858:	e01f      	b.n	800f89a <HAL_TIM_PWM_Start+0x62>
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	2b04      	cmp	r3, #4
 800f85e:	d108      	bne.n	800f872 <HAL_TIM_PWM_Start+0x3a>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	223f      	movs	r2, #63	; 0x3f
 800f864:	5c9b      	ldrb	r3, [r3, r2]
 800f866:	b2db      	uxtb	r3, r3
 800f868:	3b01      	subs	r3, #1
 800f86a:	1e5a      	subs	r2, r3, #1
 800f86c:	4193      	sbcs	r3, r2
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	e013      	b.n	800f89a <HAL_TIM_PWM_Start+0x62>
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	2b08      	cmp	r3, #8
 800f876:	d108      	bne.n	800f88a <HAL_TIM_PWM_Start+0x52>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2240      	movs	r2, #64	; 0x40
 800f87c:	5c9b      	ldrb	r3, [r3, r2]
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	3b01      	subs	r3, #1
 800f882:	1e5a      	subs	r2, r3, #1
 800f884:	4193      	sbcs	r3, r2
 800f886:	b2db      	uxtb	r3, r3
 800f888:	e007      	b.n	800f89a <HAL_TIM_PWM_Start+0x62>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2241      	movs	r2, #65	; 0x41
 800f88e:	5c9b      	ldrb	r3, [r3, r2]
 800f890:	b2db      	uxtb	r3, r3
 800f892:	3b01      	subs	r3, #1
 800f894:	1e5a      	subs	r2, r3, #1
 800f896:	4193      	sbcs	r3, r2
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d001      	beq.n	800f8a2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800f89e:	2301      	movs	r3, #1
 800f8a0:	e074      	b.n	800f98c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d104      	bne.n	800f8b2 <HAL_TIM_PWM_Start+0x7a>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	223e      	movs	r2, #62	; 0x3e
 800f8ac:	2102      	movs	r1, #2
 800f8ae:	5499      	strb	r1, [r3, r2]
 800f8b0:	e013      	b.n	800f8da <HAL_TIM_PWM_Start+0xa2>
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	2b04      	cmp	r3, #4
 800f8b6:	d104      	bne.n	800f8c2 <HAL_TIM_PWM_Start+0x8a>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	223f      	movs	r2, #63	; 0x3f
 800f8bc:	2102      	movs	r1, #2
 800f8be:	5499      	strb	r1, [r3, r2]
 800f8c0:	e00b      	b.n	800f8da <HAL_TIM_PWM_Start+0xa2>
 800f8c2:	683b      	ldr	r3, [r7, #0]
 800f8c4:	2b08      	cmp	r3, #8
 800f8c6:	d104      	bne.n	800f8d2 <HAL_TIM_PWM_Start+0x9a>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2240      	movs	r2, #64	; 0x40
 800f8cc:	2102      	movs	r1, #2
 800f8ce:	5499      	strb	r1, [r3, r2]
 800f8d0:	e003      	b.n	800f8da <HAL_TIM_PWM_Start+0xa2>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2241      	movs	r2, #65	; 0x41
 800f8d6:	2102      	movs	r1, #2
 800f8d8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	6839      	ldr	r1, [r7, #0]
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	0018      	movs	r0, r3
 800f8e4:	f000 fe4e 	bl	8010584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a29      	ldr	r2, [pc, #164]	; (800f994 <HAL_TIM_PWM_Start+0x15c>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d00e      	beq.n	800f910 <HAL_TIM_PWM_Start+0xd8>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4a28      	ldr	r2, [pc, #160]	; (800f998 <HAL_TIM_PWM_Start+0x160>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d009      	beq.n	800f910 <HAL_TIM_PWM_Start+0xd8>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	4a26      	ldr	r2, [pc, #152]	; (800f99c <HAL_TIM_PWM_Start+0x164>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d004      	beq.n	800f910 <HAL_TIM_PWM_Start+0xd8>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4a25      	ldr	r2, [pc, #148]	; (800f9a0 <HAL_TIM_PWM_Start+0x168>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d101      	bne.n	800f914 <HAL_TIM_PWM_Start+0xdc>
 800f910:	2301      	movs	r3, #1
 800f912:	e000      	b.n	800f916 <HAL_TIM_PWM_Start+0xde>
 800f914:	2300      	movs	r3, #0
 800f916:	2b00      	cmp	r3, #0
 800f918:	d008      	beq.n	800f92c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2180      	movs	r1, #128	; 0x80
 800f926:	0209      	lsls	r1, r1, #8
 800f928:	430a      	orrs	r2, r1
 800f92a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a18      	ldr	r2, [pc, #96]	; (800f994 <HAL_TIM_PWM_Start+0x15c>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d00f      	beq.n	800f956 <HAL_TIM_PWM_Start+0x11e>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	2380      	movs	r3, #128	; 0x80
 800f93c:	05db      	lsls	r3, r3, #23
 800f93e:	429a      	cmp	r2, r3
 800f940:	d009      	beq.n	800f956 <HAL_TIM_PWM_Start+0x11e>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	4a17      	ldr	r2, [pc, #92]	; (800f9a4 <HAL_TIM_PWM_Start+0x16c>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d004      	beq.n	800f956 <HAL_TIM_PWM_Start+0x11e>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	4a11      	ldr	r2, [pc, #68]	; (800f998 <HAL_TIM_PWM_Start+0x160>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d111      	bne.n	800f97a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	689b      	ldr	r3, [r3, #8]
 800f95c:	2207      	movs	r2, #7
 800f95e:	4013      	ands	r3, r2
 800f960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2b06      	cmp	r3, #6
 800f966:	d010      	beq.n	800f98a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	2101      	movs	r1, #1
 800f974:	430a      	orrs	r2, r1
 800f976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f978:	e007      	b.n	800f98a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	2101      	movs	r1, #1
 800f986:	430a      	orrs	r2, r1
 800f988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f98a:	2300      	movs	r3, #0
}
 800f98c:	0018      	movs	r0, r3
 800f98e:	46bd      	mov	sp, r7
 800f990:	b004      	add	sp, #16
 800f992:	bd80      	pop	{r7, pc}
 800f994:	40012c00 	.word	0x40012c00
 800f998:	40014000 	.word	0x40014000
 800f99c:	40014400 	.word	0x40014400
 800f9a0:	40014800 	.word	0x40014800
 800f9a4:	40000400 	.word	0x40000400

0800f9a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	691b      	ldr	r3, [r3, #16]
 800f9b6:	2202      	movs	r2, #2
 800f9b8:	4013      	ands	r3, r2
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	d124      	bne.n	800fa08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	2202      	movs	r2, #2
 800f9c6:	4013      	ands	r3, r2
 800f9c8:	2b02      	cmp	r3, #2
 800f9ca:	d11d      	bne.n	800fa08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2203      	movs	r2, #3
 800f9d2:	4252      	negs	r2, r2
 800f9d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2201      	movs	r2, #1
 800f9da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	699b      	ldr	r3, [r3, #24]
 800f9e2:	2203      	movs	r2, #3
 800f9e4:	4013      	ands	r3, r2
 800f9e6:	d004      	beq.n	800f9f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	0018      	movs	r0, r3
 800f9ec:	f000 fa9c 	bl	800ff28 <HAL_TIM_IC_CaptureCallback>
 800f9f0:	e007      	b.n	800fa02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	0018      	movs	r0, r3
 800f9f6:	f000 fa8f 	bl	800ff18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	0018      	movs	r0, r3
 800f9fe:	f000 fa9b 	bl	800ff38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	691b      	ldr	r3, [r3, #16]
 800fa0e:	2204      	movs	r2, #4
 800fa10:	4013      	ands	r3, r2
 800fa12:	2b04      	cmp	r3, #4
 800fa14:	d125      	bne.n	800fa62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	68db      	ldr	r3, [r3, #12]
 800fa1c:	2204      	movs	r2, #4
 800fa1e:	4013      	ands	r3, r2
 800fa20:	2b04      	cmp	r3, #4
 800fa22:	d11e      	bne.n	800fa62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	2205      	movs	r2, #5
 800fa2a:	4252      	negs	r2, r2
 800fa2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2202      	movs	r2, #2
 800fa32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	699a      	ldr	r2, [r3, #24]
 800fa3a:	23c0      	movs	r3, #192	; 0xc0
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	4013      	ands	r3, r2
 800fa40:	d004      	beq.n	800fa4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	0018      	movs	r0, r3
 800fa46:	f000 fa6f 	bl	800ff28 <HAL_TIM_IC_CaptureCallback>
 800fa4a:	e007      	b.n	800fa5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	0018      	movs	r0, r3
 800fa50:	f000 fa62 	bl	800ff18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	0018      	movs	r0, r3
 800fa58:	f000 fa6e 	bl	800ff38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	691b      	ldr	r3, [r3, #16]
 800fa68:	2208      	movs	r2, #8
 800fa6a:	4013      	ands	r3, r2
 800fa6c:	2b08      	cmp	r3, #8
 800fa6e:	d124      	bne.n	800faba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	68db      	ldr	r3, [r3, #12]
 800fa76:	2208      	movs	r2, #8
 800fa78:	4013      	ands	r3, r2
 800fa7a:	2b08      	cmp	r3, #8
 800fa7c:	d11d      	bne.n	800faba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2209      	movs	r2, #9
 800fa84:	4252      	negs	r2, r2
 800fa86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2204      	movs	r2, #4
 800fa8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	69db      	ldr	r3, [r3, #28]
 800fa94:	2203      	movs	r2, #3
 800fa96:	4013      	ands	r3, r2
 800fa98:	d004      	beq.n	800faa4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	0018      	movs	r0, r3
 800fa9e:	f000 fa43 	bl	800ff28 <HAL_TIM_IC_CaptureCallback>
 800faa2:	e007      	b.n	800fab4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	0018      	movs	r0, r3
 800faa8:	f000 fa36 	bl	800ff18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	0018      	movs	r0, r3
 800fab0:	f000 fa42 	bl	800ff38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	2200      	movs	r2, #0
 800fab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	691b      	ldr	r3, [r3, #16]
 800fac0:	2210      	movs	r2, #16
 800fac2:	4013      	ands	r3, r2
 800fac4:	2b10      	cmp	r3, #16
 800fac6:	d125      	bne.n	800fb14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	2210      	movs	r2, #16
 800fad0:	4013      	ands	r3, r2
 800fad2:	2b10      	cmp	r3, #16
 800fad4:	d11e      	bne.n	800fb14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	2211      	movs	r2, #17
 800fadc:	4252      	negs	r2, r2
 800fade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2208      	movs	r2, #8
 800fae4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	69da      	ldr	r2, [r3, #28]
 800faec:	23c0      	movs	r3, #192	; 0xc0
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	4013      	ands	r3, r2
 800faf2:	d004      	beq.n	800fafe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	0018      	movs	r0, r3
 800faf8:	f000 fa16 	bl	800ff28 <HAL_TIM_IC_CaptureCallback>
 800fafc:	e007      	b.n	800fb0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	0018      	movs	r0, r3
 800fb02:	f000 fa09 	bl	800ff18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	0018      	movs	r0, r3
 800fb0a:	f000 fa15 	bl	800ff38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2200      	movs	r2, #0
 800fb12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	691b      	ldr	r3, [r3, #16]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	4013      	ands	r3, r2
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d10f      	bne.n	800fb42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	2201      	movs	r2, #1
 800fb2a:	4013      	ands	r3, r2
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	d108      	bne.n	800fb42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	2202      	movs	r2, #2
 800fb36:	4252      	negs	r2, r2
 800fb38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	0018      	movs	r0, r3
 800fb3e:	f000 f9e3 	bl	800ff08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	691b      	ldr	r3, [r3, #16]
 800fb48:	2280      	movs	r2, #128	; 0x80
 800fb4a:	4013      	ands	r3, r2
 800fb4c:	2b80      	cmp	r3, #128	; 0x80
 800fb4e:	d10f      	bne.n	800fb70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	2280      	movs	r2, #128	; 0x80
 800fb58:	4013      	ands	r3, r2
 800fb5a:	2b80      	cmp	r3, #128	; 0x80
 800fb5c:	d108      	bne.n	800fb70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	2281      	movs	r2, #129	; 0x81
 800fb64:	4252      	negs	r2, r2
 800fb66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	0018      	movs	r0, r3
 800fb6c:	f000 fdf2 	bl	8010754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	691b      	ldr	r3, [r3, #16]
 800fb76:	2240      	movs	r2, #64	; 0x40
 800fb78:	4013      	ands	r3, r2
 800fb7a:	2b40      	cmp	r3, #64	; 0x40
 800fb7c:	d10f      	bne.n	800fb9e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	2240      	movs	r2, #64	; 0x40
 800fb86:	4013      	ands	r3, r2
 800fb88:	2b40      	cmp	r3, #64	; 0x40
 800fb8a:	d108      	bne.n	800fb9e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2241      	movs	r2, #65	; 0x41
 800fb92:	4252      	negs	r2, r2
 800fb94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	0018      	movs	r0, r3
 800fb9a:	f000 f9d5 	bl	800ff48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	691b      	ldr	r3, [r3, #16]
 800fba4:	2220      	movs	r2, #32
 800fba6:	4013      	ands	r3, r2
 800fba8:	2b20      	cmp	r3, #32
 800fbaa:	d10f      	bne.n	800fbcc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	68db      	ldr	r3, [r3, #12]
 800fbb2:	2220      	movs	r2, #32
 800fbb4:	4013      	ands	r3, r2
 800fbb6:	2b20      	cmp	r3, #32
 800fbb8:	d108      	bne.n	800fbcc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2221      	movs	r2, #33	; 0x21
 800fbc0:	4252      	negs	r2, r2
 800fbc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	0018      	movs	r0, r3
 800fbc8:	f000 fdbc 	bl	8010744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fbcc:	46c0      	nop			; (mov r8, r8)
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	b002      	add	sp, #8
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b086      	sub	sp, #24
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fbe0:	2317      	movs	r3, #23
 800fbe2:	18fb      	adds	r3, r7, r3
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	223c      	movs	r2, #60	; 0x3c
 800fbec:	5c9b      	ldrb	r3, [r3, r2]
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d101      	bne.n	800fbf6 <HAL_TIM_PWM_ConfigChannel+0x22>
 800fbf2:	2302      	movs	r3, #2
 800fbf4:	e0ad      	b.n	800fd52 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	223c      	movs	r2, #60	; 0x3c
 800fbfa:	2101      	movs	r1, #1
 800fbfc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2b0c      	cmp	r3, #12
 800fc02:	d100      	bne.n	800fc06 <HAL_TIM_PWM_ConfigChannel+0x32>
 800fc04:	e076      	b.n	800fcf4 <HAL_TIM_PWM_ConfigChannel+0x120>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2b0c      	cmp	r3, #12
 800fc0a:	d900      	bls.n	800fc0e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800fc0c:	e095      	b.n	800fd3a <HAL_TIM_PWM_ConfigChannel+0x166>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2b08      	cmp	r3, #8
 800fc12:	d04e      	beq.n	800fcb2 <HAL_TIM_PWM_ConfigChannel+0xde>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2b08      	cmp	r3, #8
 800fc18:	d900      	bls.n	800fc1c <HAL_TIM_PWM_ConfigChannel+0x48>
 800fc1a:	e08e      	b.n	800fd3a <HAL_TIM_PWM_ConfigChannel+0x166>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d003      	beq.n	800fc2a <HAL_TIM_PWM_ConfigChannel+0x56>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2b04      	cmp	r3, #4
 800fc26:	d021      	beq.n	800fc6c <HAL_TIM_PWM_ConfigChannel+0x98>
 800fc28:	e087      	b.n	800fd3a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	68ba      	ldr	r2, [r7, #8]
 800fc30:	0011      	movs	r1, r2
 800fc32:	0018      	movs	r0, r3
 800fc34:	f000 fa10 	bl	8010058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	699a      	ldr	r2, [r3, #24]
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2108      	movs	r1, #8
 800fc44:	430a      	orrs	r2, r1
 800fc46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	699a      	ldr	r2, [r3, #24]
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2104      	movs	r1, #4
 800fc54:	438a      	bics	r2, r1
 800fc56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	6999      	ldr	r1, [r3, #24]
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	691a      	ldr	r2, [r3, #16]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	430a      	orrs	r2, r1
 800fc68:	619a      	str	r2, [r3, #24]
      break;
 800fc6a:	e06b      	b.n	800fd44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	68ba      	ldr	r2, [r7, #8]
 800fc72:	0011      	movs	r1, r2
 800fc74:	0018      	movs	r0, r3
 800fc76:	f000 fa77 	bl	8010168 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	699a      	ldr	r2, [r3, #24]
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	2180      	movs	r1, #128	; 0x80
 800fc86:	0109      	lsls	r1, r1, #4
 800fc88:	430a      	orrs	r2, r1
 800fc8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	699a      	ldr	r2, [r3, #24]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	4931      	ldr	r1, [pc, #196]	; (800fd5c <HAL_TIM_PWM_ConfigChannel+0x188>)
 800fc98:	400a      	ands	r2, r1
 800fc9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	6999      	ldr	r1, [r3, #24]
 800fca2:	68bb      	ldr	r3, [r7, #8]
 800fca4:	691b      	ldr	r3, [r3, #16]
 800fca6:	021a      	lsls	r2, r3, #8
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	430a      	orrs	r2, r1
 800fcae:	619a      	str	r2, [r3, #24]
      break;
 800fcb0:	e048      	b.n	800fd44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	68ba      	ldr	r2, [r7, #8]
 800fcb8:	0011      	movs	r1, r2
 800fcba:	0018      	movs	r0, r3
 800fcbc:	f000 fad8 	bl	8010270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	69da      	ldr	r2, [r3, #28]
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2108      	movs	r1, #8
 800fccc:	430a      	orrs	r2, r1
 800fcce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	69da      	ldr	r2, [r3, #28]
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2104      	movs	r1, #4
 800fcdc:	438a      	bics	r2, r1
 800fcde:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	69d9      	ldr	r1, [r3, #28]
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	691a      	ldr	r2, [r3, #16]
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	430a      	orrs	r2, r1
 800fcf0:	61da      	str	r2, [r3, #28]
      break;
 800fcf2:	e027      	b.n	800fd44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	0011      	movs	r1, r2
 800fcfc:	0018      	movs	r0, r3
 800fcfe:	f000 fb3d 	bl	801037c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	69da      	ldr	r2, [r3, #28]
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	2180      	movs	r1, #128	; 0x80
 800fd0e:	0109      	lsls	r1, r1, #4
 800fd10:	430a      	orrs	r2, r1
 800fd12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	69da      	ldr	r2, [r3, #28]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	490f      	ldr	r1, [pc, #60]	; (800fd5c <HAL_TIM_PWM_ConfigChannel+0x188>)
 800fd20:	400a      	ands	r2, r1
 800fd22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	69d9      	ldr	r1, [r3, #28]
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	691b      	ldr	r3, [r3, #16]
 800fd2e:	021a      	lsls	r2, r3, #8
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	430a      	orrs	r2, r1
 800fd36:	61da      	str	r2, [r3, #28]
      break;
 800fd38:	e004      	b.n	800fd44 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800fd3a:	2317      	movs	r3, #23
 800fd3c:	18fb      	adds	r3, r7, r3
 800fd3e:	2201      	movs	r2, #1
 800fd40:	701a      	strb	r2, [r3, #0]
      break;
 800fd42:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	223c      	movs	r2, #60	; 0x3c
 800fd48:	2100      	movs	r1, #0
 800fd4a:	5499      	strb	r1, [r3, r2]

  return status;
 800fd4c:	2317      	movs	r3, #23
 800fd4e:	18fb      	adds	r3, r7, r3
 800fd50:	781b      	ldrb	r3, [r3, #0]
}
 800fd52:	0018      	movs	r0, r3
 800fd54:	46bd      	mov	sp, r7
 800fd56:	b006      	add	sp, #24
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	46c0      	nop			; (mov r8, r8)
 800fd5c:	fffffbff 	.word	0xfffffbff

0800fd60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b084      	sub	sp, #16
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fd6a:	230f      	movs	r3, #15
 800fd6c:	18fb      	adds	r3, r7, r3
 800fd6e:	2200      	movs	r2, #0
 800fd70:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	223c      	movs	r2, #60	; 0x3c
 800fd76:	5c9b      	ldrb	r3, [r3, r2]
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d101      	bne.n	800fd80 <HAL_TIM_ConfigClockSource+0x20>
 800fd7c:	2302      	movs	r3, #2
 800fd7e:	e0bc      	b.n	800fefa <HAL_TIM_ConfigClockSource+0x19a>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	223c      	movs	r2, #60	; 0x3c
 800fd84:	2101      	movs	r1, #1
 800fd86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	223d      	movs	r2, #61	; 0x3d
 800fd8c:	2102      	movs	r1, #2
 800fd8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	689b      	ldr	r3, [r3, #8]
 800fd96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	2277      	movs	r2, #119	; 0x77
 800fd9c:	4393      	bics	r3, r2
 800fd9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	4a58      	ldr	r2, [pc, #352]	; (800ff04 <HAL_TIM_ConfigClockSource+0x1a4>)
 800fda4:	4013      	ands	r3, r2
 800fda6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2280      	movs	r2, #128	; 0x80
 800fdb6:	0192      	lsls	r2, r2, #6
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d040      	beq.n	800fe3e <HAL_TIM_ConfigClockSource+0xde>
 800fdbc:	2280      	movs	r2, #128	; 0x80
 800fdbe:	0192      	lsls	r2, r2, #6
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	d900      	bls.n	800fdc6 <HAL_TIM_ConfigClockSource+0x66>
 800fdc4:	e088      	b.n	800fed8 <HAL_TIM_ConfigClockSource+0x178>
 800fdc6:	2280      	movs	r2, #128	; 0x80
 800fdc8:	0152      	lsls	r2, r2, #5
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d100      	bne.n	800fdd0 <HAL_TIM_ConfigClockSource+0x70>
 800fdce:	e088      	b.n	800fee2 <HAL_TIM_ConfigClockSource+0x182>
 800fdd0:	2280      	movs	r2, #128	; 0x80
 800fdd2:	0152      	lsls	r2, r2, #5
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d900      	bls.n	800fdda <HAL_TIM_ConfigClockSource+0x7a>
 800fdd8:	e07e      	b.n	800fed8 <HAL_TIM_ConfigClockSource+0x178>
 800fdda:	2b70      	cmp	r3, #112	; 0x70
 800fddc:	d018      	beq.n	800fe10 <HAL_TIM_ConfigClockSource+0xb0>
 800fdde:	d900      	bls.n	800fde2 <HAL_TIM_ConfigClockSource+0x82>
 800fde0:	e07a      	b.n	800fed8 <HAL_TIM_ConfigClockSource+0x178>
 800fde2:	2b60      	cmp	r3, #96	; 0x60
 800fde4:	d04f      	beq.n	800fe86 <HAL_TIM_ConfigClockSource+0x126>
 800fde6:	d900      	bls.n	800fdea <HAL_TIM_ConfigClockSource+0x8a>
 800fde8:	e076      	b.n	800fed8 <HAL_TIM_ConfigClockSource+0x178>
 800fdea:	2b50      	cmp	r3, #80	; 0x50
 800fdec:	d03b      	beq.n	800fe66 <HAL_TIM_ConfigClockSource+0x106>
 800fdee:	d900      	bls.n	800fdf2 <HAL_TIM_ConfigClockSource+0x92>
 800fdf0:	e072      	b.n	800fed8 <HAL_TIM_ConfigClockSource+0x178>
 800fdf2:	2b40      	cmp	r3, #64	; 0x40
 800fdf4:	d057      	beq.n	800fea6 <HAL_TIM_ConfigClockSource+0x146>
 800fdf6:	d900      	bls.n	800fdfa <HAL_TIM_ConfigClockSource+0x9a>
 800fdf8:	e06e      	b.n	800fed8 <HAL_TIM_ConfigClockSource+0x178>
 800fdfa:	2b30      	cmp	r3, #48	; 0x30
 800fdfc:	d063      	beq.n	800fec6 <HAL_TIM_ConfigClockSource+0x166>
 800fdfe:	d86b      	bhi.n	800fed8 <HAL_TIM_ConfigClockSource+0x178>
 800fe00:	2b20      	cmp	r3, #32
 800fe02:	d060      	beq.n	800fec6 <HAL_TIM_ConfigClockSource+0x166>
 800fe04:	d868      	bhi.n	800fed8 <HAL_TIM_ConfigClockSource+0x178>
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d05d      	beq.n	800fec6 <HAL_TIM_ConfigClockSource+0x166>
 800fe0a:	2b10      	cmp	r3, #16
 800fe0c:	d05b      	beq.n	800fec6 <HAL_TIM_ConfigClockSource+0x166>
 800fe0e:	e063      	b.n	800fed8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6818      	ldr	r0, [r3, #0]
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	6899      	ldr	r1, [r3, #8]
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	685a      	ldr	r2, [r3, #4]
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	68db      	ldr	r3, [r3, #12]
 800fe20:	f000 fb90 	bl	8010544 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	689b      	ldr	r3, [r3, #8]
 800fe2a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	2277      	movs	r2, #119	; 0x77
 800fe30:	4313      	orrs	r3, r2
 800fe32:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	68ba      	ldr	r2, [r7, #8]
 800fe3a:	609a      	str	r2, [r3, #8]
      break;
 800fe3c:	e052      	b.n	800fee4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6818      	ldr	r0, [r3, #0]
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	6899      	ldr	r1, [r3, #8]
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	685a      	ldr	r2, [r3, #4]
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	f000 fb79 	bl	8010544 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	689a      	ldr	r2, [r3, #8]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2180      	movs	r1, #128	; 0x80
 800fe5e:	01c9      	lsls	r1, r1, #7
 800fe60:	430a      	orrs	r2, r1
 800fe62:	609a      	str	r2, [r3, #8]
      break;
 800fe64:	e03e      	b.n	800fee4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6818      	ldr	r0, [r3, #0]
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	6859      	ldr	r1, [r3, #4]
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	68db      	ldr	r3, [r3, #12]
 800fe72:	001a      	movs	r2, r3
 800fe74:	f000 faec 	bl	8010450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	2150      	movs	r1, #80	; 0x50
 800fe7e:	0018      	movs	r0, r3
 800fe80:	f000 fb46 	bl	8010510 <TIM_ITRx_SetConfig>
      break;
 800fe84:	e02e      	b.n	800fee4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6818      	ldr	r0, [r3, #0]
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	6859      	ldr	r1, [r3, #4]
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	68db      	ldr	r3, [r3, #12]
 800fe92:	001a      	movs	r2, r3
 800fe94:	f000 fb0a 	bl	80104ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2160      	movs	r1, #96	; 0x60
 800fe9e:	0018      	movs	r0, r3
 800fea0:	f000 fb36 	bl	8010510 <TIM_ITRx_SetConfig>
      break;
 800fea4:	e01e      	b.n	800fee4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6818      	ldr	r0, [r3, #0]
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	6859      	ldr	r1, [r3, #4]
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	001a      	movs	r2, r3
 800feb4:	f000 facc 	bl	8010450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	2140      	movs	r1, #64	; 0x40
 800febe:	0018      	movs	r0, r3
 800fec0:	f000 fb26 	bl	8010510 <TIM_ITRx_SetConfig>
      break;
 800fec4:	e00e      	b.n	800fee4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	0019      	movs	r1, r3
 800fed0:	0010      	movs	r0, r2
 800fed2:	f000 fb1d 	bl	8010510 <TIM_ITRx_SetConfig>
      break;
 800fed6:	e005      	b.n	800fee4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800fed8:	230f      	movs	r3, #15
 800feda:	18fb      	adds	r3, r7, r3
 800fedc:	2201      	movs	r2, #1
 800fede:	701a      	strb	r2, [r3, #0]
      break;
 800fee0:	e000      	b.n	800fee4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800fee2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	223d      	movs	r2, #61	; 0x3d
 800fee8:	2101      	movs	r1, #1
 800feea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	223c      	movs	r2, #60	; 0x3c
 800fef0:	2100      	movs	r1, #0
 800fef2:	5499      	strb	r1, [r3, r2]

  return status;
 800fef4:	230f      	movs	r3, #15
 800fef6:	18fb      	adds	r3, r7, r3
 800fef8:	781b      	ldrb	r3, [r3, #0]
}
 800fefa:	0018      	movs	r0, r3
 800fefc:	46bd      	mov	sp, r7
 800fefe:	b004      	add	sp, #16
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	46c0      	nop			; (mov r8, r8)
 800ff04:	ffff00ff 	.word	0xffff00ff

0800ff08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ff10:	46c0      	nop			; (mov r8, r8)
 800ff12:	46bd      	mov	sp, r7
 800ff14:	b002      	add	sp, #8
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ff20:	46c0      	nop			; (mov r8, r8)
 800ff22:	46bd      	mov	sp, r7
 800ff24:	b002      	add	sp, #8
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ff30:	46c0      	nop			; (mov r8, r8)
 800ff32:	46bd      	mov	sp, r7
 800ff34:	b002      	add	sp, #8
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ff40:	46c0      	nop			; (mov r8, r8)
 800ff42:	46bd      	mov	sp, r7
 800ff44:	b002      	add	sp, #8
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ff50:	46c0      	nop			; (mov r8, r8)
 800ff52:	46bd      	mov	sp, r7
 800ff54:	b002      	add	sp, #8
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	4a34      	ldr	r2, [pc, #208]	; (801003c <TIM_Base_SetConfig+0xe4>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d008      	beq.n	800ff82 <TIM_Base_SetConfig+0x2a>
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	2380      	movs	r3, #128	; 0x80
 800ff74:	05db      	lsls	r3, r3, #23
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d003      	beq.n	800ff82 <TIM_Base_SetConfig+0x2a>
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	4a30      	ldr	r2, [pc, #192]	; (8010040 <TIM_Base_SetConfig+0xe8>)
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d108      	bne.n	800ff94 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2270      	movs	r2, #112	; 0x70
 800ff86:	4393      	bics	r3, r2
 800ff88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	68fa      	ldr	r2, [r7, #12]
 800ff90:	4313      	orrs	r3, r2
 800ff92:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	4a29      	ldr	r2, [pc, #164]	; (801003c <TIM_Base_SetConfig+0xe4>)
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d018      	beq.n	800ffce <TIM_Base_SetConfig+0x76>
 800ff9c:	687a      	ldr	r2, [r7, #4]
 800ff9e:	2380      	movs	r3, #128	; 0x80
 800ffa0:	05db      	lsls	r3, r3, #23
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d013      	beq.n	800ffce <TIM_Base_SetConfig+0x76>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4a25      	ldr	r2, [pc, #148]	; (8010040 <TIM_Base_SetConfig+0xe8>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d00f      	beq.n	800ffce <TIM_Base_SetConfig+0x76>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4a24      	ldr	r2, [pc, #144]	; (8010044 <TIM_Base_SetConfig+0xec>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d00b      	beq.n	800ffce <TIM_Base_SetConfig+0x76>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	4a23      	ldr	r2, [pc, #140]	; (8010048 <TIM_Base_SetConfig+0xf0>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d007      	beq.n	800ffce <TIM_Base_SetConfig+0x76>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4a22      	ldr	r2, [pc, #136]	; (801004c <TIM_Base_SetConfig+0xf4>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d003      	beq.n	800ffce <TIM_Base_SetConfig+0x76>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4a21      	ldr	r2, [pc, #132]	; (8010050 <TIM_Base_SetConfig+0xf8>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d108      	bne.n	800ffe0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	4a20      	ldr	r2, [pc, #128]	; (8010054 <TIM_Base_SetConfig+0xfc>)
 800ffd2:	4013      	ands	r3, r2
 800ffd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	68db      	ldr	r3, [r3, #12]
 800ffda:	68fa      	ldr	r2, [r7, #12]
 800ffdc:	4313      	orrs	r3, r2
 800ffde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2280      	movs	r2, #128	; 0x80
 800ffe4:	4393      	bics	r3, r2
 800ffe6:	001a      	movs	r2, r3
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	695b      	ldr	r3, [r3, #20]
 800ffec:	4313      	orrs	r3, r2
 800ffee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	68fa      	ldr	r2, [r7, #12]
 800fff4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	689a      	ldr	r2, [r3, #8]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	4a0c      	ldr	r2, [pc, #48]	; (801003c <TIM_Base_SetConfig+0xe4>)
 801000a:	4293      	cmp	r3, r2
 801000c:	d00b      	beq.n	8010026 <TIM_Base_SetConfig+0xce>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4a0d      	ldr	r2, [pc, #52]	; (8010048 <TIM_Base_SetConfig+0xf0>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d007      	beq.n	8010026 <TIM_Base_SetConfig+0xce>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	4a0c      	ldr	r2, [pc, #48]	; (801004c <TIM_Base_SetConfig+0xf4>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d003      	beq.n	8010026 <TIM_Base_SetConfig+0xce>
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	4a0b      	ldr	r2, [pc, #44]	; (8010050 <TIM_Base_SetConfig+0xf8>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d103      	bne.n	801002e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	691a      	ldr	r2, [r3, #16]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2201      	movs	r2, #1
 8010032:	615a      	str	r2, [r3, #20]
}
 8010034:	46c0      	nop			; (mov r8, r8)
 8010036:	46bd      	mov	sp, r7
 8010038:	b004      	add	sp, #16
 801003a:	bd80      	pop	{r7, pc}
 801003c:	40012c00 	.word	0x40012c00
 8010040:	40000400 	.word	0x40000400
 8010044:	40002000 	.word	0x40002000
 8010048:	40014000 	.word	0x40014000
 801004c:	40014400 	.word	0x40014400
 8010050:	40014800 	.word	0x40014800
 8010054:	fffffcff 	.word	0xfffffcff

08010058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b086      	sub	sp, #24
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6a1b      	ldr	r3, [r3, #32]
 8010066:	2201      	movs	r2, #1
 8010068:	4393      	bics	r3, r2
 801006a:	001a      	movs	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6a1b      	ldr	r3, [r3, #32]
 8010074:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	699b      	ldr	r3, [r3, #24]
 8010080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2270      	movs	r2, #112	; 0x70
 8010086:	4393      	bics	r3, r2
 8010088:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2203      	movs	r2, #3
 801008e:	4393      	bics	r3, r2
 8010090:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	68fa      	ldr	r2, [r7, #12]
 8010098:	4313      	orrs	r3, r2
 801009a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	2202      	movs	r2, #2
 80100a0:	4393      	bics	r3, r2
 80100a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	689b      	ldr	r3, [r3, #8]
 80100a8:	697a      	ldr	r2, [r7, #20]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4a27      	ldr	r2, [pc, #156]	; (8010150 <TIM_OC1_SetConfig+0xf8>)
 80100b2:	4293      	cmp	r3, r2
 80100b4:	d00b      	beq.n	80100ce <TIM_OC1_SetConfig+0x76>
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	4a26      	ldr	r2, [pc, #152]	; (8010154 <TIM_OC1_SetConfig+0xfc>)
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d007      	beq.n	80100ce <TIM_OC1_SetConfig+0x76>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	4a25      	ldr	r2, [pc, #148]	; (8010158 <TIM_OC1_SetConfig+0x100>)
 80100c2:	4293      	cmp	r3, r2
 80100c4:	d003      	beq.n	80100ce <TIM_OC1_SetConfig+0x76>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4a24      	ldr	r2, [pc, #144]	; (801015c <TIM_OC1_SetConfig+0x104>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d10c      	bne.n	80100e8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	2208      	movs	r2, #8
 80100d2:	4393      	bics	r3, r2
 80100d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	697a      	ldr	r2, [r7, #20]
 80100dc:	4313      	orrs	r3, r2
 80100de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	2204      	movs	r2, #4
 80100e4:	4393      	bics	r3, r2
 80100e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	4a19      	ldr	r2, [pc, #100]	; (8010150 <TIM_OC1_SetConfig+0xf8>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d00b      	beq.n	8010108 <TIM_OC1_SetConfig+0xb0>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	4a18      	ldr	r2, [pc, #96]	; (8010154 <TIM_OC1_SetConfig+0xfc>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d007      	beq.n	8010108 <TIM_OC1_SetConfig+0xb0>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	4a17      	ldr	r2, [pc, #92]	; (8010158 <TIM_OC1_SetConfig+0x100>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d003      	beq.n	8010108 <TIM_OC1_SetConfig+0xb0>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4a16      	ldr	r2, [pc, #88]	; (801015c <TIM_OC1_SetConfig+0x104>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d111      	bne.n	801012c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	4a15      	ldr	r2, [pc, #84]	; (8010160 <TIM_OC1_SetConfig+0x108>)
 801010c:	4013      	ands	r3, r2
 801010e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	4a14      	ldr	r2, [pc, #80]	; (8010164 <TIM_OC1_SetConfig+0x10c>)
 8010114:	4013      	ands	r3, r2
 8010116:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	695b      	ldr	r3, [r3, #20]
 801011c:	693a      	ldr	r2, [r7, #16]
 801011e:	4313      	orrs	r3, r2
 8010120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	699b      	ldr	r3, [r3, #24]
 8010126:	693a      	ldr	r2, [r7, #16]
 8010128:	4313      	orrs	r3, r2
 801012a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	693a      	ldr	r2, [r7, #16]
 8010130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	68fa      	ldr	r2, [r7, #12]
 8010136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	685a      	ldr	r2, [r3, #4]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	697a      	ldr	r2, [r7, #20]
 8010144:	621a      	str	r2, [r3, #32]
}
 8010146:	46c0      	nop			; (mov r8, r8)
 8010148:	46bd      	mov	sp, r7
 801014a:	b006      	add	sp, #24
 801014c:	bd80      	pop	{r7, pc}
 801014e:	46c0      	nop			; (mov r8, r8)
 8010150:	40012c00 	.word	0x40012c00
 8010154:	40014000 	.word	0x40014000
 8010158:	40014400 	.word	0x40014400
 801015c:	40014800 	.word	0x40014800
 8010160:	fffffeff 	.word	0xfffffeff
 8010164:	fffffdff 	.word	0xfffffdff

08010168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b086      	sub	sp, #24
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6a1b      	ldr	r3, [r3, #32]
 8010176:	2210      	movs	r2, #16
 8010178:	4393      	bics	r3, r2
 801017a:	001a      	movs	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6a1b      	ldr	r3, [r3, #32]
 8010184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	699b      	ldr	r3, [r3, #24]
 8010190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	4a2e      	ldr	r2, [pc, #184]	; (8010250 <TIM_OC2_SetConfig+0xe8>)
 8010196:	4013      	ands	r3, r2
 8010198:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	4a2d      	ldr	r2, [pc, #180]	; (8010254 <TIM_OC2_SetConfig+0xec>)
 801019e:	4013      	ands	r3, r2
 80101a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	021b      	lsls	r3, r3, #8
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	4313      	orrs	r3, r2
 80101ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	2220      	movs	r2, #32
 80101b2:	4393      	bics	r3, r2
 80101b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	689b      	ldr	r3, [r3, #8]
 80101ba:	011b      	lsls	r3, r3, #4
 80101bc:	697a      	ldr	r2, [r7, #20]
 80101be:	4313      	orrs	r3, r2
 80101c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	4a24      	ldr	r2, [pc, #144]	; (8010258 <TIM_OC2_SetConfig+0xf0>)
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d10d      	bne.n	80101e6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	2280      	movs	r2, #128	; 0x80
 80101ce:	4393      	bics	r3, r2
 80101d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	011b      	lsls	r3, r3, #4
 80101d8:	697a      	ldr	r2, [r7, #20]
 80101da:	4313      	orrs	r3, r2
 80101dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	2240      	movs	r2, #64	; 0x40
 80101e2:	4393      	bics	r3, r2
 80101e4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	4a1b      	ldr	r2, [pc, #108]	; (8010258 <TIM_OC2_SetConfig+0xf0>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d00b      	beq.n	8010206 <TIM_OC2_SetConfig+0x9e>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4a1a      	ldr	r2, [pc, #104]	; (801025c <TIM_OC2_SetConfig+0xf4>)
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d007      	beq.n	8010206 <TIM_OC2_SetConfig+0x9e>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	4a19      	ldr	r2, [pc, #100]	; (8010260 <TIM_OC2_SetConfig+0xf8>)
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d003      	beq.n	8010206 <TIM_OC2_SetConfig+0x9e>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	4a18      	ldr	r2, [pc, #96]	; (8010264 <TIM_OC2_SetConfig+0xfc>)
 8010202:	4293      	cmp	r3, r2
 8010204:	d113      	bne.n	801022e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	4a17      	ldr	r2, [pc, #92]	; (8010268 <TIM_OC2_SetConfig+0x100>)
 801020a:	4013      	ands	r3, r2
 801020c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	4a16      	ldr	r2, [pc, #88]	; (801026c <TIM_OC2_SetConfig+0x104>)
 8010212:	4013      	ands	r3, r2
 8010214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	695b      	ldr	r3, [r3, #20]
 801021a:	009b      	lsls	r3, r3, #2
 801021c:	693a      	ldr	r2, [r7, #16]
 801021e:	4313      	orrs	r3, r2
 8010220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	699b      	ldr	r3, [r3, #24]
 8010226:	009b      	lsls	r3, r3, #2
 8010228:	693a      	ldr	r2, [r7, #16]
 801022a:	4313      	orrs	r3, r2
 801022c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	693a      	ldr	r2, [r7, #16]
 8010232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	68fa      	ldr	r2, [r7, #12]
 8010238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	685a      	ldr	r2, [r3, #4]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	697a      	ldr	r2, [r7, #20]
 8010246:	621a      	str	r2, [r3, #32]
}
 8010248:	46c0      	nop			; (mov r8, r8)
 801024a:	46bd      	mov	sp, r7
 801024c:	b006      	add	sp, #24
 801024e:	bd80      	pop	{r7, pc}
 8010250:	ffff8fff 	.word	0xffff8fff
 8010254:	fffffcff 	.word	0xfffffcff
 8010258:	40012c00 	.word	0x40012c00
 801025c:	40014000 	.word	0x40014000
 8010260:	40014400 	.word	0x40014400
 8010264:	40014800 	.word	0x40014800
 8010268:	fffffbff 	.word	0xfffffbff
 801026c:	fffff7ff 	.word	0xfffff7ff

08010270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b086      	sub	sp, #24
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6a1b      	ldr	r3, [r3, #32]
 801027e:	4a35      	ldr	r2, [pc, #212]	; (8010354 <TIM_OC3_SetConfig+0xe4>)
 8010280:	401a      	ands	r2, r3
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6a1b      	ldr	r3, [r3, #32]
 801028a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	69db      	ldr	r3, [r3, #28]
 8010296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2270      	movs	r2, #112	; 0x70
 801029c:	4393      	bics	r3, r2
 801029e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2203      	movs	r2, #3
 80102a4:	4393      	bics	r3, r2
 80102a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	4313      	orrs	r3, r2
 80102b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	4a28      	ldr	r2, [pc, #160]	; (8010358 <TIM_OC3_SetConfig+0xe8>)
 80102b6:	4013      	ands	r3, r2
 80102b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	689b      	ldr	r3, [r3, #8]
 80102be:	021b      	lsls	r3, r3, #8
 80102c0:	697a      	ldr	r2, [r7, #20]
 80102c2:	4313      	orrs	r3, r2
 80102c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	4a24      	ldr	r2, [pc, #144]	; (801035c <TIM_OC3_SetConfig+0xec>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d10d      	bne.n	80102ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	4a23      	ldr	r2, [pc, #140]	; (8010360 <TIM_OC3_SetConfig+0xf0>)
 80102d2:	4013      	ands	r3, r2
 80102d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	021b      	lsls	r3, r3, #8
 80102dc:	697a      	ldr	r2, [r7, #20]
 80102de:	4313      	orrs	r3, r2
 80102e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	4a1f      	ldr	r2, [pc, #124]	; (8010364 <TIM_OC3_SetConfig+0xf4>)
 80102e6:	4013      	ands	r3, r2
 80102e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4a1b      	ldr	r2, [pc, #108]	; (801035c <TIM_OC3_SetConfig+0xec>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d00b      	beq.n	801030a <TIM_OC3_SetConfig+0x9a>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4a1c      	ldr	r2, [pc, #112]	; (8010368 <TIM_OC3_SetConfig+0xf8>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d007      	beq.n	801030a <TIM_OC3_SetConfig+0x9a>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4a1b      	ldr	r2, [pc, #108]	; (801036c <TIM_OC3_SetConfig+0xfc>)
 80102fe:	4293      	cmp	r3, r2
 8010300:	d003      	beq.n	801030a <TIM_OC3_SetConfig+0x9a>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4a1a      	ldr	r2, [pc, #104]	; (8010370 <TIM_OC3_SetConfig+0x100>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d113      	bne.n	8010332 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	4a19      	ldr	r2, [pc, #100]	; (8010374 <TIM_OC3_SetConfig+0x104>)
 801030e:	4013      	ands	r3, r2
 8010310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	4a18      	ldr	r2, [pc, #96]	; (8010378 <TIM_OC3_SetConfig+0x108>)
 8010316:	4013      	ands	r3, r2
 8010318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	695b      	ldr	r3, [r3, #20]
 801031e:	011b      	lsls	r3, r3, #4
 8010320:	693a      	ldr	r2, [r7, #16]
 8010322:	4313      	orrs	r3, r2
 8010324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	699b      	ldr	r3, [r3, #24]
 801032a:	011b      	lsls	r3, r3, #4
 801032c:	693a      	ldr	r2, [r7, #16]
 801032e:	4313      	orrs	r3, r2
 8010330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	693a      	ldr	r2, [r7, #16]
 8010336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	68fa      	ldr	r2, [r7, #12]
 801033c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	685a      	ldr	r2, [r3, #4]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	697a      	ldr	r2, [r7, #20]
 801034a:	621a      	str	r2, [r3, #32]
}
 801034c:	46c0      	nop			; (mov r8, r8)
 801034e:	46bd      	mov	sp, r7
 8010350:	b006      	add	sp, #24
 8010352:	bd80      	pop	{r7, pc}
 8010354:	fffffeff 	.word	0xfffffeff
 8010358:	fffffdff 	.word	0xfffffdff
 801035c:	40012c00 	.word	0x40012c00
 8010360:	fffff7ff 	.word	0xfffff7ff
 8010364:	fffffbff 	.word	0xfffffbff
 8010368:	40014000 	.word	0x40014000
 801036c:	40014400 	.word	0x40014400
 8010370:	40014800 	.word	0x40014800
 8010374:	ffffefff 	.word	0xffffefff
 8010378:	ffffdfff 	.word	0xffffdfff

0801037c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b086      	sub	sp, #24
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6a1b      	ldr	r3, [r3, #32]
 801038a:	4a28      	ldr	r2, [pc, #160]	; (801042c <TIM_OC4_SetConfig+0xb0>)
 801038c:	401a      	ands	r2, r3
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6a1b      	ldr	r3, [r3, #32]
 8010396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	69db      	ldr	r3, [r3, #28]
 80103a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	4a22      	ldr	r2, [pc, #136]	; (8010430 <TIM_OC4_SetConfig+0xb4>)
 80103a8:	4013      	ands	r3, r2
 80103aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	4a21      	ldr	r2, [pc, #132]	; (8010434 <TIM_OC4_SetConfig+0xb8>)
 80103b0:	4013      	ands	r3, r2
 80103b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	021b      	lsls	r3, r3, #8
 80103ba:	68fa      	ldr	r2, [r7, #12]
 80103bc:	4313      	orrs	r3, r2
 80103be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	4a1d      	ldr	r2, [pc, #116]	; (8010438 <TIM_OC4_SetConfig+0xbc>)
 80103c4:	4013      	ands	r3, r2
 80103c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	689b      	ldr	r3, [r3, #8]
 80103cc:	031b      	lsls	r3, r3, #12
 80103ce:	693a      	ldr	r2, [r7, #16]
 80103d0:	4313      	orrs	r3, r2
 80103d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a19      	ldr	r2, [pc, #100]	; (801043c <TIM_OC4_SetConfig+0xc0>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d00b      	beq.n	80103f4 <TIM_OC4_SetConfig+0x78>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	4a18      	ldr	r2, [pc, #96]	; (8010440 <TIM_OC4_SetConfig+0xc4>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d007      	beq.n	80103f4 <TIM_OC4_SetConfig+0x78>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	4a17      	ldr	r2, [pc, #92]	; (8010444 <TIM_OC4_SetConfig+0xc8>)
 80103e8:	4293      	cmp	r3, r2
 80103ea:	d003      	beq.n	80103f4 <TIM_OC4_SetConfig+0x78>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	4a16      	ldr	r2, [pc, #88]	; (8010448 <TIM_OC4_SetConfig+0xcc>)
 80103f0:	4293      	cmp	r3, r2
 80103f2:	d109      	bne.n	8010408 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	4a15      	ldr	r2, [pc, #84]	; (801044c <TIM_OC4_SetConfig+0xd0>)
 80103f8:	4013      	ands	r3, r2
 80103fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	695b      	ldr	r3, [r3, #20]
 8010400:	019b      	lsls	r3, r3, #6
 8010402:	697a      	ldr	r2, [r7, #20]
 8010404:	4313      	orrs	r3, r2
 8010406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	697a      	ldr	r2, [r7, #20]
 801040c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	68fa      	ldr	r2, [r7, #12]
 8010412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	685a      	ldr	r2, [r3, #4]
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	693a      	ldr	r2, [r7, #16]
 8010420:	621a      	str	r2, [r3, #32]
}
 8010422:	46c0      	nop			; (mov r8, r8)
 8010424:	46bd      	mov	sp, r7
 8010426:	b006      	add	sp, #24
 8010428:	bd80      	pop	{r7, pc}
 801042a:	46c0      	nop			; (mov r8, r8)
 801042c:	ffffefff 	.word	0xffffefff
 8010430:	ffff8fff 	.word	0xffff8fff
 8010434:	fffffcff 	.word	0xfffffcff
 8010438:	ffffdfff 	.word	0xffffdfff
 801043c:	40012c00 	.word	0x40012c00
 8010440:	40014000 	.word	0x40014000
 8010444:	40014400 	.word	0x40014400
 8010448:	40014800 	.word	0x40014800
 801044c:	ffffbfff 	.word	0xffffbfff

08010450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b086      	sub	sp, #24
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	6a1b      	ldr	r3, [r3, #32]
 8010460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	6a1b      	ldr	r3, [r3, #32]
 8010466:	2201      	movs	r2, #1
 8010468:	4393      	bics	r3, r2
 801046a:	001a      	movs	r2, r3
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	699b      	ldr	r3, [r3, #24]
 8010474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	22f0      	movs	r2, #240	; 0xf0
 801047a:	4393      	bics	r3, r2
 801047c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	011b      	lsls	r3, r3, #4
 8010482:	693a      	ldr	r2, [r7, #16]
 8010484:	4313      	orrs	r3, r2
 8010486:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	220a      	movs	r2, #10
 801048c:	4393      	bics	r3, r2
 801048e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010490:	697a      	ldr	r2, [r7, #20]
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	4313      	orrs	r3, r2
 8010496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	693a      	ldr	r2, [r7, #16]
 801049c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	697a      	ldr	r2, [r7, #20]
 80104a2:	621a      	str	r2, [r3, #32]
}
 80104a4:	46c0      	nop			; (mov r8, r8)
 80104a6:	46bd      	mov	sp, r7
 80104a8:	b006      	add	sp, #24
 80104aa:	bd80      	pop	{r7, pc}

080104ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b086      	sub	sp, #24
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	6a1b      	ldr	r3, [r3, #32]
 80104bc:	2210      	movs	r2, #16
 80104be:	4393      	bics	r3, r2
 80104c0:	001a      	movs	r2, r3
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	699b      	ldr	r3, [r3, #24]
 80104ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	6a1b      	ldr	r3, [r3, #32]
 80104d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	4a0d      	ldr	r2, [pc, #52]	; (801050c <TIM_TI2_ConfigInputStage+0x60>)
 80104d6:	4013      	ands	r3, r2
 80104d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	031b      	lsls	r3, r3, #12
 80104de:	697a      	ldr	r2, [r7, #20]
 80104e0:	4313      	orrs	r3, r2
 80104e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	22a0      	movs	r2, #160	; 0xa0
 80104e8:	4393      	bics	r3, r2
 80104ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	011b      	lsls	r3, r3, #4
 80104f0:	693a      	ldr	r2, [r7, #16]
 80104f2:	4313      	orrs	r3, r2
 80104f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	697a      	ldr	r2, [r7, #20]
 80104fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	693a      	ldr	r2, [r7, #16]
 8010500:	621a      	str	r2, [r3, #32]
}
 8010502:	46c0      	nop			; (mov r8, r8)
 8010504:	46bd      	mov	sp, r7
 8010506:	b006      	add	sp, #24
 8010508:	bd80      	pop	{r7, pc}
 801050a:	46c0      	nop			; (mov r8, r8)
 801050c:	ffff0fff 	.word	0xffff0fff

08010510 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	689b      	ldr	r3, [r3, #8]
 801051e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2270      	movs	r2, #112	; 0x70
 8010524:	4393      	bics	r3, r2
 8010526:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010528:	683a      	ldr	r2, [r7, #0]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	4313      	orrs	r3, r2
 801052e:	2207      	movs	r2, #7
 8010530:	4313      	orrs	r3, r2
 8010532:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	68fa      	ldr	r2, [r7, #12]
 8010538:	609a      	str	r2, [r3, #8]
}
 801053a:	46c0      	nop			; (mov r8, r8)
 801053c:	46bd      	mov	sp, r7
 801053e:	b004      	add	sp, #16
 8010540:	bd80      	pop	{r7, pc}
	...

08010544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b086      	sub	sp, #24
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	607a      	str	r2, [r7, #4]
 8010550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	4a09      	ldr	r2, [pc, #36]	; (8010580 <TIM_ETR_SetConfig+0x3c>)
 801055c:	4013      	ands	r3, r2
 801055e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	021a      	lsls	r2, r3, #8
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	431a      	orrs	r2, r3
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	4313      	orrs	r3, r2
 801056c:	697a      	ldr	r2, [r7, #20]
 801056e:	4313      	orrs	r3, r2
 8010570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	697a      	ldr	r2, [r7, #20]
 8010576:	609a      	str	r2, [r3, #8]
}
 8010578:	46c0      	nop			; (mov r8, r8)
 801057a:	46bd      	mov	sp, r7
 801057c:	b006      	add	sp, #24
 801057e:	bd80      	pop	{r7, pc}
 8010580:	ffff00ff 	.word	0xffff00ff

08010584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b086      	sub	sp, #24
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	221f      	movs	r2, #31
 8010594:	4013      	ands	r3, r2
 8010596:	2201      	movs	r2, #1
 8010598:	409a      	lsls	r2, r3
 801059a:	0013      	movs	r3, r2
 801059c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	6a1b      	ldr	r3, [r3, #32]
 80105a2:	697a      	ldr	r2, [r7, #20]
 80105a4:	43d2      	mvns	r2, r2
 80105a6:	401a      	ands	r2, r3
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	6a1a      	ldr	r2, [r3, #32]
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	211f      	movs	r1, #31
 80105b4:	400b      	ands	r3, r1
 80105b6:	6879      	ldr	r1, [r7, #4]
 80105b8:	4099      	lsls	r1, r3
 80105ba:	000b      	movs	r3, r1
 80105bc:	431a      	orrs	r2, r3
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	621a      	str	r2, [r3, #32]
}
 80105c2:	46c0      	nop			; (mov r8, r8)
 80105c4:	46bd      	mov	sp, r7
 80105c6:	b006      	add	sp, #24
 80105c8:	bd80      	pop	{r7, pc}
	...

080105cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	223c      	movs	r2, #60	; 0x3c
 80105da:	5c9b      	ldrb	r3, [r3, r2]
 80105dc:	2b01      	cmp	r3, #1
 80105de:	d101      	bne.n	80105e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80105e0:	2302      	movs	r3, #2
 80105e2:	e047      	b.n	8010674 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	223c      	movs	r2, #60	; 0x3c
 80105e8:	2101      	movs	r1, #1
 80105ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	223d      	movs	r2, #61	; 0x3d
 80105f0:	2102      	movs	r1, #2
 80105f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	685b      	ldr	r3, [r3, #4]
 80105fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	689b      	ldr	r3, [r3, #8]
 8010602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2270      	movs	r2, #112	; 0x70
 8010608:	4393      	bics	r3, r2
 801060a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	68fa      	ldr	r2, [r7, #12]
 8010612:	4313      	orrs	r3, r2
 8010614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	68fa      	ldr	r2, [r7, #12]
 801061c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	4a16      	ldr	r2, [pc, #88]	; (801067c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8010624:	4293      	cmp	r3, r2
 8010626:	d00f      	beq.n	8010648 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	2380      	movs	r3, #128	; 0x80
 801062e:	05db      	lsls	r3, r3, #23
 8010630:	429a      	cmp	r2, r3
 8010632:	d009      	beq.n	8010648 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4a11      	ldr	r2, [pc, #68]	; (8010680 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d004      	beq.n	8010648 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	4a10      	ldr	r2, [pc, #64]	; (8010684 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8010644:	4293      	cmp	r3, r2
 8010646:	d10c      	bne.n	8010662 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	2280      	movs	r2, #128	; 0x80
 801064c:	4393      	bics	r3, r2
 801064e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	68ba      	ldr	r2, [r7, #8]
 8010656:	4313      	orrs	r3, r2
 8010658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	68ba      	ldr	r2, [r7, #8]
 8010660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	223d      	movs	r2, #61	; 0x3d
 8010666:	2101      	movs	r1, #1
 8010668:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	223c      	movs	r2, #60	; 0x3c
 801066e:	2100      	movs	r1, #0
 8010670:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010672:	2300      	movs	r3, #0
}
 8010674:	0018      	movs	r0, r3
 8010676:	46bd      	mov	sp, r7
 8010678:	b004      	add	sp, #16
 801067a:	bd80      	pop	{r7, pc}
 801067c:	40012c00 	.word	0x40012c00
 8010680:	40000400 	.word	0x40000400
 8010684:	40014000 	.word	0x40014000

08010688 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010692:	2300      	movs	r3, #0
 8010694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	223c      	movs	r2, #60	; 0x3c
 801069a:	5c9b      	ldrb	r3, [r3, r2]
 801069c:	2b01      	cmp	r3, #1
 801069e:	d101      	bne.n	80106a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80106a0:	2302      	movs	r3, #2
 80106a2:	e03e      	b.n	8010722 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	223c      	movs	r2, #60	; 0x3c
 80106a8:	2101      	movs	r1, #1
 80106aa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	22ff      	movs	r2, #255	; 0xff
 80106b0:	4393      	bics	r3, r2
 80106b2:	001a      	movs	r2, r3
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	68db      	ldr	r3, [r3, #12]
 80106b8:	4313      	orrs	r3, r2
 80106ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	4a1b      	ldr	r2, [pc, #108]	; (801072c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80106c0:	401a      	ands	r2, r3
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	689b      	ldr	r3, [r3, #8]
 80106c6:	4313      	orrs	r3, r2
 80106c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	4a18      	ldr	r2, [pc, #96]	; (8010730 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80106ce:	401a      	ands	r2, r3
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	685b      	ldr	r3, [r3, #4]
 80106d4:	4313      	orrs	r3, r2
 80106d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	4a16      	ldr	r2, [pc, #88]	; (8010734 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80106dc:	401a      	ands	r2, r3
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	4313      	orrs	r3, r2
 80106e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	4a13      	ldr	r2, [pc, #76]	; (8010738 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80106ea:	401a      	ands	r2, r3
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	691b      	ldr	r3, [r3, #16]
 80106f0:	4313      	orrs	r3, r2
 80106f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	4a11      	ldr	r2, [pc, #68]	; (801073c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80106f8:	401a      	ands	r2, r3
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	695b      	ldr	r3, [r3, #20]
 80106fe:	4313      	orrs	r3, r2
 8010700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	4a0e      	ldr	r2, [pc, #56]	; (8010740 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8010706:	401a      	ands	r2, r3
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	69db      	ldr	r3, [r3, #28]
 801070c:	4313      	orrs	r3, r2
 801070e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	68fa      	ldr	r2, [r7, #12]
 8010716:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	223c      	movs	r2, #60	; 0x3c
 801071c:	2100      	movs	r1, #0
 801071e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010720:	2300      	movs	r3, #0
}
 8010722:	0018      	movs	r0, r3
 8010724:	46bd      	mov	sp, r7
 8010726:	b004      	add	sp, #16
 8010728:	bd80      	pop	{r7, pc}
 801072a:	46c0      	nop			; (mov r8, r8)
 801072c:	fffffcff 	.word	0xfffffcff
 8010730:	fffffbff 	.word	0xfffffbff
 8010734:	fffff7ff 	.word	0xfffff7ff
 8010738:	ffffefff 	.word	0xffffefff
 801073c:	ffffdfff 	.word	0xffffdfff
 8010740:	ffffbfff 	.word	0xffffbfff

08010744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801074c:	46c0      	nop			; (mov r8, r8)
 801074e:	46bd      	mov	sp, r7
 8010750:	b002      	add	sp, #8
 8010752:	bd80      	pop	{r7, pc}

08010754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801075c:	46c0      	nop			; (mov r8, r8)
 801075e:	46bd      	mov	sp, r7
 8010760:	b002      	add	sp, #8
 8010762:	bd80      	pop	{r7, pc}

08010764 <__errno>:
 8010764:	4b01      	ldr	r3, [pc, #4]	; (801076c <__errno+0x8>)
 8010766:	6818      	ldr	r0, [r3, #0]
 8010768:	4770      	bx	lr
 801076a:	46c0      	nop			; (mov r8, r8)
 801076c:	20000414 	.word	0x20000414

08010770 <__libc_init_array>:
 8010770:	b570      	push	{r4, r5, r6, lr}
 8010772:	2600      	movs	r6, #0
 8010774:	4d0c      	ldr	r5, [pc, #48]	; (80107a8 <__libc_init_array+0x38>)
 8010776:	4c0d      	ldr	r4, [pc, #52]	; (80107ac <__libc_init_array+0x3c>)
 8010778:	1b64      	subs	r4, r4, r5
 801077a:	10a4      	asrs	r4, r4, #2
 801077c:	42a6      	cmp	r6, r4
 801077e:	d109      	bne.n	8010794 <__libc_init_array+0x24>
 8010780:	2600      	movs	r6, #0
 8010782:	f000 fae9 	bl	8010d58 <_init>
 8010786:	4d0a      	ldr	r5, [pc, #40]	; (80107b0 <__libc_init_array+0x40>)
 8010788:	4c0a      	ldr	r4, [pc, #40]	; (80107b4 <__libc_init_array+0x44>)
 801078a:	1b64      	subs	r4, r4, r5
 801078c:	10a4      	asrs	r4, r4, #2
 801078e:	42a6      	cmp	r6, r4
 8010790:	d105      	bne.n	801079e <__libc_init_array+0x2e>
 8010792:	bd70      	pop	{r4, r5, r6, pc}
 8010794:	00b3      	lsls	r3, r6, #2
 8010796:	58eb      	ldr	r3, [r5, r3]
 8010798:	4798      	blx	r3
 801079a:	3601      	adds	r6, #1
 801079c:	e7ee      	b.n	801077c <__libc_init_array+0xc>
 801079e:	00b3      	lsls	r3, r6, #2
 80107a0:	58eb      	ldr	r3, [r5, r3]
 80107a2:	4798      	blx	r3
 80107a4:	3601      	adds	r6, #1
 80107a6:	e7f2      	b.n	801078e <__libc_init_array+0x1e>
 80107a8:	08010f08 	.word	0x08010f08
 80107ac:	08010f08 	.word	0x08010f08
 80107b0:	08010f08 	.word	0x08010f08
 80107b4:	08010f0c 	.word	0x08010f0c

080107b8 <memset>:
 80107b8:	0003      	movs	r3, r0
 80107ba:	1882      	adds	r2, r0, r2
 80107bc:	4293      	cmp	r3, r2
 80107be:	d100      	bne.n	80107c2 <memset+0xa>
 80107c0:	4770      	bx	lr
 80107c2:	7019      	strb	r1, [r3, #0]
 80107c4:	3301      	adds	r3, #1
 80107c6:	e7f9      	b.n	80107bc <memset+0x4>

080107c8 <log>:
 80107c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ca:	0004      	movs	r4, r0
 80107cc:	000d      	movs	r5, r1
 80107ce:	f000 f857 	bl	8010880 <__ieee754_log>
 80107d2:	0022      	movs	r2, r4
 80107d4:	0006      	movs	r6, r0
 80107d6:	000f      	movs	r7, r1
 80107d8:	002b      	movs	r3, r5
 80107da:	0020      	movs	r0, r4
 80107dc:	0029      	movs	r1, r5
 80107de:	f7fa f9f1 	bl	800abc4 <__aeabi_dcmpun>
 80107e2:	2800      	cmp	r0, #0
 80107e4:	d115      	bne.n	8010812 <log+0x4a>
 80107e6:	2200      	movs	r2, #0
 80107e8:	2300      	movs	r3, #0
 80107ea:	0020      	movs	r0, r4
 80107ec:	0029      	movs	r1, r5
 80107ee:	f7f7 fd3f 	bl	8008270 <__aeabi_dcmpgt>
 80107f2:	2800      	cmp	r0, #0
 80107f4:	d10d      	bne.n	8010812 <log+0x4a>
 80107f6:	2200      	movs	r2, #0
 80107f8:	2300      	movs	r3, #0
 80107fa:	0020      	movs	r0, r4
 80107fc:	0029      	movs	r1, r5
 80107fe:	f7f7 fd1d 	bl	800823c <__aeabi_dcmpeq>
 8010802:	2800      	cmp	r0, #0
 8010804:	d008      	beq.n	8010818 <log+0x50>
 8010806:	f7ff ffad 	bl	8010764 <__errno>
 801080a:	2322      	movs	r3, #34	; 0x22
 801080c:	2600      	movs	r6, #0
 801080e:	4f07      	ldr	r7, [pc, #28]	; (801082c <log+0x64>)
 8010810:	6003      	str	r3, [r0, #0]
 8010812:	0030      	movs	r0, r6
 8010814:	0039      	movs	r1, r7
 8010816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010818:	f7ff ffa4 	bl	8010764 <__errno>
 801081c:	2321      	movs	r3, #33	; 0x21
 801081e:	6003      	str	r3, [r0, #0]
 8010820:	4803      	ldr	r0, [pc, #12]	; (8010830 <log+0x68>)
 8010822:	f000 fa93 	bl	8010d4c <nan>
 8010826:	0006      	movs	r6, r0
 8010828:	000f      	movs	r7, r1
 801082a:	e7f2      	b.n	8010812 <log+0x4a>
 801082c:	fff00000 	.word	0xfff00000
 8010830:	08010f04 	.word	0x08010f04

08010834 <sqrt>:
 8010834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010836:	0004      	movs	r4, r0
 8010838:	000d      	movs	r5, r1
 801083a:	f000 f9d1 	bl	8010be0 <__ieee754_sqrt>
 801083e:	0022      	movs	r2, r4
 8010840:	0006      	movs	r6, r0
 8010842:	000f      	movs	r7, r1
 8010844:	002b      	movs	r3, r5
 8010846:	0020      	movs	r0, r4
 8010848:	0029      	movs	r1, r5
 801084a:	f7fa f9bb 	bl	800abc4 <__aeabi_dcmpun>
 801084e:	2800      	cmp	r0, #0
 8010850:	d113      	bne.n	801087a <sqrt+0x46>
 8010852:	2200      	movs	r2, #0
 8010854:	2300      	movs	r3, #0
 8010856:	0020      	movs	r0, r4
 8010858:	0029      	movs	r1, r5
 801085a:	f7f7 fcf5 	bl	8008248 <__aeabi_dcmplt>
 801085e:	2800      	cmp	r0, #0
 8010860:	d00b      	beq.n	801087a <sqrt+0x46>
 8010862:	f7ff ff7f 	bl	8010764 <__errno>
 8010866:	2321      	movs	r3, #33	; 0x21
 8010868:	2200      	movs	r2, #0
 801086a:	6003      	str	r3, [r0, #0]
 801086c:	2300      	movs	r3, #0
 801086e:	0010      	movs	r0, r2
 8010870:	0019      	movs	r1, r3
 8010872:	f7f8 ffa7 	bl	80097c4 <__aeabi_ddiv>
 8010876:	0006      	movs	r6, r0
 8010878:	000f      	movs	r7, r1
 801087a:	0030      	movs	r0, r6
 801087c:	0039      	movs	r1, r7
 801087e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010880 <__ieee754_log>:
 8010880:	2280      	movs	r2, #128	; 0x80
 8010882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010884:	000b      	movs	r3, r1
 8010886:	b08d      	sub	sp, #52	; 0x34
 8010888:	0352      	lsls	r2, r2, #13
 801088a:	4291      	cmp	r1, r2
 801088c:	da22      	bge.n	80108d4 <__ieee754_log+0x54>
 801088e:	004a      	lsls	r2, r1, #1
 8010890:	0852      	lsrs	r2, r2, #1
 8010892:	4302      	orrs	r2, r0
 8010894:	d107      	bne.n	80108a6 <__ieee754_log+0x26>
 8010896:	2200      	movs	r2, #0
 8010898:	2300      	movs	r3, #0
 801089a:	2000      	movs	r0, #0
 801089c:	49b3      	ldr	r1, [pc, #716]	; (8010b6c <__ieee754_log+0x2ec>)
 801089e:	f7f8 ff91 	bl	80097c4 <__aeabi_ddiv>
 80108a2:	b00d      	add	sp, #52	; 0x34
 80108a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108a6:	2900      	cmp	r1, #0
 80108a8:	da05      	bge.n	80108b6 <__ieee754_log+0x36>
 80108aa:	0002      	movs	r2, r0
 80108ac:	f7f9 fdf8 	bl	800a4a0 <__aeabi_dsub>
 80108b0:	2200      	movs	r2, #0
 80108b2:	2300      	movs	r3, #0
 80108b4:	e7f3      	b.n	801089e <__ieee754_log+0x1e>
 80108b6:	4bae      	ldr	r3, [pc, #696]	; (8010b70 <__ieee754_log+0x2f0>)
 80108b8:	2200      	movs	r2, #0
 80108ba:	f7f9 fb85 	bl	8009fc8 <__aeabi_dmul>
 80108be:	2436      	movs	r4, #54	; 0x36
 80108c0:	000b      	movs	r3, r1
 80108c2:	4264      	negs	r4, r4
 80108c4:	4aab      	ldr	r2, [pc, #684]	; (8010b74 <__ieee754_log+0x2f4>)
 80108c6:	4293      	cmp	r3, r2
 80108c8:	dd06      	ble.n	80108d8 <__ieee754_log+0x58>
 80108ca:	0002      	movs	r2, r0
 80108cc:	000b      	movs	r3, r1
 80108ce:	f7f8 fc3d 	bl	800914c <__aeabi_dadd>
 80108d2:	e7e6      	b.n	80108a2 <__ieee754_log+0x22>
 80108d4:	2400      	movs	r4, #0
 80108d6:	e7f5      	b.n	80108c4 <__ieee754_log+0x44>
 80108d8:	4da7      	ldr	r5, [pc, #668]	; (8010b78 <__ieee754_log+0x2f8>)
 80108da:	151a      	asrs	r2, r3, #20
 80108dc:	1952      	adds	r2, r2, r5
 80108de:	1912      	adds	r2, r2, r4
 80108e0:	031b      	lsls	r3, r3, #12
 80108e2:	4ca6      	ldr	r4, [pc, #664]	; (8010b7c <__ieee754_log+0x2fc>)
 80108e4:	0b1b      	lsrs	r3, r3, #12
 80108e6:	9302      	str	r3, [sp, #8]
 80108e8:	191c      	adds	r4, r3, r4
 80108ea:	2380      	movs	r3, #128	; 0x80
 80108ec:	035b      	lsls	r3, r3, #13
 80108ee:	4023      	ands	r3, r4
 80108f0:	4ca3      	ldr	r4, [pc, #652]	; (8010b80 <__ieee754_log+0x300>)
 80108f2:	9d02      	ldr	r5, [sp, #8]
 80108f4:	405c      	eors	r4, r3
 80108f6:	151b      	asrs	r3, r3, #20
 80108f8:	189b      	adds	r3, r3, r2
 80108fa:	4325      	orrs	r5, r4
 80108fc:	2200      	movs	r2, #0
 80108fe:	9300      	str	r3, [sp, #0]
 8010900:	0029      	movs	r1, r5
 8010902:	4b9f      	ldr	r3, [pc, #636]	; (8010b80 <__ieee754_log+0x300>)
 8010904:	f7f9 fdcc 	bl	800a4a0 <__aeabi_dsub>
 8010908:	9b02      	ldr	r3, [sp, #8]
 801090a:	0006      	movs	r6, r0
 801090c:	3302      	adds	r3, #2
 801090e:	031b      	lsls	r3, r3, #12
 8010910:	000f      	movs	r7, r1
 8010912:	2200      	movs	r2, #0
 8010914:	0b1b      	lsrs	r3, r3, #12
 8010916:	2b02      	cmp	r3, #2
 8010918:	dc64      	bgt.n	80109e4 <__ieee754_log+0x164>
 801091a:	2300      	movs	r3, #0
 801091c:	f7f7 fc8e 	bl	800823c <__aeabi_dcmpeq>
 8010920:	2800      	cmp	r0, #0
 8010922:	d019      	beq.n	8010958 <__ieee754_log+0xd8>
 8010924:	9b00      	ldr	r3, [sp, #0]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d100      	bne.n	801092c <__ieee754_log+0xac>
 801092a:	e11c      	b.n	8010b66 <__ieee754_log+0x2e6>
 801092c:	0018      	movs	r0, r3
 801092e:	f7fa f99d 	bl	800ac6c <__aeabi_i2d>
 8010932:	4a94      	ldr	r2, [pc, #592]	; (8010b84 <__ieee754_log+0x304>)
 8010934:	4b94      	ldr	r3, [pc, #592]	; (8010b88 <__ieee754_log+0x308>)
 8010936:	0004      	movs	r4, r0
 8010938:	000d      	movs	r5, r1
 801093a:	f7f9 fb45 	bl	8009fc8 <__aeabi_dmul>
 801093e:	4a93      	ldr	r2, [pc, #588]	; (8010b8c <__ieee754_log+0x30c>)
 8010940:	0006      	movs	r6, r0
 8010942:	000f      	movs	r7, r1
 8010944:	4b92      	ldr	r3, [pc, #584]	; (8010b90 <__ieee754_log+0x310>)
 8010946:	0020      	movs	r0, r4
 8010948:	0029      	movs	r1, r5
 801094a:	f7f9 fb3d 	bl	8009fc8 <__aeabi_dmul>
 801094e:	0002      	movs	r2, r0
 8010950:	000b      	movs	r3, r1
 8010952:	0030      	movs	r0, r6
 8010954:	0039      	movs	r1, r7
 8010956:	e7ba      	b.n	80108ce <__ieee754_log+0x4e>
 8010958:	4a8e      	ldr	r2, [pc, #568]	; (8010b94 <__ieee754_log+0x314>)
 801095a:	4b8f      	ldr	r3, [pc, #572]	; (8010b98 <__ieee754_log+0x318>)
 801095c:	0030      	movs	r0, r6
 801095e:	0039      	movs	r1, r7
 8010960:	f7f9 fb32 	bl	8009fc8 <__aeabi_dmul>
 8010964:	0002      	movs	r2, r0
 8010966:	000b      	movs	r3, r1
 8010968:	2000      	movs	r0, #0
 801096a:	498c      	ldr	r1, [pc, #560]	; (8010b9c <__ieee754_log+0x31c>)
 801096c:	f7f9 fd98 	bl	800a4a0 <__aeabi_dsub>
 8010970:	0032      	movs	r2, r6
 8010972:	0004      	movs	r4, r0
 8010974:	000d      	movs	r5, r1
 8010976:	003b      	movs	r3, r7
 8010978:	0030      	movs	r0, r6
 801097a:	0039      	movs	r1, r7
 801097c:	f7f9 fb24 	bl	8009fc8 <__aeabi_dmul>
 8010980:	000b      	movs	r3, r1
 8010982:	0002      	movs	r2, r0
 8010984:	0029      	movs	r1, r5
 8010986:	0020      	movs	r0, r4
 8010988:	f7f9 fb1e 	bl	8009fc8 <__aeabi_dmul>
 801098c:	9b00      	ldr	r3, [sp, #0]
 801098e:	9002      	str	r0, [sp, #8]
 8010990:	9103      	str	r1, [sp, #12]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d106      	bne.n	80109a4 <__ieee754_log+0x124>
 8010996:	0002      	movs	r2, r0
 8010998:	000b      	movs	r3, r1
 801099a:	0030      	movs	r0, r6
 801099c:	0039      	movs	r1, r7
 801099e:	f7f9 fd7f 	bl	800a4a0 <__aeabi_dsub>
 80109a2:	e77e      	b.n	80108a2 <__ieee754_log+0x22>
 80109a4:	9800      	ldr	r0, [sp, #0]
 80109a6:	f7fa f961 	bl	800ac6c <__aeabi_i2d>
 80109aa:	4a76      	ldr	r2, [pc, #472]	; (8010b84 <__ieee754_log+0x304>)
 80109ac:	4b76      	ldr	r3, [pc, #472]	; (8010b88 <__ieee754_log+0x308>)
 80109ae:	0004      	movs	r4, r0
 80109b0:	000d      	movs	r5, r1
 80109b2:	f7f9 fb09 	bl	8009fc8 <__aeabi_dmul>
 80109b6:	4a75      	ldr	r2, [pc, #468]	; (8010b8c <__ieee754_log+0x30c>)
 80109b8:	9000      	str	r0, [sp, #0]
 80109ba:	9101      	str	r1, [sp, #4]
 80109bc:	4b74      	ldr	r3, [pc, #464]	; (8010b90 <__ieee754_log+0x310>)
 80109be:	0020      	movs	r0, r4
 80109c0:	0029      	movs	r1, r5
 80109c2:	f7f9 fb01 	bl	8009fc8 <__aeabi_dmul>
 80109c6:	0002      	movs	r2, r0
 80109c8:	000b      	movs	r3, r1
 80109ca:	9802      	ldr	r0, [sp, #8]
 80109cc:	9903      	ldr	r1, [sp, #12]
 80109ce:	f7f9 fd67 	bl	800a4a0 <__aeabi_dsub>
 80109d2:	0032      	movs	r2, r6
 80109d4:	003b      	movs	r3, r7
 80109d6:	f7f9 fd63 	bl	800a4a0 <__aeabi_dsub>
 80109da:	0002      	movs	r2, r0
 80109dc:	000b      	movs	r3, r1
 80109de:	9800      	ldr	r0, [sp, #0]
 80109e0:	9901      	ldr	r1, [sp, #4]
 80109e2:	e7dc      	b.n	801099e <__ieee754_log+0x11e>
 80109e4:	2380      	movs	r3, #128	; 0x80
 80109e6:	05db      	lsls	r3, r3, #23
 80109e8:	f7f8 fbb0 	bl	800914c <__aeabi_dadd>
 80109ec:	0002      	movs	r2, r0
 80109ee:	000b      	movs	r3, r1
 80109f0:	0030      	movs	r0, r6
 80109f2:	0039      	movs	r1, r7
 80109f4:	f7f8 fee6 	bl	80097c4 <__aeabi_ddiv>
 80109f8:	9004      	str	r0, [sp, #16]
 80109fa:	9105      	str	r1, [sp, #20]
 80109fc:	9800      	ldr	r0, [sp, #0]
 80109fe:	f7fa f935 	bl	800ac6c <__aeabi_i2d>
 8010a02:	9a04      	ldr	r2, [sp, #16]
 8010a04:	9b05      	ldr	r3, [sp, #20]
 8010a06:	9006      	str	r0, [sp, #24]
 8010a08:	9107      	str	r1, [sp, #28]
 8010a0a:	0010      	movs	r0, r2
 8010a0c:	0019      	movs	r1, r3
 8010a0e:	f7f9 fadb 	bl	8009fc8 <__aeabi_dmul>
 8010a12:	4a63      	ldr	r2, [pc, #396]	; (8010ba0 <__ieee754_log+0x320>)
 8010a14:	9b02      	ldr	r3, [sp, #8]
 8010a16:	4694      	mov	ip, r2
 8010a18:	4463      	add	r3, ip
 8010a1a:	0002      	movs	r2, r0
 8010a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a1e:	000b      	movs	r3, r1
 8010a20:	9008      	str	r0, [sp, #32]
 8010a22:	9109      	str	r1, [sp, #36]	; 0x24
 8010a24:	f7f9 fad0 	bl	8009fc8 <__aeabi_dmul>
 8010a28:	0004      	movs	r4, r0
 8010a2a:	000d      	movs	r5, r1
 8010a2c:	4a5d      	ldr	r2, [pc, #372]	; (8010ba4 <__ieee754_log+0x324>)
 8010a2e:	4b5e      	ldr	r3, [pc, #376]	; (8010ba8 <__ieee754_log+0x328>)
 8010a30:	f7f9 faca 	bl	8009fc8 <__aeabi_dmul>
 8010a34:	4a5d      	ldr	r2, [pc, #372]	; (8010bac <__ieee754_log+0x32c>)
 8010a36:	4b5e      	ldr	r3, [pc, #376]	; (8010bb0 <__ieee754_log+0x330>)
 8010a38:	f7f8 fb88 	bl	800914c <__aeabi_dadd>
 8010a3c:	0022      	movs	r2, r4
 8010a3e:	002b      	movs	r3, r5
 8010a40:	f7f9 fac2 	bl	8009fc8 <__aeabi_dmul>
 8010a44:	4a5b      	ldr	r2, [pc, #364]	; (8010bb4 <__ieee754_log+0x334>)
 8010a46:	4b5c      	ldr	r3, [pc, #368]	; (8010bb8 <__ieee754_log+0x338>)
 8010a48:	f7f8 fb80 	bl	800914c <__aeabi_dadd>
 8010a4c:	0022      	movs	r2, r4
 8010a4e:	002b      	movs	r3, r5
 8010a50:	f7f9 faba 	bl	8009fc8 <__aeabi_dmul>
 8010a54:	4a59      	ldr	r2, [pc, #356]	; (8010bbc <__ieee754_log+0x33c>)
 8010a56:	4b5a      	ldr	r3, [pc, #360]	; (8010bc0 <__ieee754_log+0x340>)
 8010a58:	f7f8 fb78 	bl	800914c <__aeabi_dadd>
 8010a5c:	9a08      	ldr	r2, [sp, #32]
 8010a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a60:	f7f9 fab2 	bl	8009fc8 <__aeabi_dmul>
 8010a64:	4a57      	ldr	r2, [pc, #348]	; (8010bc4 <__ieee754_log+0x344>)
 8010a66:	9008      	str	r0, [sp, #32]
 8010a68:	9109      	str	r1, [sp, #36]	; 0x24
 8010a6a:	4b57      	ldr	r3, [pc, #348]	; (8010bc8 <__ieee754_log+0x348>)
 8010a6c:	0020      	movs	r0, r4
 8010a6e:	0029      	movs	r1, r5
 8010a70:	f7f9 faaa 	bl	8009fc8 <__aeabi_dmul>
 8010a74:	4a55      	ldr	r2, [pc, #340]	; (8010bcc <__ieee754_log+0x34c>)
 8010a76:	4b56      	ldr	r3, [pc, #344]	; (8010bd0 <__ieee754_log+0x350>)
 8010a78:	f7f8 fb68 	bl	800914c <__aeabi_dadd>
 8010a7c:	0022      	movs	r2, r4
 8010a7e:	002b      	movs	r3, r5
 8010a80:	f7f9 faa2 	bl	8009fc8 <__aeabi_dmul>
 8010a84:	4a53      	ldr	r2, [pc, #332]	; (8010bd4 <__ieee754_log+0x354>)
 8010a86:	4b54      	ldr	r3, [pc, #336]	; (8010bd8 <__ieee754_log+0x358>)
 8010a88:	f7f8 fb60 	bl	800914c <__aeabi_dadd>
 8010a8c:	0022      	movs	r2, r4
 8010a8e:	002b      	movs	r3, r5
 8010a90:	f7f9 fa9a 	bl	8009fc8 <__aeabi_dmul>
 8010a94:	0002      	movs	r2, r0
 8010a96:	000b      	movs	r3, r1
 8010a98:	9808      	ldr	r0, [sp, #32]
 8010a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a9c:	f7f8 fb56 	bl	800914c <__aeabi_dadd>
 8010aa0:	9a02      	ldr	r2, [sp, #8]
 8010aa2:	4b4e      	ldr	r3, [pc, #312]	; (8010bdc <__ieee754_log+0x35c>)
 8010aa4:	0004      	movs	r4, r0
 8010aa6:	1a9b      	subs	r3, r3, r2
 8010aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010aaa:	000d      	movs	r5, r1
 8010aac:	4313      	orrs	r3, r2
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	dd34      	ble.n	8010b1c <__ieee754_log+0x29c>
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	4b39      	ldr	r3, [pc, #228]	; (8010b9c <__ieee754_log+0x31c>)
 8010ab6:	0030      	movs	r0, r6
 8010ab8:	0039      	movs	r1, r7
 8010aba:	f7f9 fa85 	bl	8009fc8 <__aeabi_dmul>
 8010abe:	0032      	movs	r2, r6
 8010ac0:	003b      	movs	r3, r7
 8010ac2:	f7f9 fa81 	bl	8009fc8 <__aeabi_dmul>
 8010ac6:	0002      	movs	r2, r0
 8010ac8:	000b      	movs	r3, r1
 8010aca:	9002      	str	r0, [sp, #8]
 8010acc:	9103      	str	r1, [sp, #12]
 8010ace:	0020      	movs	r0, r4
 8010ad0:	0029      	movs	r1, r5
 8010ad2:	f7f8 fb3b 	bl	800914c <__aeabi_dadd>
 8010ad6:	9a04      	ldr	r2, [sp, #16]
 8010ad8:	9b05      	ldr	r3, [sp, #20]
 8010ada:	f7f9 fa75 	bl	8009fc8 <__aeabi_dmul>
 8010ade:	9b00      	ldr	r3, [sp, #0]
 8010ae0:	0004      	movs	r4, r0
 8010ae2:	000d      	movs	r5, r1
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d106      	bne.n	8010af6 <__ieee754_log+0x276>
 8010ae8:	0002      	movs	r2, r0
 8010aea:	000b      	movs	r3, r1
 8010aec:	9802      	ldr	r0, [sp, #8]
 8010aee:	9903      	ldr	r1, [sp, #12]
 8010af0:	f7f9 fcd6 	bl	800a4a0 <__aeabi_dsub>
 8010af4:	e74f      	b.n	8010996 <__ieee754_log+0x116>
 8010af6:	4a23      	ldr	r2, [pc, #140]	; (8010b84 <__ieee754_log+0x304>)
 8010af8:	4b23      	ldr	r3, [pc, #140]	; (8010b88 <__ieee754_log+0x308>)
 8010afa:	9806      	ldr	r0, [sp, #24]
 8010afc:	9907      	ldr	r1, [sp, #28]
 8010afe:	f7f9 fa63 	bl	8009fc8 <__aeabi_dmul>
 8010b02:	4a22      	ldr	r2, [pc, #136]	; (8010b8c <__ieee754_log+0x30c>)
 8010b04:	9000      	str	r0, [sp, #0]
 8010b06:	9101      	str	r1, [sp, #4]
 8010b08:	9806      	ldr	r0, [sp, #24]
 8010b0a:	9907      	ldr	r1, [sp, #28]
 8010b0c:	4b20      	ldr	r3, [pc, #128]	; (8010b90 <__ieee754_log+0x310>)
 8010b0e:	f7f9 fa5b 	bl	8009fc8 <__aeabi_dmul>
 8010b12:	0022      	movs	r2, r4
 8010b14:	002b      	movs	r3, r5
 8010b16:	f7f8 fb19 	bl	800914c <__aeabi_dadd>
 8010b1a:	e754      	b.n	80109c6 <__ieee754_log+0x146>
 8010b1c:	0002      	movs	r2, r0
 8010b1e:	000b      	movs	r3, r1
 8010b20:	0030      	movs	r0, r6
 8010b22:	0039      	movs	r1, r7
 8010b24:	f7f9 fcbc 	bl	800a4a0 <__aeabi_dsub>
 8010b28:	9a04      	ldr	r2, [sp, #16]
 8010b2a:	9b05      	ldr	r3, [sp, #20]
 8010b2c:	f7f9 fa4c 	bl	8009fc8 <__aeabi_dmul>
 8010b30:	9b00      	ldr	r3, [sp, #0]
 8010b32:	0004      	movs	r4, r0
 8010b34:	000d      	movs	r5, r1
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d102      	bne.n	8010b40 <__ieee754_log+0x2c0>
 8010b3a:	0002      	movs	r2, r0
 8010b3c:	000b      	movs	r3, r1
 8010b3e:	e72c      	b.n	801099a <__ieee754_log+0x11a>
 8010b40:	4a10      	ldr	r2, [pc, #64]	; (8010b84 <__ieee754_log+0x304>)
 8010b42:	4b11      	ldr	r3, [pc, #68]	; (8010b88 <__ieee754_log+0x308>)
 8010b44:	9806      	ldr	r0, [sp, #24]
 8010b46:	9907      	ldr	r1, [sp, #28]
 8010b48:	f7f9 fa3e 	bl	8009fc8 <__aeabi_dmul>
 8010b4c:	4a0f      	ldr	r2, [pc, #60]	; (8010b8c <__ieee754_log+0x30c>)
 8010b4e:	9000      	str	r0, [sp, #0]
 8010b50:	9101      	str	r1, [sp, #4]
 8010b52:	9806      	ldr	r0, [sp, #24]
 8010b54:	9907      	ldr	r1, [sp, #28]
 8010b56:	4b0e      	ldr	r3, [pc, #56]	; (8010b90 <__ieee754_log+0x310>)
 8010b58:	f7f9 fa36 	bl	8009fc8 <__aeabi_dmul>
 8010b5c:	0002      	movs	r2, r0
 8010b5e:	000b      	movs	r3, r1
 8010b60:	0020      	movs	r0, r4
 8010b62:	0029      	movs	r1, r5
 8010b64:	e733      	b.n	80109ce <__ieee754_log+0x14e>
 8010b66:	2000      	movs	r0, #0
 8010b68:	2100      	movs	r1, #0
 8010b6a:	e69a      	b.n	80108a2 <__ieee754_log+0x22>
 8010b6c:	c3500000 	.word	0xc3500000
 8010b70:	43500000 	.word	0x43500000
 8010b74:	7fefffff 	.word	0x7fefffff
 8010b78:	fffffc01 	.word	0xfffffc01
 8010b7c:	00095f64 	.word	0x00095f64
 8010b80:	3ff00000 	.word	0x3ff00000
 8010b84:	fee00000 	.word	0xfee00000
 8010b88:	3fe62e42 	.word	0x3fe62e42
 8010b8c:	35793c76 	.word	0x35793c76
 8010b90:	3dea39ef 	.word	0x3dea39ef
 8010b94:	55555555 	.word	0x55555555
 8010b98:	3fd55555 	.word	0x3fd55555
 8010b9c:	3fe00000 	.word	0x3fe00000
 8010ba0:	fff9eb86 	.word	0xfff9eb86
 8010ba4:	df3e5244 	.word	0xdf3e5244
 8010ba8:	3fc2f112 	.word	0x3fc2f112
 8010bac:	96cb03de 	.word	0x96cb03de
 8010bb0:	3fc74664 	.word	0x3fc74664
 8010bb4:	94229359 	.word	0x94229359
 8010bb8:	3fd24924 	.word	0x3fd24924
 8010bbc:	55555593 	.word	0x55555593
 8010bc0:	3fe55555 	.word	0x3fe55555
 8010bc4:	d078c69f 	.word	0xd078c69f
 8010bc8:	3fc39a09 	.word	0x3fc39a09
 8010bcc:	1d8e78af 	.word	0x1d8e78af
 8010bd0:	3fcc71c5 	.word	0x3fcc71c5
 8010bd4:	9997fa04 	.word	0x9997fa04
 8010bd8:	3fd99999 	.word	0x3fd99999
 8010bdc:	0006b851 	.word	0x0006b851

08010be0 <__ieee754_sqrt>:
 8010be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010be2:	000b      	movs	r3, r1
 8010be4:	000c      	movs	r4, r1
 8010be6:	4956      	ldr	r1, [pc, #344]	; (8010d40 <__ieee754_sqrt+0x160>)
 8010be8:	0005      	movs	r5, r0
 8010bea:	0002      	movs	r2, r0
 8010bec:	0008      	movs	r0, r1
 8010bee:	b085      	sub	sp, #20
 8010bf0:	4020      	ands	r0, r4
 8010bf2:	4288      	cmp	r0, r1
 8010bf4:	d10f      	bne.n	8010c16 <__ieee754_sqrt+0x36>
 8010bf6:	0028      	movs	r0, r5
 8010bf8:	0021      	movs	r1, r4
 8010bfa:	f7f9 f9e5 	bl	8009fc8 <__aeabi_dmul>
 8010bfe:	0002      	movs	r2, r0
 8010c00:	000b      	movs	r3, r1
 8010c02:	0028      	movs	r0, r5
 8010c04:	0021      	movs	r1, r4
 8010c06:	f7f8 faa1 	bl	800914c <__aeabi_dadd>
 8010c0a:	0005      	movs	r5, r0
 8010c0c:	000c      	movs	r4, r1
 8010c0e:	0028      	movs	r0, r5
 8010c10:	0021      	movs	r1, r4
 8010c12:	b005      	add	sp, #20
 8010c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c16:	2c00      	cmp	r4, #0
 8010c18:	dc10      	bgt.n	8010c3c <__ieee754_sqrt+0x5c>
 8010c1a:	0061      	lsls	r1, r4, #1
 8010c1c:	0849      	lsrs	r1, r1, #1
 8010c1e:	4329      	orrs	r1, r5
 8010c20:	d0f5      	beq.n	8010c0e <__ieee754_sqrt+0x2e>
 8010c22:	2100      	movs	r1, #0
 8010c24:	428c      	cmp	r4, r1
 8010c26:	d100      	bne.n	8010c2a <__ieee754_sqrt+0x4a>
 8010c28:	e080      	b.n	8010d2c <__ieee754_sqrt+0x14c>
 8010c2a:	0028      	movs	r0, r5
 8010c2c:	0021      	movs	r1, r4
 8010c2e:	f7f9 fc37 	bl	800a4a0 <__aeabi_dsub>
 8010c32:	0002      	movs	r2, r0
 8010c34:	000b      	movs	r3, r1
 8010c36:	f7f8 fdc5 	bl	80097c4 <__aeabi_ddiv>
 8010c3a:	e7e6      	b.n	8010c0a <__ieee754_sqrt+0x2a>
 8010c3c:	1521      	asrs	r1, r4, #20
 8010c3e:	d075      	beq.n	8010d2c <__ieee754_sqrt+0x14c>
 8010c40:	4840      	ldr	r0, [pc, #256]	; (8010d44 <__ieee754_sqrt+0x164>)
 8010c42:	031b      	lsls	r3, r3, #12
 8010c44:	180c      	adds	r4, r1, r0
 8010c46:	2080      	movs	r0, #128	; 0x80
 8010c48:	0b1b      	lsrs	r3, r3, #12
 8010c4a:	0340      	lsls	r0, r0, #13
 8010c4c:	4303      	orrs	r3, r0
 8010c4e:	07c9      	lsls	r1, r1, #31
 8010c50:	d403      	bmi.n	8010c5a <__ieee754_sqrt+0x7a>
 8010c52:	0fd1      	lsrs	r1, r2, #31
 8010c54:	005b      	lsls	r3, r3, #1
 8010c56:	185b      	adds	r3, r3, r1
 8010c58:	0052      	lsls	r2, r2, #1
 8010c5a:	1061      	asrs	r1, r4, #1
 8010c5c:	2400      	movs	r4, #0
 8010c5e:	9103      	str	r1, [sp, #12]
 8010c60:	005b      	lsls	r3, r3, #1
 8010c62:	0fd1      	lsrs	r1, r2, #31
 8010c64:	185b      	adds	r3, r3, r1
 8010c66:	2180      	movs	r1, #128	; 0x80
 8010c68:	2516      	movs	r5, #22
 8010c6a:	0020      	movs	r0, r4
 8010c6c:	0052      	lsls	r2, r2, #1
 8010c6e:	0389      	lsls	r1, r1, #14
 8010c70:	1846      	adds	r6, r0, r1
 8010c72:	429e      	cmp	r6, r3
 8010c74:	dc02      	bgt.n	8010c7c <__ieee754_sqrt+0x9c>
 8010c76:	1870      	adds	r0, r6, r1
 8010c78:	1b9b      	subs	r3, r3, r6
 8010c7a:	1864      	adds	r4, r4, r1
 8010c7c:	0fd6      	lsrs	r6, r2, #31
 8010c7e:	005b      	lsls	r3, r3, #1
 8010c80:	3d01      	subs	r5, #1
 8010c82:	18f3      	adds	r3, r6, r3
 8010c84:	0052      	lsls	r2, r2, #1
 8010c86:	0849      	lsrs	r1, r1, #1
 8010c88:	2d00      	cmp	r5, #0
 8010c8a:	d1f1      	bne.n	8010c70 <__ieee754_sqrt+0x90>
 8010c8c:	2620      	movs	r6, #32
 8010c8e:	2780      	movs	r7, #128	; 0x80
 8010c90:	0029      	movs	r1, r5
 8010c92:	9601      	str	r6, [sp, #4]
 8010c94:	063f      	lsls	r7, r7, #24
 8010c96:	197e      	adds	r6, r7, r5
 8010c98:	46b4      	mov	ip, r6
 8010c9a:	4283      	cmp	r3, r0
 8010c9c:	dc02      	bgt.n	8010ca4 <__ieee754_sqrt+0xc4>
 8010c9e:	d114      	bne.n	8010cca <__ieee754_sqrt+0xea>
 8010ca0:	4296      	cmp	r6, r2
 8010ca2:	d812      	bhi.n	8010cca <__ieee754_sqrt+0xea>
 8010ca4:	4665      	mov	r5, ip
 8010ca6:	4666      	mov	r6, ip
 8010ca8:	19ed      	adds	r5, r5, r7
 8010caa:	9002      	str	r0, [sp, #8]
 8010cac:	2e00      	cmp	r6, #0
 8010cae:	da03      	bge.n	8010cb8 <__ieee754_sqrt+0xd8>
 8010cb0:	43ee      	mvns	r6, r5
 8010cb2:	0ff6      	lsrs	r6, r6, #31
 8010cb4:	1986      	adds	r6, r0, r6
 8010cb6:	9602      	str	r6, [sp, #8]
 8010cb8:	1a1b      	subs	r3, r3, r0
 8010cba:	4562      	cmp	r2, ip
 8010cbc:	4180      	sbcs	r0, r0
 8010cbe:	4240      	negs	r0, r0
 8010cc0:	1a1b      	subs	r3, r3, r0
 8010cc2:	4660      	mov	r0, ip
 8010cc4:	1a12      	subs	r2, r2, r0
 8010cc6:	9802      	ldr	r0, [sp, #8]
 8010cc8:	19c9      	adds	r1, r1, r7
 8010cca:	0fd6      	lsrs	r6, r2, #31
 8010ccc:	005b      	lsls	r3, r3, #1
 8010cce:	199b      	adds	r3, r3, r6
 8010cd0:	9e01      	ldr	r6, [sp, #4]
 8010cd2:	0052      	lsls	r2, r2, #1
 8010cd4:	3e01      	subs	r6, #1
 8010cd6:	087f      	lsrs	r7, r7, #1
 8010cd8:	9601      	str	r6, [sp, #4]
 8010cda:	2e00      	cmp	r6, #0
 8010cdc:	d1db      	bne.n	8010c96 <__ieee754_sqrt+0xb6>
 8010cde:	4313      	orrs	r3, r2
 8010ce0:	d003      	beq.n	8010cea <__ieee754_sqrt+0x10a>
 8010ce2:	1c4b      	adds	r3, r1, #1
 8010ce4:	d127      	bne.n	8010d36 <__ieee754_sqrt+0x156>
 8010ce6:	0031      	movs	r1, r6
 8010ce8:	3401      	adds	r4, #1
 8010cea:	4b17      	ldr	r3, [pc, #92]	; (8010d48 <__ieee754_sqrt+0x168>)
 8010cec:	1060      	asrs	r0, r4, #1
 8010cee:	18c0      	adds	r0, r0, r3
 8010cf0:	0849      	lsrs	r1, r1, #1
 8010cf2:	07e3      	lsls	r3, r4, #31
 8010cf4:	d502      	bpl.n	8010cfc <__ieee754_sqrt+0x11c>
 8010cf6:	2380      	movs	r3, #128	; 0x80
 8010cf8:	061b      	lsls	r3, r3, #24
 8010cfa:	4319      	orrs	r1, r3
 8010cfc:	9b03      	ldr	r3, [sp, #12]
 8010cfe:	000d      	movs	r5, r1
 8010d00:	051c      	lsls	r4, r3, #20
 8010d02:	1823      	adds	r3, r4, r0
 8010d04:	001c      	movs	r4, r3
 8010d06:	e782      	b.n	8010c0e <__ieee754_sqrt+0x2e>
 8010d08:	0ad3      	lsrs	r3, r2, #11
 8010d0a:	3815      	subs	r0, #21
 8010d0c:	0552      	lsls	r2, r2, #21
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d0fa      	beq.n	8010d08 <__ieee754_sqrt+0x128>
 8010d12:	2480      	movs	r4, #128	; 0x80
 8010d14:	0364      	lsls	r4, r4, #13
 8010d16:	4223      	tst	r3, r4
 8010d18:	d00a      	beq.n	8010d30 <__ieee754_sqrt+0x150>
 8010d1a:	2420      	movs	r4, #32
 8010d1c:	0016      	movs	r6, r2
 8010d1e:	1a64      	subs	r4, r4, r1
 8010d20:	40e6      	lsrs	r6, r4
 8010d22:	1e4d      	subs	r5, r1, #1
 8010d24:	408a      	lsls	r2, r1
 8010d26:	4333      	orrs	r3, r6
 8010d28:	1b41      	subs	r1, r0, r5
 8010d2a:	e789      	b.n	8010c40 <__ieee754_sqrt+0x60>
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	e7ee      	b.n	8010d0e <__ieee754_sqrt+0x12e>
 8010d30:	005b      	lsls	r3, r3, #1
 8010d32:	3101      	adds	r1, #1
 8010d34:	e7ef      	b.n	8010d16 <__ieee754_sqrt+0x136>
 8010d36:	2301      	movs	r3, #1
 8010d38:	3101      	adds	r1, #1
 8010d3a:	4399      	bics	r1, r3
 8010d3c:	e7d5      	b.n	8010cea <__ieee754_sqrt+0x10a>
 8010d3e:	46c0      	nop			; (mov r8, r8)
 8010d40:	7ff00000 	.word	0x7ff00000
 8010d44:	fffffc01 	.word	0xfffffc01
 8010d48:	3fe00000 	.word	0x3fe00000

08010d4c <nan>:
 8010d4c:	2000      	movs	r0, #0
 8010d4e:	4901      	ldr	r1, [pc, #4]	; (8010d54 <nan+0x8>)
 8010d50:	4770      	bx	lr
 8010d52:	46c0      	nop			; (mov r8, r8)
 8010d54:	7ff80000 	.word	0x7ff80000

08010d58 <_init>:
 8010d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d5a:	46c0      	nop			; (mov r8, r8)
 8010d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d5e:	bc08      	pop	{r3}
 8010d60:	469e      	mov	lr, r3
 8010d62:	4770      	bx	lr

08010d64 <_fini>:
 8010d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d66:	46c0      	nop			; (mov r8, r8)
 8010d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010d6a:	bc08      	pop	{r3}
 8010d6c:	469e      	mov	lr, r3
 8010d6e:	4770      	bx	lr
